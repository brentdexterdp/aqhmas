
DHT11_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08003da0  08003da0  00013da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef8  08003ef8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ef8  08003ef8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ef8  08003ef8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000070  08003f70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08003f70  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003852  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001017  00000000  00000000  00023935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  00024950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000262  00000000  00000000  00024cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ce7  00000000  00000000  00024f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000060ad  00000000  00000000  0003ac09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084f27  00000000  00000000  00040cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001400  00000000  00000000  000c5be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c0  00000000  00000000  000c6fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d88 	.word	0x08003d88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003d88 	.word	0x08003d88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <DHT11_Start>:
 */

#include "DHT11.h"
#include <math.h>

void DHT11_Start() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

	GPIOB->MODER |= (1 << 12); // output mode
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <DHT11_Start+0x60>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <DHT11_Start+0x60>)
 8000c12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c16:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 13);
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <DHT11_Start+0x60>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <DHT11_Start+0x60>)
 8000c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c22:	6013      	str	r3, [r2, #0]
	GPIOB->ODR &= ~(1 << 6);
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <DHT11_Start+0x60>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <DHT11_Start+0x60>)
 8000c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c2e:	6153      	str	r3, [r2, #20]
	delay_us(18000);
 8000c30:	f244 6050 	movw	r0, #18000	; 0x4650
 8000c34:	f000 fc2a 	bl	800148c <delay_us>
	GPIOB->ODR |= (1 << 6);
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <DHT11_Start+0x60>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <DHT11_Start+0x60>)
 8000c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c42:	6153      	str	r3, [r2, #20]
	delay_us(40);
 8000c44:	2028      	movs	r0, #40	; 0x28
 8000c46:	f000 fc21 	bl	800148c <delay_us>

	GPIOB->MODER &= ~(1 << 12); // input mode
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <DHT11_Start+0x60>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <DHT11_Start+0x60>)
 8000c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c54:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 13);
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <DHT11_Start+0x60>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <DHT11_Start+0x60>)
 8000c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c60:	6013      	str	r3, [r2, #0]
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020400 	.word	0x40020400

08000c6c <DHT11_Response>:

void DHT11_Response(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

	while(GPIOB_IDR_Pin(6)){}
 8000c70:	bf00      	nop
 8000c72:	2006      	movs	r0, #6
 8000c74:	f000 fb98 	bl	80013a8 <GPIOB_IDR_Pin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f9      	bne.n	8000c72 <DHT11_Response+0x6>
	delay_us(80);
 8000c7e:	2050      	movs	r0, #80	; 0x50
 8000c80:	f000 fc04 	bl	800148c <delay_us>
	while(!GPIOB_IDR_Pin(6)){}
 8000c84:	bf00      	nop
 8000c86:	2006      	movs	r0, #6
 8000c88:	f000 fb8e 	bl	80013a8 <GPIOB_IDR_Pin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f9      	beq.n	8000c86 <DHT11_Response+0x1a>
	delay_us(80);
 8000c92:	2050      	movs	r0, #80	; 0x50
 8000c94:	f000 fbfa 	bl	800148c <delay_us>

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <DHT11_Read_Eight_Bit>:

int DHT11_Read_Eight_Bit(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

	int temp = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]

	for(int i = 0; i<8; i++){
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	e02d      	b.n	8000d08 <DHT11_Read_Eight_Bit+0x6c>

		while(!GPIOB_IDR_Pin(6)){}
 8000cac:	bf00      	nop
 8000cae:	2006      	movs	r0, #6
 8000cb0:	f000 fb7a 	bl	80013a8 <GPIOB_IDR_Pin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f9      	beq.n	8000cae <DHT11_Read_Eight_Bit+0x12>
		delay_us(40);
 8000cba:	2028      	movs	r0, #40	; 0x28
 8000cbc:	f000 fbe6 	bl	800148c <delay_us>

		if(!GPIOB_IDR_Pin(6)){
 8000cc0:	2006      	movs	r0, #6
 8000cc2:	f000 fb71 	bl	80013a8 <GPIOB_IDR_Pin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10a      	bne.n	8000ce2 <DHT11_Read_Eight_Bit+0x46>
			temp &= ~(1<<(7-i));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	e008      	b.n	8000cf4 <DHT11_Read_Eight_Bit+0x58>
		} else{
			temp |= (1<<(7-i));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f1c3 0307 	rsb	r3, r3, #7
 8000ce8:	2201      	movs	r2, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	607b      	str	r3, [r7, #4]
		}

		while(GPIOB_IDR_Pin(6)){}
 8000cf4:	bf00      	nop
 8000cf6:	2006      	movs	r0, #6
 8000cf8:	f000 fb56 	bl	80013a8 <GPIOB_IDR_Pin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <DHT11_Read_Eight_Bit+0x5a>
	for(int i = 0; i<8; i++){
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	ddce      	ble.n	8000cac <DHT11_Read_Eight_Bit+0x10>

	}

	return temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]

}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <DHT11_Read>:

void DHT11_Read(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

	RH_whole = DHT11_Read_Eight_Bit();
 8000d1c:	f7ff ffbe 	bl	8000c9c <DHT11_Read_Eight_Bit>
 8000d20:	ee07 0a90 	vmov	s15, r0
 8000d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <DHT11_Read+0x64>)
 8000d2a:	edc3 7a00 	vstr	s15, [r3]
	RH_dec = DHT11_Read_Eight_Bit();
 8000d2e:	f7ff ffb5 	bl	8000c9c <DHT11_Read_Eight_Bit>
 8000d32:	ee07 0a90 	vmov	s15, r0
 8000d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <DHT11_Read+0x68>)
 8000d3c:	edc3 7a00 	vstr	s15, [r3]
	Temp_whole = DHT11_Read_Eight_Bit();
 8000d40:	f7ff ffac 	bl	8000c9c <DHT11_Read_Eight_Bit>
 8000d44:	ee07 0a90 	vmov	s15, r0
 8000d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <DHT11_Read+0x6c>)
 8000d4e:	edc3 7a00 	vstr	s15, [r3]
	Temp_dec = DHT11_Read_Eight_Bit();
 8000d52:	f7ff ffa3 	bl	8000c9c <DHT11_Read_Eight_Bit>
 8000d56:	ee07 0a90 	vmov	s15, r0
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <DHT11_Read+0x70>)
 8000d60:	edc3 7a00 	vstr	s15, [r3]
	RH_Temp_checksum = DHT11_Read_Eight_Bit();
 8000d64:	f7ff ff9a 	bl	8000c9c <DHT11_Read_Eight_Bit>
 8000d68:	ee07 0a90 	vmov	s15, r0
 8000d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <DHT11_Read+0x74>)
 8000d72:	edc3 7a00 	vstr	s15, [r3]

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000a4 	.word	0x200000a4
 8000d80:	200000a8 	.word	0x200000a8
 8000d84:	200000ac 	.word	0x200000ac
 8000d88:	200000b0 	.word	0x200000b0
 8000d8c:	200000b4 	.word	0x200000b4

08000d90 <DHT11_HI_calc>:

int DHT11_HI_calc(){
 8000d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d94:	b08a      	sub	sp, #40	; 0x28
 8000d96:	af00      	add	r7, sp, #0

	float c1 = -42.379;
 8000d98:	4bb5      	ldr	r3, [pc, #724]	; (8001070 <DHT11_HI_calc+0x2e0>)
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
	float c2= 2.04901523;
 8000d9c:	4bb5      	ldr	r3, [pc, #724]	; (8001074 <DHT11_HI_calc+0x2e4>)
 8000d9e:	623b      	str	r3, [r7, #32]
	float c3 = 10.14333127;
 8000da0:	4bb5      	ldr	r3, [pc, #724]	; (8001078 <DHT11_HI_calc+0x2e8>)
 8000da2:	61fb      	str	r3, [r7, #28]
	float c4 = -0.22475541;
 8000da4:	4bb5      	ldr	r3, [pc, #724]	; (800107c <DHT11_HI_calc+0x2ec>)
 8000da6:	61bb      	str	r3, [r7, #24]
	float c5 = -6.83783*pow(10,-3);
 8000da8:	4bb5      	ldr	r3, [pc, #724]	; (8001080 <DHT11_HI_calc+0x2f0>)
 8000daa:	617b      	str	r3, [r7, #20]
	float c6 = -5.481717*pow(10,-2);
 8000dac:	4bb5      	ldr	r3, [pc, #724]	; (8001084 <DHT11_HI_calc+0x2f4>)
 8000dae:	613b      	str	r3, [r7, #16]
	float c7 = 1.22874*pow(10,-3);
 8000db0:	4bb5      	ldr	r3, [pc, #724]	; (8001088 <DHT11_HI_calc+0x2f8>)
 8000db2:	60fb      	str	r3, [r7, #12]
	float c8 = 8.5282*pow(10,-4);
 8000db4:	4bb5      	ldr	r3, [pc, #724]	; (800108c <DHT11_HI_calc+0x2fc>)
 8000db6:	60bb      	str	r3, [r7, #8]
	float c9 = -1.99*pow(10,-6);
 8000db8:	4bb5      	ldr	r3, [pc, #724]	; (8001090 <DHT11_HI_calc+0x300>)
 8000dba:	607b      	str	r3, [r7, #4]

	Temp_comb = Temp_whole + (Temp_dec/10);
 8000dbc:	4bb5      	ldr	r3, [pc, #724]	; (8001094 <DHT11_HI_calc+0x304>)
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000dc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000dca:	4bb3      	ldr	r3, [pc, #716]	; (8001098 <DHT11_HI_calc+0x308>)
 8000dcc:	edd3 7a00 	vldr	s15, [r3]
 8000dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd4:	4bb1      	ldr	r3, [pc, #708]	; (800109c <DHT11_HI_calc+0x30c>)
 8000dd6:	edc3 7a00 	vstr	s15, [r3]
	Temp_comb = (Temp_comb*9/5) + 32;
 8000dda:	4bb0      	ldr	r3, [pc, #704]	; (800109c <DHT11_HI_calc+0x30c>)
 8000ddc:	edd3 7a00 	vldr	s15, [r3]
 8000de0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000de4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000de8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80010a0 <DHT11_HI_calc+0x310>
 8000df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000df8:	4ba8      	ldr	r3, [pc, #672]	; (800109c <DHT11_HI_calc+0x30c>)
 8000dfa:	edc3 7a00 	vstr	s15, [r3]
	RH_comb = RH_whole + (RH_dec/10);
 8000dfe:	4ba9      	ldr	r3, [pc, #676]	; (80010a4 <DHT11_HI_calc+0x314>)
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000e08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e0c:	4ba6      	ldr	r3, [pc, #664]	; (80010a8 <DHT11_HI_calc+0x318>)
 8000e0e:	edd3 7a00 	vldr	s15, [r3]
 8000e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e16:	4ba5      	ldr	r3, [pc, #660]	; (80010ac <DHT11_HI_calc+0x31c>)
 8000e18:	edc3 7a00 	vstr	s15, [r3]

	heat_index = c1+c2*Temp_comb+c3*RH_comb+c4*Temp_comb*RH_comb+c5*pow(Temp_comb,2)+c6*pow(RH_comb,2)+c7*pow(Temp_comb,2)*RH_comb+c8*Temp_comb*pow(RH_comb,2)+c9*pow(Temp_comb,2)*pow(RH_comb,2);
 8000e1c:	4b9f      	ldr	r3, [pc, #636]	; (800109c <DHT11_HI_calc+0x30c>)
 8000e1e:	ed93 7a00 	vldr	s14, [r3]
 8000e22:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e32:	4b9e      	ldr	r3, [pc, #632]	; (80010ac <DHT11_HI_calc+0x31c>)
 8000e34:	edd3 6a00 	vldr	s13, [r3]
 8000e38:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e44:	4b95      	ldr	r3, [pc, #596]	; (800109c <DHT11_HI_calc+0x30c>)
 8000e46:	edd3 6a00 	vldr	s13, [r3]
 8000e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e52:	4b96      	ldr	r3, [pc, #600]	; (80010ac <DHT11_HI_calc+0x31c>)
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e60:	ee17 0a90 	vmov	r0, s15
 8000e64:	f7ff fb78 	bl	8000558 <__aeabi_f2d>
 8000e68:	4604      	mov	r4, r0
 8000e6a:	460d      	mov	r5, r1
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff fb73 	bl	8000558 <__aeabi_f2d>
 8000e72:	4680      	mov	r8, r0
 8000e74:	4689      	mov	r9, r1
 8000e76:	4b89      	ldr	r3, [pc, #548]	; (800109c <DHT11_HI_calc+0x30c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb6c 	bl	8000558 <__aeabi_f2d>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8001068 <DHT11_HI_calc+0x2d8>
 8000e88:	ec43 2b10 	vmov	d0, r2, r3
 8000e8c:	f002 f844 	bl	8002f18 <pow>
 8000e90:	ec53 2b10 	vmov	r2, r3, d0
 8000e94:	4640      	mov	r0, r8
 8000e96:	4649      	mov	r1, r9
 8000e98:	f7ff fbb6 	bl	8000608 <__aeabi_dmul>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	4629      	mov	r1, r5
 8000ea4:	f7ff f9fa 	bl	800029c <__adddf3>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4690      	mov	r8, r2
 8000eae:	4699      	mov	r9, r3
 8000eb0:	6938      	ldr	r0, [r7, #16]
 8000eb2:	f7ff fb51 	bl	8000558 <__aeabi_f2d>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	460d      	mov	r5, r1
 8000eba:	4b7c      	ldr	r3, [pc, #496]	; (80010ac <DHT11_HI_calc+0x31c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fb4a 	bl	8000558 <__aeabi_f2d>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8001068 <DHT11_HI_calc+0x2d8>
 8000ecc:	ec43 2b10 	vmov	d0, r2, r3
 8000ed0:	f002 f822 	bl	8002f18 <pow>
 8000ed4:	ec53 2b10 	vmov	r2, r3, d0
 8000ed8:	4620      	mov	r0, r4
 8000eda:	4629      	mov	r1, r5
 8000edc:	f7ff fb94 	bl	8000608 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	f7ff f9d8 	bl	800029c <__adddf3>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4690      	mov	r8, r2
 8000ef2:	4699      	mov	r9, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff fb2f 	bl	8000558 <__aeabi_f2d>
 8000efa:	4604      	mov	r4, r0
 8000efc:	460d      	mov	r5, r1
 8000efe:	4b67      	ldr	r3, [pc, #412]	; (800109c <DHT11_HI_calc+0x30c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb28 	bl	8000558 <__aeabi_f2d>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8001068 <DHT11_HI_calc+0x2d8>
 8000f10:	ec43 2b10 	vmov	d0, r2, r3
 8000f14:	f002 f800 	bl	8002f18 <pow>
 8000f18:	ec53 2b10 	vmov	r2, r3, d0
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	4629      	mov	r1, r5
 8000f20:	f7ff fb72 	bl	8000608 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4614      	mov	r4, r2
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	4b5f      	ldr	r3, [pc, #380]	; (80010ac <DHT11_HI_calc+0x31c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fb11 	bl	8000558 <__aeabi_f2d>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff fb63 	bl	8000608 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4640      	mov	r0, r8
 8000f48:	4649      	mov	r1, r9
 8000f4a:	f7ff f9a7 	bl	800029c <__adddf3>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4690      	mov	r8, r2
 8000f54:	4699      	mov	r9, r3
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <DHT11_HI_calc+0x30c>)
 8000f58:	ed93 7a00 	vldr	s14, [r3]
 8000f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f64:	ee17 0a90 	vmov	r0, s15
 8000f68:	f7ff faf6 	bl	8000558 <__aeabi_f2d>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	460d      	mov	r5, r1
 8000f70:	4b4e      	ldr	r3, [pc, #312]	; (80010ac <DHT11_HI_calc+0x31c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff faef 	bl	8000558 <__aeabi_f2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001068 <DHT11_HI_calc+0x2d8>
 8000f82:	ec43 2b10 	vmov	d0, r2, r3
 8000f86:	f001 ffc7 	bl	8002f18 <pow>
 8000f8a:	ec53 2b10 	vmov	r2, r3, d0
 8000f8e:	4620      	mov	r0, r4
 8000f90:	4629      	mov	r1, r5
 8000f92:	f7ff fb39 	bl	8000608 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4640      	mov	r0, r8
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	f7ff f97d 	bl	800029c <__adddf3>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4690      	mov	r8, r2
 8000fa8:	4699      	mov	r9, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fad4 	bl	8000558 <__aeabi_f2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	4b39      	ldr	r3, [pc, #228]	; (800109c <DHT11_HI_calc+0x30c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff facd 	bl	8000558 <__aeabi_f2d>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001068 <DHT11_HI_calc+0x2d8>
 8000fc6:	ec43 2b10 	vmov	d0, r2, r3
 8000fca:	f001 ffa5 	bl	8002f18 <pow>
 8000fce:	ec53 2b10 	vmov	r2, r3, d0
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	4629      	mov	r1, r5
 8000fd6:	f7ff fb17 	bl	8000608 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4614      	mov	r4, r2
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	4b32      	ldr	r3, [pc, #200]	; (80010ac <DHT11_HI_calc+0x31c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fab6 	bl	8000558 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001068 <DHT11_HI_calc+0x2d8>
 8000ff4:	ec43 2b10 	vmov	d0, r2, r3
 8000ff8:	f001 ff8e 	bl	8002f18 <pow>
 8000ffc:	ec53 2b10 	vmov	r2, r3, d0
 8001000:	4620      	mov	r0, r4
 8001002:	4629      	mov	r1, r5
 8001004:	f7ff fb00 	bl	8000608 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4640      	mov	r0, r8
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f944 	bl	800029c <__adddf3>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fda4 	bl	8000b68 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <DHT11_HI_calc+0x320>)
 8001024:	6013      	str	r3, [r2, #0]
	heat_index = (heat_index-32)*5/9;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <DHT11_HI_calc+0x320>)
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80010a0 <DHT11_HI_calc+0x310>
 8001030:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001034:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800103c:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8001040:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <DHT11_HI_calc+0x320>)
 8001046:	edc3 7a00 	vstr	s15, [r3]

	return (int)heat_index;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <DHT11_HI_calc+0x320>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001054:	ee17 3a90 	vmov	r3, s15

}
 8001058:	4618      	mov	r0, r3
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001062:	bf00      	nop
 8001064:	f3af 8000 	nop.w
 8001068:	00000000 	.word	0x00000000
 800106c:	40000000 	.word	0x40000000
 8001070:	c2298419 	.word	0xc2298419
 8001074:	40032311 	.word	0x40032311
 8001078:	41224b16 	.word	0x41224b16
 800107c:	be662648 	.word	0xbe662648
 8001080:	bbe00fe0 	.word	0xbbe00fe0
 8001084:	bd6087f8 	.word	0xbd6087f8
 8001088:	3aa10dac 	.word	0x3aa10dac
 800108c:	3a5f8fc8 	.word	0x3a5f8fc8
 8001090:	b6058bf1 	.word	0xb6058bf1
 8001094:	200000b0 	.word	0x200000b0
 8001098:	200000ac 	.word	0x200000ac
 800109c:	200000bc 	.word	0x200000bc
 80010a0:	42000000 	.word	0x42000000
 80010a4:	200000a8 	.word	0x200000a8
 80010a8:	200000a4 	.word	0x200000a4
 80010ac:	200000c0 	.word	0x200000c0
 80010b0:	200000b8 	.word	0x200000b8

080010b4 <ESP8266_Init>:
#include "ESP8266.h"
#include <string.h>
#include <stdio.h>
#include <stdint.h>

void ESP8266_Init(char *ssid, char *password){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b09c      	sub	sp, #112	; 0x70
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]

	int ESP_response = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	char data_to_send[100];

	USART6_Text_Write("AT+RST\r\n");
 80010c2:	4839      	ldr	r0, [pc, #228]	; (80011a8 <ESP8266_Init+0xf4>)
 80010c4:	f000 fbaa 	bl	800181c <USART6_Text_Write>
	Tim3_wait_for_timeout();
 80010c8:	f000 faa8 	bl	800161c <Tim3_wait_for_timeout>
	delay_s(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f000 fa16 	bl	80014fe <delay_s>
//	while(!ESP_response){ESP_response = USART6_Wait_For("WIFI GOT IP\r\n", 1, 1);}
	Tim3_esp_not_stuck();
 80010d2:	f000 fab7 	bl	8001644 <Tim3_esp_not_stuck>

	USART6_Text_Write("AT\r\n");
 80010d6:	4835      	ldr	r0, [pc, #212]	; (80011ac <ESP8266_Init+0xf8>)
 80010d8:	f000 fba0 	bl	800181c <USART6_Text_Write>
	ESP_response = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 80010e0:	f000 fa9c 	bl	800161c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 80010e4:	e005      	b.n	80010f2 <ESP8266_Init+0x3e>
 80010e6:	2201      	movs	r2, #1
 80010e8:	2101      	movs	r1, #1
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <ESP8266_Init+0xfc>)
 80010ec:	f000 fbd6 	bl	800189c <USART6_Wait_For>
 80010f0:	66f8      	str	r0, [r7, #108]	; 0x6c
 80010f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <ESP8266_Init+0x4c>
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <ESP8266_Init+0x100>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f2      	beq.n	80010e6 <ESP8266_Init+0x32>
	Tim3_esp_not_stuck();
 8001100:	f000 faa0 	bl	8001644 <Tim3_esp_not_stuck>

	USART6_Text_Write("AT+CWMODE=1\r\n");
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <ESP8266_Init+0x104>)
 8001106:	f000 fb89 	bl	800181c <USART6_Text_Write>
	ESP_response = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 800110e:	f000 fa85 	bl	800161c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 8001112:	e005      	b.n	8001120 <ESP8266_Init+0x6c>
 8001114:	2201      	movs	r2, #1
 8001116:	2101      	movs	r1, #1
 8001118:	4825      	ldr	r0, [pc, #148]	; (80011b0 <ESP8266_Init+0xfc>)
 800111a:	f000 fbbf 	bl	800189c <USART6_Wait_For>
 800111e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8001120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <ESP8266_Init+0x7a>
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <ESP8266_Init+0x100>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f2      	beq.n	8001114 <ESP8266_Init+0x60>
	Tim3_esp_not_stuck();
 800112e:	f000 fa89 	bl	8001644 <Tim3_esp_not_stuck>

	sprintf(data_to_send, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8001132:	f107 0008 	add.w	r0, r7, #8
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4920      	ldr	r1, [pc, #128]	; (80011bc <ESP8266_Init+0x108>)
 800113c:	f001 fa50 	bl	80025e0 <siprintf>
	USART6_Text_Write(data_to_send);
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fb69 	bl	800181c <USART6_Text_Write>
	ESP_response = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 800114e:	f000 fa65 	bl	800161c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 8001152:	e005      	b.n	8001160 <ESP8266_Init+0xac>
 8001154:	2201      	movs	r2, #1
 8001156:	2101      	movs	r1, #1
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <ESP8266_Init+0xfc>)
 800115a:	f000 fb9f 	bl	800189c <USART6_Wait_For>
 800115e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8001160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001162:	2b00      	cmp	r3, #0
 8001164:	d103      	bne.n	800116e <ESP8266_Init+0xba>
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <ESP8266_Init+0x100>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f2      	beq.n	8001154 <ESP8266_Init+0xa0>
	Tim3_esp_not_stuck();
 800116e:	f000 fa69 	bl	8001644 <Tim3_esp_not_stuck>

	USART6_Text_Write("AT+CIPMUX=0\r\n");
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <ESP8266_Init+0x10c>)
 8001174:	f000 fb52 	bl	800181c <USART6_Text_Write>
	ESP_response = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 800117c:	f000 fa4e 	bl	800161c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 8001180:	e005      	b.n	800118e <ESP8266_Init+0xda>
 8001182:	2201      	movs	r2, #1
 8001184:	2101      	movs	r1, #1
 8001186:	480a      	ldr	r0, [pc, #40]	; (80011b0 <ESP8266_Init+0xfc>)
 8001188:	f000 fb88 	bl	800189c <USART6_Wait_For>
 800118c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800118e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <ESP8266_Init+0xe8>
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <ESP8266_Init+0x100>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f2      	beq.n	8001182 <ESP8266_Init+0xce>
	Tim3_esp_not_stuck();
 800119c:	f000 fa52 	bl	8001644 <Tim3_esp_not_stuck>

}
 80011a0:	bf00      	nop
 80011a2:	3770      	adds	r7, #112	; 0x70
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	08003da0 	.word	0x08003da0
 80011ac:	08003dac 	.word	0x08003dac
 80011b0:	08003db4 	.word	0x08003db4
 80011b4:	2000009c 	.word	0x2000009c
 80011b8:	08003dbc 	.word	0x08003dbc
 80011bc:	08003dcc 	.word	0x08003dcc
 80011c0:	08003de4 	.word	0x08003de4

080011c4 <ESP8266_Send_Data>:

void ESP8266_Send_Data(char *writeAPIKey, int fieldNumber, int value){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80011ca:	af02      	add	r7, sp, #8
 80011cc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80011d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80011d4:	6018      	str	r0, [r3, #0]
 80011d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80011da:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80011de:	6019      	str	r1, [r3, #0]
 80011e0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80011e4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80011e8:	601a      	str	r2, [r3, #0]

	int ESP_response = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	char data_to_send[300];
	char data_to_send_two[300];

	USART6_Text_Write("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 80011f0:	4847      	ldr	r0, [pc, #284]	; (8001310 <ESP8266_Send_Data+0x14c>)
 80011f2:	f000 fb13 	bl	800181c <USART6_Text_Write>
	ESP_response = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80011fc:	f000 fa0e 	bl	800161c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 0, 1);}
 8001200:	e006      	b.n	8001210 <ESP8266_Send_Data+0x4c>
 8001202:	2201      	movs	r2, #1
 8001204:	2100      	movs	r1, #0
 8001206:	4843      	ldr	r0, [pc, #268]	; (8001314 <ESP8266_Send_Data+0x150>)
 8001208:	f000 fb48 	bl	800189c <USART6_Wait_For>
 800120c:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 8001210:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001214:	2b00      	cmp	r3, #0
 8001216:	d103      	bne.n	8001220 <ESP8266_Send_Data+0x5c>
 8001218:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <ESP8266_Send_Data+0x154>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <ESP8266_Send_Data+0x3e>
	Tim3_esp_not_stuck();
 8001220:	f000 fa10 	bl	8001644 <Tim3_esp_not_stuck>

	sprintf(data_to_send, "GET /update?api_key=%s&field%d=%u\r\n", writeAPIKey, fieldNumber, value);
 8001224:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001228:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800122c:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8001230:	f5a2 7219 	sub.w	r2, r2, #612	; 0x264
 8001234:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8001238:	f507 711c 	add.w	r1, r7, #624	; 0x270
 800123c:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
 8001240:	6809      	ldr	r1, [r1, #0]
 8001242:	9100      	str	r1, [sp, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	4934      	ldr	r1, [pc, #208]	; (800131c <ESP8266_Send_Data+0x158>)
 800124a:	f001 f9c9 	bl	80025e0 <siprintf>

	sprintf(data_to_send_two, "AT+CIPSEND=%d\r\n", strlen(data_to_send));
 800124e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001252:	4618      	mov	r0, r3
 8001254:	f7fe ffc4 	bl	80001e0 <strlen>
 8001258:	4602      	mov	r2, r0
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4930      	ldr	r1, [pc, #192]	; (8001320 <ESP8266_Send_Data+0x15c>)
 8001260:	4618      	mov	r0, r3
 8001262:	f001 f9bd 	bl	80025e0 <siprintf>
	USART6_Text_Write(data_to_send_two);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fad6 	bl	800181c <USART6_Text_Write>
	ESP_response = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 8001276:	f000 f9d1 	bl	800161c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For(">", 0, 1);}
 800127a:	e006      	b.n	800128a <ESP8266_Send_Data+0xc6>
 800127c:	2201      	movs	r2, #1
 800127e:	2100      	movs	r1, #0
 8001280:	4828      	ldr	r0, [pc, #160]	; (8001324 <ESP8266_Send_Data+0x160>)
 8001282:	f000 fb0b 	bl	800189c <USART6_Wait_For>
 8001286:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 800128a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <ESP8266_Send_Data+0xd6>
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <ESP8266_Send_Data+0x154>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <ESP8266_Send_Data+0xb8>
	Tim3_esp_not_stuck();
 800129a:	f000 f9d3 	bl	8001644 <Tim3_esp_not_stuck>

	USART6_Text_Write(data_to_send);
 800129e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 faba 	bl	800181c <USART6_Text_Write>
	ESP_response = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80012ae:	f000 f9b5 	bl	800161c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("SEND OK\r\n", 0, 0);}
 80012b2:	e006      	b.n	80012c2 <ESP8266_Send_Data+0xfe>
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <ESP8266_Send_Data+0x164>)
 80012ba:	f000 faef 	bl	800189c <USART6_Wait_For>
 80012be:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 80012c2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <ESP8266_Send_Data+0x10e>
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <ESP8266_Send_Data+0x154>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <ESP8266_Send_Data+0xf0>
	Tim3_esp_not_stuck();
 80012d2:	f000 f9b7 	bl	8001644 <Tim3_esp_not_stuck>

	ESP_response = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80012dc:	f000 f99e 	bl	800161c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("CLOSED", 0, 1);}
 80012e0:	e006      	b.n	80012f0 <ESP8266_Send_Data+0x12c>
 80012e2:	2201      	movs	r2, #1
 80012e4:	2100      	movs	r1, #0
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <ESP8266_Send_Data+0x168>)
 80012e8:	f000 fad8 	bl	800189c <USART6_Wait_For>
 80012ec:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 80012f0:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d103      	bne.n	8001300 <ESP8266_Send_Data+0x13c>
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <ESP8266_Send_Data+0x154>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <ESP8266_Send_Data+0x11e>
	Tim3_esp_not_stuck();
 8001300:	f000 f9a0 	bl	8001644 <Tim3_esp_not_stuck>

}
 8001304:	bf00      	nop
 8001306:	f507 771c 	add.w	r7, r7, #624	; 0x270
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	08003df4 	.word	0x08003df4
 8001314:	08003db4 	.word	0x08003db4
 8001318:	2000009c 	.word	0x2000009c
 800131c:	08003e20 	.word	0x08003e20
 8001320:	08003e44 	.word	0x08003e44
 8001324:	08003e54 	.word	0x08003e54
 8001328:	08003e58 	.word	0x08003e58
 800132c:	08003e64 	.word	0x08003e64

08001330 <sys_config>:
 *      Author: ADMIN
 */

#include "SysConfig.h"

void sys_config(void) {
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1 << 1);
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <sys_config+0x70>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <sys_config+0x70>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER |= (1 << 12); // output mode
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <sys_config+0x74>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <sys_config+0x74>)
 8001346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800134a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1 << 13);
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <sys_config+0x74>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <sys_config+0x74>)
 8001352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001356:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER &= ~(1 << 6); // push-pull
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <sys_config+0x74>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <sys_config+0x74>)
 800135e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001362:	6053      	str	r3, [r2, #4]

	GPIOB->OSPEEDR &= ~(1 << 12); // low-speed
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <sys_config+0x74>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <sys_config+0x74>)
 800136a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800136e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR &= ~(1 << 13);
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <sys_config+0x74>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <sys_config+0x74>)
 8001376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800137a:	6093      	str	r3, [r2, #8]

	GPIOB->PUPDR &= ~(1 << 12); // no pull-up, pull-down
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <sys_config+0x74>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <sys_config+0x74>)
 8001382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001386:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1 << 13);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <sys_config+0x74>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <sys_config+0x74>)
 800138e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001392:	60d3      	str	r3, [r2, #12]

}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020400 	.word	0x40020400

080013a8 <GPIOB_IDR_Pin>:

int GPIOB_IDR_Pin(int pin_number){
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	int temp = GPIOB->IDR;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <GPIOB_IDR_Pin+0x34>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	60fb      	str	r3, [r7, #12]

	return (temp/(1<<pin_number))%2;
 80013b6:	2201      	movs	r2, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	bfb8      	it	lt
 80013cc:	425b      	neglt	r3, r3

}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40020400 	.word	0x40020400

080013e0 <Tim2_Init>:
 *      Author: ADMIN
 */

#include "TIM2.h"

void Tim2_Init(void){
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1<<0); // Enable clock for TIM2
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <Tim2_Init+0x6c>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a18      	ldr	r2, [pc, #96]	; (800144c <Tim2_Init+0x6c>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 16-1; // Set PSC+1 = 16000
 80013f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013f4:	220f      	movs	r2, #15
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2->ARR = 1; // Set timer to reset after CNT = 1 or 1 us
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fc:	2201      	movs	r2, #1
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= (1<<0); // Enable timer interrupt generation
 8001400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	60d3      	str	r3, [r2, #12]

	NVIC->IP[28] = (3 << 4) & 0xff; // Set priority to 3
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <Tim2_Init+0x70>)
 8001412:	2230      	movs	r2, #48	; 0x30
 8001414:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
	NVIC->ISER[0] = (1 << 28); // Enable interrupt
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <Tim2_Init+0x70>)
 800141a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800141e:	601a      	str	r2, [r3, #0]
	TIM2->SR &= ~(1<<0);
 8001420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6113      	str	r3, [r2, #16]

	TIM2->CR1 &= ~(1<<0); // Disable timer, for now
 8001430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]

}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	e000e100 	.word	0xe000e100

08001454 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

	done = 1;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <TIM2_IRQHandler+0x34>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

	TIM2->CR1 &= ~(1<<0);
 800145e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(1<<0); // Clear UIF update interrupt flag
 800146e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6113      	str	r3, [r2, #16]

}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000090 	.word	0x20000090

0800148c <delay_us>:

void delay_us(int us_delay){
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

	TIM2->ARR = us_delay;
 8001494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	62d3      	str	r3, [r2, #44]	; 0x2c
	done = 0;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <delay_us+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= (1<<0);
 80014a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]

	while(!done){}
 80014b2:	bf00      	nop
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <delay_us+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0fb      	beq.n	80014b4 <delay_us+0x28>

}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000090 	.word	0x20000090

080014d0 <delay_ms>:

void delay_ms(int ms_delay){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

	for(int i=0; i<=ms_delay; i++){
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e006      	b.n	80014ec <delay_ms+0x1c>
		delay_us(1000);
 80014de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e2:	f7ff ffd3 	bl	800148c <delay_us>
	for(int i=0; i<=ms_delay; i++){
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	ddf4      	ble.n	80014de <delay_ms+0xe>
	}

}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <delay_s>:

void delay_s(int s_delay){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]

	for(int i=0; i<=s_delay; i++){
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e006      	b.n	800151a <delay_s+0x1c>
		delay_ms(1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001510:	f7ff ffde 	bl	80014d0 <delay_ms>
	for(int i=0; i<=s_delay; i++){
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	ddf4      	ble.n	800150c <delay_s+0xe>
	}

}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001530:	f3bf 8f4f 	dsb	sy
}
 8001534:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <__NVIC_SystemReset+0x24>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800153e:	4904      	ldr	r1, [pc, #16]	; (8001550 <__NVIC_SystemReset+0x24>)
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_SystemReset+0x28>)
 8001542:	4313      	orrs	r3, r2
 8001544:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001546:	f3bf 8f4f 	dsb	sy
}
 800154a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <__NVIC_SystemReset+0x20>
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	05fa0004 	.word	0x05fa0004

08001558 <Tim3_Init>:

#include "TIM3.h"

void Tim3_Init(void){
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1<<1); // Enable clock for TIM3
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <Tim3_Init+0x60>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <Tim3_Init+0x60>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 62500-1; // Set PSC+1 = 16000
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <Tim3_Init+0x64>)
 800156a:	f24f 4223 	movw	r2, #62499	; 0xf423
 800156e:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->ARR = 16384; // Set timer to reset after CNT = 100
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <Tim3_Init+0x64>)
 8001572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= (1<<0); // Enable timer interrupt generation
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <Tim3_Init+0x64>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <Tim3_Init+0x64>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	60d3      	str	r3, [r2, #12]

	NVIC->IP[29] = (1 << 4) & 0xff; // Set priority to 1
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <Tim3_Init+0x68>)
 8001586:	2210      	movs	r2, #16
 8001588:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
	NVIC->ISER[0] = (1 << 29); // Enable interrupt
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <Tim3_Init+0x68>)
 800158e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001592:	601a      	str	r2, [r3, #0]

	TIM3->SR &= ~(1<<0);
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <Tim3_Init+0x64>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	4a08      	ldr	r2, [pc, #32]	; (80015bc <Tim3_Init+0x64>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6113      	str	r3, [r2, #16]
	TIM3->CR1 &= ~(1<<0); // Disable timer, for now
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <Tim3_Init+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <Tim3_Init+0x64>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]

}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40000400 	.word	0x40000400
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

	while(1){

		if(Tim3_initializing){
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <TIM3_IRQHandler+0x48>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <TIM3_IRQHandler+0x20>
			Tim3_initializing = 0;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <TIM3_IRQHandler+0x48>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
			TIM3->SR &= ~(1<<0);
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <TIM3_IRQHandler+0x4c>)
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <TIM3_IRQHandler+0x4c>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6113      	str	r3, [r2, #16]
			break;
 80015e2:	e011      	b.n	8001608 <TIM3_IRQHandler+0x44>
		} else {

			sys_stuck += 1;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <TIM3_IRQHandler+0x50>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <TIM3_IRQHandler+0x50>)
 80015ec:	6013      	str	r3, [r2, #0]
			break_wait_for = 1;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <TIM3_IRQHandler+0x54>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
			TIM3->SR = 0;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <TIM3_IRQHandler+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]

			if (sys_stuck == 10){NVIC_SystemReset();}
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <TIM3_IRQHandler+0x50>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b0a      	cmp	r3, #10
 8001600:	d101      	bne.n	8001606 <TIM3_IRQHandler+0x42>
 8001602:	f7ff ff93 	bl	800152c <__NVIC_SystemReset>

			break;
 8001606:	bf00      	nop

		}

	}

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000004 	.word	0x20000004
 8001610:	40000400 	.word	0x40000400
 8001614:	20000098 	.word	0x20000098
 8001618:	2000009c 	.word	0x2000009c

0800161c <Tim3_wait_for_timeout>:

void Tim3_wait_for_timeout(){
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

	TIM3->ARR = 16384;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <Tim3_wait_for_timeout+0x24>)
 8001622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CR1 |= (1<<0);
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <Tim3_wait_for_timeout+0x24>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <Tim3_wait_for_timeout+0x24>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6013      	str	r3, [r2, #0]

}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40000400 	.word	0x40000400

08001644 <Tim3_esp_not_stuck>:

void Tim3_esp_not_stuck(){
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

	TIM3->CR1 &= ~(1<<0);
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <Tim3_esp_not_stuck+0x2c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <Tim3_esp_not_stuck+0x2c>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]
	TIM3->SR &= ~(1<<0);
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <Tim3_esp_not_stuck+0x2c>)
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <Tim3_esp_not_stuck+0x2c>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	6113      	str	r3, [r2, #16]
	TIM3->CNT = 0;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <Tim3_esp_not_stuck+0x2c>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40000400 	.word	0x40000400

08001674 <Usart6_Init>:
#include "Usart6.h"
#include <string.h>
#include <stdio.h>
#include <stdint.h>

void Usart6_Init(){
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1<<0);
 8001678:	4b40      	ldr	r3, [pc, #256]	; (800177c <Usart6_Init+0x108>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a3f      	ldr	r2, [pc, #252]	; (800177c <Usart6_Init+0x108>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(1<<22);
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <Usart6_Init+0x10c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a3d      	ldr	r2, [pc, #244]	; (8001780 <Usart6_Init+0x10c>)
 800168a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800168e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<23);
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <Usart6_Init+0x10c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a3a      	ldr	r2, [pc, #232]	; (8001780 <Usart6_Init+0x10c>)
 8001696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800169a:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(1<<24);
 800169c:	4b38      	ldr	r3, [pc, #224]	; (8001780 <Usart6_Init+0x10c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a37      	ldr	r2, [pc, #220]	; (8001780 <Usart6_Init+0x10c>)
 80016a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<25);
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <Usart6_Init+0x10c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a34      	ldr	r2, [pc, #208]	; (8001780 <Usart6_Init+0x10c>)
 80016ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b2:	6013      	str	r3, [r2, #0]
//	GPIOA->OSPEEDR |= (0b11 << 22);	// PA11(TX) high-speed mode

//	GPIOA->PUPDR &= ~(0b11 << 24); // PA12(RX) pulldown
//	GPIOA->PUPDR |=  (0b10 << 24);

	GPIOA->AFR[1] = (136<<12); // set both PA11 and PA12 to AFRH
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <Usart6_Init+0x10c>)
 80016b6:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

	RCC->APB2ENR |= (1<<5);	// Enable USART6 peripheral
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <Usart6_Init+0x108>)
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	4a2e      	ldr	r2, [pc, #184]	; (800177c <Usart6_Init+0x108>)
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= (1 << 5);	// Reset the whole peripheral
 80016c8:	4b2c      	ldr	r3, [pc, #176]	; (800177c <Usart6_Init+0x108>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <Usart6_Init+0x108>)
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~(1 << 5);
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <Usart6_Init+0x108>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	4a28      	ldr	r2, [pc, #160]	; (800177c <Usart6_Init+0x108>)
 80016da:	f023 0320 	bic.w	r3, r3, #32
 80016de:	6253      	str	r3, [r2, #36]	; 0x24

	USART6->CR1 &= ~(0b11 << 2); // disable USART6 RX and TX for now
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <Usart6_Init+0x110>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <Usart6_Init+0x110>)
 80016e6:	f023 030c 	bic.w	r3, r3, #12
 80016ea:	60d3      	str	r3, [r2, #12]
	USART6->CR1 |=  (1 << 13); // enable USART6
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <Usart6_Init+0x110>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a24      	ldr	r2, [pc, #144]	; (8001784 <Usart6_Init+0x110>)
 80016f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f6:	60d3      	str	r3, [r2, #12]

	USART6->BRR &= ~(0x0000FFFF);
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <Usart6_Init+0x110>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a21      	ldr	r2, [pc, #132]	; (8001784 <Usart6_Init+0x110>)
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	6093      	str	r3, [r2, #8]
	USART6->BRR |= (0x0000008B);
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <Usart6_Init+0x110>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <Usart6_Init+0x110>)
 800170a:	f043 038b 	orr.w	r3, r3, #139	; 0x8b
 800170e:	6093      	str	r3, [r2, #8]

	USART6->CR1 &= ~(1 << 15);	// OVER8 = 0
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <Usart6_Init+0x110>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <Usart6_Init+0x110>)
 8001716:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800171a:	60d3      	str	r3, [r2, #12]
	USART6->CR2 &= ~(0b11 << 12);	// One (1) stop bit
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <Usart6_Init+0x110>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	4a18      	ldr	r2, [pc, #96]	; (8001784 <Usart6_Init+0x110>)
 8001722:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001726:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 10);	// No parity
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <Usart6_Init+0x110>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a15      	ldr	r2, [pc, #84]	; (8001784 <Usart6_Init+0x110>)
 800172e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001732:	60d3      	str	r3, [r2, #12]

	USART6->CR2 &= ~(1 << 11);
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <Usart6_Init+0x110>)
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <Usart6_Init+0x110>)
 800173a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800173e:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 12);
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <Usart6_Init+0x110>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <Usart6_Init+0x110>)
 8001746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800174a:	60d3      	str	r3, [r2, #12]
	USART6->CR3 &= ~(0b11 << 8);
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <Usart6_Init+0x110>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <Usart6_Init+0x110>)
 8001752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001756:	6153      	str	r3, [r2, #20]

	NVIC->IP[71] = (2 << 4) & 0xff; // Set priority to 2
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <Usart6_Init+0x114>)
 800175a:	2220      	movs	r2, #32
 800175c:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
	NVIC->ISER[2] = (1 << 7); // position 71, ISER 2, bit 7
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <Usart6_Init+0x114>)
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	609a      	str	r2, [r3, #8]

	USART6->CR1 |= (0b1011<<2);
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <Usart6_Init+0x110>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	4a06      	ldr	r2, [pc, #24]	; (8001784 <Usart6_Init+0x110>)
 800176c:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8001770:	60d3      	str	r3, [r2, #12]

}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000
 8001784:	40011400 	.word	0x40011400
 8001788:	e000e100 	.word	0xe000e100

0800178c <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

	if(USART6->SR & 1<<5){
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <USART6_IRQHandler+0x44>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <USART6_IRQHandler+0x38>

		dataBuffer[dataIndex] = USART6->DR;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <USART6_IRQHandler+0x44>)
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <USART6_IRQHandler+0x48>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b2d1      	uxtb	r1, r2
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <USART6_IRQHandler+0x4c>)
 80017a8:	54d1      	strb	r1, [r2, r3]
		dataIndex += 1;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <USART6_IRQHandler+0x48>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <USART6_IRQHandler+0x48>)
 80017b2:	6013      	str	r3, [r2, #0]

		if(dataIndex == 300){
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <USART6_IRQHandler+0x48>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017bc:	d102      	bne.n	80017c4 <USART6_IRQHandler+0x38>
			dataIndex = 0;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <USART6_IRQHandler+0x48>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
		}

	}

}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40011400 	.word	0x40011400
 80017d4:	200000c4 	.word	0x200000c4
 80017d8:	200000c8 	.word	0x200000c8

080017dc <USART6_Write>:
	while(!(USART6->SR & (1<<5))){}
	return USART6->DR;

}

void USART6_Write(char ch){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]

	while(!(USART6->SR & (1<<7)));
 80017e6:	bf00      	nop
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <USART6_Write+0x3c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f9      	beq.n	80017e8 <USART6_Write+0xc>
	USART6->DR = ch;
 80017f4:	4a08      	ldr	r2, [pc, #32]	; (8001818 <USART6_Write+0x3c>)
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	6053      	str	r3, [r2, #4]
	while(!(USART6->SR & (1<<6)));
 80017fa:	bf00      	nop
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <USART6_Write+0x3c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f9      	beq.n	80017fc <USART6_Write+0x20>

}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40011400 	.word	0x40011400

0800181c <USART6_Text_Write>:

void USART6_Text_Write(char *text){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

	int text_index = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
	int text_length = strlen(text);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7fe fcd9 	bl	80001e0 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	60bb      	str	r3, [r7, #8]

	while(text_index < text_length){
 8001832:	e009      	b.n	8001848 <USART6_Text_Write+0x2c>
		USART6_Write(text[text_index]);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ffcd 	bl	80017dc <USART6_Write>
		text_index++;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
	while(text_index < text_length){
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbf1      	blt.n	8001834 <USART6_Text_Write+0x18>
	}

}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <USART6_Clear_Buffer>:

void USART6_Clear_Buffer(){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0

	for(int i=0; i<300; i++){dataBuffer[i] = 0;}
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e007      	b.n	8001878 <USART6_Clear_Buffer+0x1c>
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <USART6_Clear_Buffer+0x38>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800187e:	dbf3      	blt.n	8001868 <USART6_Clear_Buffer+0xc>
	dataIndex = 0;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <USART6_Clear_Buffer+0x3c>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
	delay_ms(200);
 8001886:	20c8      	movs	r0, #200	; 0xc8
 8001888:	f7ff fe22 	bl	80014d0 <delay_ms>

}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200000c8 	.word	0x200000c8
 8001898:	200000c4 	.word	0x200000c4

0800189c <USART6_Wait_For>:

int USART6_Wait_For(char *response, int delay_further, int clear_buffer){
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]

	int dataBufferIndex = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
	int responseIndex = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
	int responseMatched = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

	while(response[responseIndex] != dataBuffer[dataBufferIndex]){dataBufferIndex++;}
 80018b4:	e002      	b.n	80018bc <USART6_Wait_For+0x20>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	492a      	ldr	r1, [pc, #168]	; (8001970 <USART6_Wait_For+0xd4>)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	440b      	add	r3, r1
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1f2      	bne.n	80018b6 <USART6_Wait_For+0x1a>

	while(dataBuffer[dataBufferIndex] != '\0'){
 80018d0:	e039      	b.n	8001946 <USART6_Wait_For+0xaa>

		while(response[responseIndex] == dataBuffer[dataBufferIndex]){

			char_checker = dataBuffer[dataBufferIndex];
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <USART6_Wait_For+0xd4>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4413      	add	r3, r2
 80018d8:	781a      	ldrb	r2, [r3, #0]
 80018da:	4b26      	ldr	r3, [pc, #152]	; (8001974 <USART6_Wait_For+0xd8>)
 80018dc:	701a      	strb	r2, [r3, #0]
			char_checker_2 = response[responseIndex];
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <USART6_Wait_For+0xdc>)
 80018e8:	701a      	strb	r2, [r3, #0]
			delay_ms(200);
 80018ea:	20c8      	movs	r0, #200	; 0xc8
 80018ec:	f7ff fdf0 	bl	80014d0 <delay_ms>

			if(delay_further){delay_s(1);}
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <USART6_Wait_For+0x60>
 80018f6:	2001      	movs	r0, #1
 80018f8:	f7ff fe01 	bl	80014fe <delay_s>

			responseIndex++;
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	3301      	adds	r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
			dataBufferIndex++;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3301      	adds	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]

			if(dataBuffer[dataBufferIndex] == '\0' || response[responseIndex] == '\0'){
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <USART6_Wait_For+0xd4>)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <USART6_Wait_For+0x84>
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <USART6_Wait_For+0x8a>

				responseMatched = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
				break;
 8001924:	e009      	b.n	800193a <USART6_Wait_For+0x9e>
		while(response[responseIndex] == dataBuffer[dataBufferIndex]){
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	4910      	ldr	r1, [pc, #64]	; (8001970 <USART6_Wait_For+0xd4>)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	440b      	add	r3, r1
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d0cb      	beq.n	80018d2 <USART6_Wait_For+0x36>
			}

		}

		if(responseMatched){
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <USART6_Wait_For+0xb8>
			break;
		} else{
			dataBufferIndex++;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	3301      	adds	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
	while(dataBuffer[dataBufferIndex] != '\0'){
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <USART6_Wait_For+0xd4>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e9      	bne.n	8001926 <USART6_Wait_For+0x8a>
 8001952:	e000      	b.n	8001956 <USART6_Wait_For+0xba>
			break;
 8001954:	bf00      	nop
		}

	}

	if(responseMatched && clear_buffer){USART6_Clear_Buffer();}
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <USART6_Wait_For+0xca>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <USART6_Wait_For+0xca>
 8001962:	f7ff ff7b 	bl	800185c <USART6_Clear_Buffer>

	return responseMatched;
 8001966:	697b      	ldr	r3, [r7, #20]

}
 8001968:	4618      	mov	r0, r3
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200000c8 	.word	0x200000c8
 8001974:	20000094 	.word	0x20000094
 8001978:	20000095 	.word	0x20000095

0800197c <main>:
int receptionDone = 0;
char dataBuffer[300];

int Tim3_initializing = 1;

int main(void){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

	checker_1 = 1997;
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <main+0x100>)
 8001984:	f240 72cd 	movw	r2, #1997	; 0x7cd
 8001988:	601a      	str	r2, [r3, #0]
	sys_config();
 800198a:	f7ff fcd1 	bl	8001330 <sys_config>
	Tim2_Init();
 800198e:	f7ff fd27 	bl	80013e0 <Tim2_Init>
	Tim3_Init();
 8001992:	f7ff fde1 	bl	8001558 <Tim3_Init>

	delay_s(5);
 8001996:	2005      	movs	r0, #5
 8001998:	f7ff fdb1 	bl	80014fe <delay_s>
	checker_1 = 2997;
 800199c:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <main+0x100>)
 800199e:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80019a2:	601a      	str	r2, [r3, #0]

	Usart6_Init();
 80019a4:	f7ff fe66 	bl	8001674 <Usart6_Init>
	sevseg_init();
 80019a8:	f000 f8b6 	bl	8001b18 <sevseg_init>

//	ESP8266_Init("_WiFi@UPD", "");
//	ESP8266_Init("PLDTHOMEFIBRXFGxc", "PLDTWIFIae7dL");
//	ESP8266_Init("iPhone (8)", "bl3ugh@93");
	ESP8266_Init("owo", "mamamopassword");
 80019ac:	4934      	ldr	r1, [pc, #208]	; (8001a80 <main+0x104>)
 80019ae:	4835      	ldr	r0, [pc, #212]	; (8001a84 <main+0x108>)
 80019b0:	f7ff fb80 	bl	80010b4 <ESP8266_Init>
//	ESP8266_Init("EEE192-429", "EEE192_Room429");
//	ESP8266_Init("iPhone (8)", "randompassword");

	while (1){

		break_wait_for = 0;
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <main+0x10c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
//		break_wait_for = 1;

		TIM4->DIER &= ~(1<<0);
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <main+0x110>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <main+0x110>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	60d3      	str	r3, [r2, #12]

		Tim3_wait_for_timeout();
 80019c6:	f7ff fe29 	bl	800161c <Tim3_wait_for_timeout>

		DHT11_Start();
 80019ca:	f7ff f91d 	bl	8000c08 <DHT11_Start>
		DHT11_Response();
 80019ce:	f7ff f94d 	bl	8000c6c <DHT11_Response>
		DHT11_Read();
 80019d2:	f7ff f9a1 	bl	8000d18 <DHT11_Read>

		Tim3_esp_not_stuck();
 80019d6:	f7ff fe35 	bl	8001644 <Tim3_esp_not_stuck>

		TIM4->DIER |= (1<<0);
 80019da:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <main+0x110>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <main+0x110>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	60d3      	str	r3, [r2, #12]

		int heat_index_int = DHT11_HI_calc();
 80019e6:	f7ff f9d3 	bl	8000d90 <DHT11_HI_calc>
 80019ea:	6078      	str	r0, [r7, #4]
		sevseg_data = heat_index_int;
 80019ec:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <main+0x114>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]

		if(heat_index_int >= 42){
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b29      	cmp	r3, #41	; 0x29
 80019f6:	dd03      	ble.n	8001a00 <main+0x84>
			alert(0);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 fcd9 	bl	80023b0 <alert>
 80019fe:	e00c      	b.n	8001a1a <main+0x9e>
		} else if (heat_index_int < 42 && heat_index_int >= 33){
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b29      	cmp	r3, #41	; 0x29
 8001a04:	dc06      	bgt.n	8001a14 <main+0x98>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	dd03      	ble.n	8001a14 <main+0x98>
			alert(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f000 fccf 	bl	80023b0 <alert>
		} else if (heat_index_int < 42 && heat_index_int >= 33){
 8001a12:	e002      	b.n	8001a1a <main+0x9e>
		} else {
			alert(2);
 8001a14:	2002      	movs	r0, #2
 8001a16:	f000 fccb 	bl	80023b0 <alert>
		}

		ESP8266_Send_Data("BLH8QO6SFC28OYXO", 1, Temp_whole);
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <main+0x118>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a24:	ee17 2a90 	vmov	r2, s15
 8001a28:	2101      	movs	r1, #1
 8001a2a:	481b      	ldr	r0, [pc, #108]	; (8001a98 <main+0x11c>)
 8001a2c:	f7ff fbca 	bl	80011c4 <ESP8266_Send_Data>
		if (!break_wait_for) {delay_s(20);}
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <main+0x10c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <main+0xc2>
 8001a38:	2014      	movs	r0, #20
 8001a3a:	f7ff fd60 	bl	80014fe <delay_s>
		ESP8266_Send_Data("BLH8QO6SFC28OYXO", 2, RH_whole);
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <main+0x120>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a48:	ee17 2a90 	vmov	r2, s15
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	4812      	ldr	r0, [pc, #72]	; (8001a98 <main+0x11c>)
 8001a50:	f7ff fbb8 	bl	80011c4 <ESP8266_Send_Data>
		if (!break_wait_for) {delay_s(20);}
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <main+0x10c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <main+0xe6>
 8001a5c:	2014      	movs	r0, #20
 8001a5e:	f7ff fd4e 	bl	80014fe <delay_s>
		ESP8266_Send_Data("BLH8QO6SFC28OYXO", 3, heat_index_int);
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	2103      	movs	r1, #3
 8001a66:	480c      	ldr	r0, [pc, #48]	; (8001a98 <main+0x11c>)
 8001a68:	f7ff fbac 	bl	80011c4 <ESP8266_Send_Data>
		if (!break_wait_for) {delay_s(60);}
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <main+0x10c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d19f      	bne.n	80019b4 <main+0x38>
 8001a74:	203c      	movs	r0, #60	; 0x3c
 8001a76:	f7ff fd42 	bl	80014fe <delay_s>
	while (1){
 8001a7a:	e79b      	b.n	80019b4 <main+0x38>
 8001a7c:	2000008c 	.word	0x2000008c
 8001a80:	08003e6c 	.word	0x08003e6c
 8001a84:	08003e7c 	.word	0x08003e7c
 8001a88:	2000009c 	.word	0x2000009c
 8001a8c:	40000800 	.word	0x40000800
 8001a90:	20000000 	.word	0x20000000
 8001a94:	200000ac 	.word	0x200000ac
 8001a98:	08003e80 	.word	0x08003e80
 8001a9c:	200000a4 	.word	0x200000a4

08001aa0 <TIM4_Init>:

	}

}

void TIM4_Init(void){
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<2); // Enable clock for TIM4
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <TIM4_Init+0x6c>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <TIM4_Init+0x6c>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->PSC = 1600-1; // Set PSC+1 = 160000
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <TIM4_Init+0x70>)
 8001ab2:	f240 623f 	movw	r2, #1599	; 0x63f
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 4; // Set timer to reset after CNT = 100
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <TIM4_Init+0x70>)
 8001aba:	2204      	movs	r2, #4
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->DIER |= (1<<0); // Enable timer interrupt generation
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <TIM4_Init+0x70>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <TIM4_Init+0x70>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	60d3      	str	r3, [r2, #12]
	NVIC->IP[TIM4_IRQn] = (6 << 4); // Set priority to 2
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <TIM4_Init+0x74>)
 8001acc:	2260      	movs	r2, #96	; 0x60
 8001ace:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
	NVIC->ISER[TIM4_IRQn >> 5] |= (1 << (TIM4_IRQn % 32)); // Enable interrupt
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <TIM4_Init+0x74>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <TIM4_Init+0x74>)
 8001ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001adc:	6013      	str	r3, [r2, #0]
	TIM4->SR &= ~(1<<0);
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <TIM4_Init+0x70>)
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <TIM4_Init+0x70>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6113      	str	r3, [r2, #16]
	TIM4->EGR |= (1<<0);
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <TIM4_Init+0x70>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <TIM4_Init+0x70>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= (1<<0); // enable timer
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <TIM4_Init+0x70>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <TIM4_Init+0x70>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40000800 	.word	0x40000800
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <sevseg_init>:

void sevseg_init(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	TIM4_Init();
 8001b1c:	f7ff ffc0 	bl	8001aa0 <TIM4_Init>
	RCC->AHB1ENR |= (1<<0);
 8001b20:	4b98      	ldr	r3, [pc, #608]	; (8001d84 <sevseg_init+0x26c>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a97      	ldr	r2, [pc, #604]	; (8001d84 <sevseg_init+0x26c>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<1);
 8001b2c:	4b95      	ldr	r3, [pc, #596]	; (8001d84 <sevseg_init+0x26c>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4a94      	ldr	r2, [pc, #592]	; (8001d84 <sevseg_init+0x26c>)
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<2);
 8001b38:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <sevseg_init+0x26c>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4a91      	ldr	r2, [pc, #580]	; (8001d84 <sevseg_init+0x26c>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6313      	str	r3, [r2, #48]	; 0x30
	//PA0 1st digit
	GPIOA->MODER &= ~(1<<1);
 8001b44:	4b90      	ldr	r3, [pc, #576]	; (8001d88 <sevseg_init+0x270>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a8f      	ldr	r2, [pc, #572]	; (8001d88 <sevseg_init+0x270>)
 8001b4a:	f023 0302 	bic.w	r3, r3, #2
 8001b4e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<0);
 8001b50:	4b8d      	ldr	r3, [pc, #564]	; (8001d88 <sevseg_init+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a8c      	ldr	r2, [pc, #560]	; (8001d88 <sevseg_init+0x270>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<0);
 8001b5c:	4b8a      	ldr	r3, [pc, #552]	; (8001d88 <sevseg_init+0x270>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a89      	ldr	r2, [pc, #548]	; (8001d88 <sevseg_init+0x270>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1<<0);
 8001b68:	4b87      	ldr	r3, [pc, #540]	; (8001d88 <sevseg_init+0x270>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a86      	ldr	r2, [pc, #536]	; (8001d88 <sevseg_init+0x270>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6153      	str	r3, [r2, #20]
	// PB5 2nd digit
	GPIOB->MODER &= ~(1<<11);
 8001b74:	4b85      	ldr	r3, [pc, #532]	; (8001d8c <sevseg_init+0x274>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a84      	ldr	r2, [pc, #528]	; (8001d8c <sevseg_init+0x274>)
 8001b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b7e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<10);
 8001b80:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <sevseg_init+0x274>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a81      	ldr	r2, [pc, #516]	; (8001d8c <sevseg_init+0x274>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<5);
 8001b8c:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <sevseg_init+0x274>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a7e      	ldr	r2, [pc, #504]	; (8001d8c <sevseg_init+0x274>)
 8001b92:	f023 0320 	bic.w	r3, r3, #32
 8001b96:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= (1<<5);
 8001b98:	4b7c      	ldr	r3, [pc, #496]	; (8001d8c <sevseg_init+0x274>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	4a7b      	ldr	r2, [pc, #492]	; (8001d8c <sevseg_init+0x274>)
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	6153      	str	r3, [r2, #20]
	//PB4 3rd digit
	GPIOB->MODER &= ~(1<<9);
 8001ba4:	4b79      	ldr	r3, [pc, #484]	; (8001d8c <sevseg_init+0x274>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a78      	ldr	r2, [pc, #480]	; (8001d8c <sevseg_init+0x274>)
 8001baa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<8);
 8001bb0:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <sevseg_init+0x274>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a75      	ldr	r2, [pc, #468]	; (8001d8c <sevseg_init+0x274>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<4);
 8001bbc:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <sevseg_init+0x274>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a72      	ldr	r2, [pc, #456]	; (8001d8c <sevseg_init+0x274>)
 8001bc2:	f023 0310 	bic.w	r3, r3, #16
 8001bc6:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= (1<<4);
 8001bc8:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <sevseg_init+0x274>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	4a6f      	ldr	r2, [pc, #444]	; (8001d8c <sevseg_init+0x274>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6153      	str	r3, [r2, #20]
	// PA1 4th digit
	GPIOA->MODER &= ~(1<<3);
 8001bd4:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <sevseg_init+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6b      	ldr	r2, [pc, #428]	; (8001d88 <sevseg_init+0x270>)
 8001bda:	f023 0308 	bic.w	r3, r3, #8
 8001bde:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<2);
 8001be0:	4b69      	ldr	r3, [pc, #420]	; (8001d88 <sevseg_init+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a68      	ldr	r2, [pc, #416]	; (8001d88 <sevseg_init+0x270>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<1);
 8001bec:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <sevseg_init+0x270>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <sevseg_init+0x270>)
 8001bf2:	f023 0302 	bic.w	r3, r3, #2
 8001bf6:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1<<1);
 8001bf8:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <sevseg_init+0x270>)
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	4a62      	ldr	r2, [pc, #392]	; (8001d88 <sevseg_init+0x270>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	6153      	str	r3, [r2, #20]
	// PB3 a
	GPIOB->MODER &= ~(1<<7);
 8001c04:	4b61      	ldr	r3, [pc, #388]	; (8001d8c <sevseg_init+0x274>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a60      	ldr	r2, [pc, #384]	; (8001d8c <sevseg_init+0x274>)
 8001c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c0e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<6);
 8001c10:	4b5e      	ldr	r3, [pc, #376]	; (8001d8c <sevseg_init+0x274>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5d      	ldr	r2, [pc, #372]	; (8001d8c <sevseg_init+0x274>)
 8001c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c1a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<3);
 8001c1c:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <sevseg_init+0x274>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a5a      	ldr	r2, [pc, #360]	; (8001d8c <sevseg_init+0x274>)
 8001c22:	f023 0308 	bic.w	r3, r3, #8
 8001c26:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<3);
 8001c28:	4b58      	ldr	r3, [pc, #352]	; (8001d8c <sevseg_init+0x274>)
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	4a57      	ldr	r2, [pc, #348]	; (8001d8c <sevseg_init+0x274>)
 8001c2e:	f023 0308 	bic.w	r3, r3, #8
 8001c32:	6153      	str	r3, [r2, #20]
	// PA8 b
	GPIOA->MODER &= ~(1<<17);
 8001c34:	4b54      	ldr	r3, [pc, #336]	; (8001d88 <sevseg_init+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a53      	ldr	r2, [pc, #332]	; (8001d88 <sevseg_init+0x270>)
 8001c3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c3e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<16);
 8001c40:	4b51      	ldr	r3, [pc, #324]	; (8001d88 <sevseg_init+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a50      	ldr	r2, [pc, #320]	; (8001d88 <sevseg_init+0x270>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<8);
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <sevseg_init+0x270>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a4d      	ldr	r2, [pc, #308]	; (8001d88 <sevseg_init+0x270>)
 8001c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c56:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~(1<<8);
 8001c58:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <sevseg_init+0x270>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4a4a      	ldr	r2, [pc, #296]	; (8001d88 <sevseg_init+0x270>)
 8001c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c62:	6153      	str	r3, [r2, #20]
	// PC0 c
	GPIOC->MODER &= ~(1<<1);
 8001c64:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <sevseg_init+0x278>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a49      	ldr	r2, [pc, #292]	; (8001d90 <sevseg_init+0x278>)
 8001c6a:	f023 0302 	bic.w	r3, r3, #2
 8001c6e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<0);
 8001c70:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <sevseg_init+0x278>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <sevseg_init+0x278>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<0);
 8001c7c:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <sevseg_init+0x278>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a43      	ldr	r2, [pc, #268]	; (8001d90 <sevseg_init+0x278>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<0);
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <sevseg_init+0x278>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	4a40      	ldr	r2, [pc, #256]	; (8001d90 <sevseg_init+0x278>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6153      	str	r3, [r2, #20]
	// PC1 d
	GPIOC->MODER &= ~(1<<3);
 8001c94:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <sevseg_init+0x278>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3d      	ldr	r2, [pc, #244]	; (8001d90 <sevseg_init+0x278>)
 8001c9a:	f023 0308 	bic.w	r3, r3, #8
 8001c9e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<2);
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <sevseg_init+0x278>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3a      	ldr	r2, [pc, #232]	; (8001d90 <sevseg_init+0x278>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<1);
 8001cac:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <sevseg_init+0x278>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a37      	ldr	r2, [pc, #220]	; (8001d90 <sevseg_init+0x278>)
 8001cb2:	f023 0302 	bic.w	r3, r3, #2
 8001cb6:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<1);
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <sevseg_init+0x278>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	4a34      	ldr	r2, [pc, #208]	; (8001d90 <sevseg_init+0x278>)
 8001cbe:	f023 0302 	bic.w	r3, r3, #2
 8001cc2:	6153      	str	r3, [r2, #20]
	// PB0 e
	GPIOB->MODER &= ~(1<<1);
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <sevseg_init+0x274>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <sevseg_init+0x274>)
 8001cca:	f023 0302 	bic.w	r3, r3, #2
 8001cce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<0);
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <sevseg_init+0x274>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2d      	ldr	r2, [pc, #180]	; (8001d8c <sevseg_init+0x274>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<0);
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <sevseg_init+0x274>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <sevseg_init+0x274>)
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<0);
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <sevseg_init+0x274>)
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <sevseg_init+0x274>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6153      	str	r3, [r2, #20]
	// PB10 f
	GPIOB->MODER &= ~(1<<21);
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <sevseg_init+0x274>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <sevseg_init+0x274>)
 8001cfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cfe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<20);
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <sevseg_init+0x274>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <sevseg_init+0x274>)
 8001d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d0a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<10);
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <sevseg_init+0x274>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <sevseg_init+0x274>)
 8001d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d16:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<10);
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <sevseg_init+0x274>)
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <sevseg_init+0x274>)
 8001d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d22:	6153      	str	r3, [r2, #20]
	// PA4 g
	GPIOA->MODER &= ~(1<<9);
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <sevseg_init+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <sevseg_init+0x270>)
 8001d2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d2e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<8);
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <sevseg_init+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <sevseg_init+0x270>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<4);
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <sevseg_init+0x270>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <sevseg_init+0x270>)
 8001d42:	f023 0310 	bic.w	r3, r3, #16
 8001d46:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~(1<<4);
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <sevseg_init+0x270>)
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <sevseg_init+0x270>)
 8001d4e:	f023 0310 	bic.w	r3, r3, #16
 8001d52:	6153      	str	r3, [r2, #20]
	//PC9 red
	GPIOC->MODER &= ~(1<<19);
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <sevseg_init+0x278>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <sevseg_init+0x278>)
 8001d5a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d5e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<18);
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <sevseg_init+0x278>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <sevseg_init+0x278>)
 8001d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<1);
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <sevseg_init+0x278>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <sevseg_init+0x278>)
 8001d72:	f023 0302 	bic.w	r3, r3, #2
 8001d76:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<9);
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <sevseg_init+0x278>)
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <sevseg_init+0x278>)
 8001d7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d82:	e007      	b.n	8001d94 <sevseg_init+0x27c>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020800 	.word	0x40020800
 8001d94:	6153      	str	r3, [r2, #20]
	//PB8 yellow
	GPIOB->MODER &= ~(1<<17);
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <sevseg_init+0x2e4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <sevseg_init+0x2e4>)
 8001d9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001da0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<16);
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <sevseg_init+0x2e4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <sevseg_init+0x2e4>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<1);
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <sevseg_init+0x2e4>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <sevseg_init+0x2e4>)
 8001db4:	f023 0302 	bic.w	r3, r3, #2
 8001db8:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<8);
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <sevseg_init+0x2e4>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <sevseg_init+0x2e4>)
 8001dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc4:	6153      	str	r3, [r2, #20]
	//PB9 green
	GPIOB->MODER &= ~(1<<19);
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <sevseg_init+0x2e4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <sevseg_init+0x2e4>)
 8001dcc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001dd0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<18);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <sevseg_init+0x2e4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <sevseg_init+0x2e4>)
 8001dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<1);
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <sevseg_init+0x2e4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <sevseg_init+0x2e4>)
 8001de4:	f023 0302 	bic.w	r3, r3, #2
 8001de8:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<9);
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <sevseg_init+0x2e4>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <sevseg_init+0x2e4>)
 8001df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001df4:	6153      	str	r3, [r2, #20]
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40020400 	.word	0x40020400

08001e00 <sevseg_display>:

void sevseg_display(int input){
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	if (input > 9999){
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	dd03      	ble.n	8001e1a <sevseg_display+0x1a>
		input = 9999;
 8001e12:	f242 730f 	movw	r3, #9999	; 0x270f
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	e004      	b.n	8001e24 <sevseg_display+0x24>
	}else if (input < 0){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da01      	bge.n	8001e24 <sevseg_display+0x24>
		input = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
	}
	int thou = (input / 1000) % 10;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4aa0      	ldr	r2, [pc, #640]	; (80020a8 <sevseg_display+0x2a8>)
 8001e28:	fb82 1203 	smull	r1, r2, r2, r3
 8001e2c:	1192      	asrs	r2, r2, #6
 8001e2e:	17db      	asrs	r3, r3, #31
 8001e30:	1ad2      	subs	r2, r2, r3
 8001e32:	4b9e      	ldr	r3, [pc, #632]	; (80020ac <sevseg_display+0x2ac>)
 8001e34:	fb83 1302 	smull	r1, r3, r3, r2
 8001e38:	1099      	asrs	r1, r3, #2
 8001e3a:	17d3      	asrs	r3, r2, #31
 8001e3c:	1ac9      	subs	r1, r1, r3
 8001e3e:	460b      	mov	r3, r1
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
	int hund = (input / 100) % 10;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a98      	ldr	r2, [pc, #608]	; (80020b0 <sevseg_display+0x2b0>)
 8001e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e52:	1152      	asrs	r2, r2, #5
 8001e54:	17db      	asrs	r3, r3, #31
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	4b94      	ldr	r3, [pc, #592]	; (80020ac <sevseg_display+0x2ac>)
 8001e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5e:	1099      	asrs	r1, r3, #2
 8001e60:	17d3      	asrs	r3, r2, #31
 8001e62:	1ac9      	subs	r1, r1, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	613b      	str	r3, [r7, #16]
	int tens = (input / 10) % 10;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a8e      	ldr	r2, [pc, #568]	; (80020ac <sevseg_display+0x2ac>)
 8001e74:	fb82 1203 	smull	r1, r2, r2, r3
 8001e78:	1092      	asrs	r2, r2, #2
 8001e7a:	17db      	asrs	r3, r3, #31
 8001e7c:	1ad2      	subs	r2, r2, r3
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <sevseg_display+0x2ac>)
 8001e80:	fb83 1302 	smull	r1, r3, r3, r2
 8001e84:	1099      	asrs	r1, r3, #2
 8001e86:	17d3      	asrs	r3, r2, #31
 8001e88:	1ac9      	subs	r1, r1, r3
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	60fb      	str	r3, [r7, #12]
	int ones = (input / 1) % 10;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4b84      	ldr	r3, [pc, #528]	; (80020ac <sevseg_display+0x2ac>)
 8001e9a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e9e:	1099      	asrs	r1, r3, #2
 8001ea0:	17d3      	asrs	r3, r2, #31
 8001ea2:	1ac9      	subs	r1, r1, r3
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	60bb      	str	r3, [r7, #8]

		int digit = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
		switch (sevsegnum) {
 8001eb4:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <sevseg_display+0x2b4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	f200 8083 	bhi.w	8001fc4 <sevseg_display+0x1c4>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <sevseg_display+0xc4>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001f11 	.word	0x08001f11
 8001ecc:	08001f4d 	.word	0x08001f4d
 8001ed0:	08001f89 	.word	0x08001f89
		case 0:
			digit = thou;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR &= ~(1<<0); //1
 8001ed8:	4b77      	ldr	r3, [pc, #476]	; (80020b8 <sevseg_display+0x2b8>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	4a76      	ldr	r2, [pc, #472]	; (80020b8 <sevseg_display+0x2b8>)
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <sevseg_display+0x2bc>)
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	4a74      	ldr	r2, [pc, #464]	; (80020bc <sevseg_display+0x2bc>)
 8001eea:	f043 0320 	orr.w	r3, r3, #32
 8001eee:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 8001ef0:	4b72      	ldr	r3, [pc, #456]	; (80020bc <sevseg_display+0x2bc>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	4a71      	ldr	r2, [pc, #452]	; (80020bc <sevseg_display+0x2bc>)
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 8001efc:	4b6e      	ldr	r3, [pc, #440]	; (80020b8 <sevseg_display+0x2b8>)
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	4a6d      	ldr	r2, [pc, #436]	; (80020b8 <sevseg_display+0x2b8>)
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	6153      	str	r3, [r2, #20]
			sevsegnum = 3;
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <sevseg_display+0x2b4>)
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	601a      	str	r2, [r3, #0]
		break;
 8001f0e:	e059      	b.n	8001fc4 <sevseg_display+0x1c4>

		case 1:
			digit = hund;
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 8001f14:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <sevseg_display+0x2b8>)
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	4a67      	ldr	r2, [pc, #412]	; (80020b8 <sevseg_display+0x2b8>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<5); //2
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <sevseg_display+0x2bc>)
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	4a65      	ldr	r2, [pc, #404]	; (80020bc <sevseg_display+0x2bc>)
 8001f26:	f023 0320 	bic.w	r3, r3, #32
 8001f2a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 8001f2c:	4b63      	ldr	r3, [pc, #396]	; (80020bc <sevseg_display+0x2bc>)
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	4a62      	ldr	r2, [pc, #392]	; (80020bc <sevseg_display+0x2bc>)
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 8001f38:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <sevseg_display+0x2b8>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	4a5e      	ldr	r2, [pc, #376]	; (80020b8 <sevseg_display+0x2b8>)
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	6153      	str	r3, [r2, #20]
			sevsegnum = 0;
 8001f44:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <sevseg_display+0x2b4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
		break;
 8001f4a:	e03b      	b.n	8001fc4 <sevseg_display+0x1c4>

		case 2:
			digit = tens;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 8001f50:	4b59      	ldr	r3, [pc, #356]	; (80020b8 <sevseg_display+0x2b8>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <sevseg_display+0x2b8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <sevseg_display+0x2bc>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	4a56      	ldr	r2, [pc, #344]	; (80020bc <sevseg_display+0x2bc>)
 8001f62:	f043 0320 	orr.w	r3, r3, #32
 8001f66:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<4); //3
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <sevseg_display+0x2bc>)
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	4a53      	ldr	r2, [pc, #332]	; (80020bc <sevseg_display+0x2bc>)
 8001f6e:	f023 0310 	bic.w	r3, r3, #16
 8001f72:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <sevseg_display+0x2b8>)
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	; (80020b8 <sevseg_display+0x2b8>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	6153      	str	r3, [r2, #20]
			sevsegnum = 1;
 8001f80:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <sevseg_display+0x2b4>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
		break;
 8001f86:	e01d      	b.n	8001fc4 <sevseg_display+0x1c4>

		case 3:
			digit = ones;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 8001f8c:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <sevseg_display+0x2b8>)
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	4a49      	ldr	r2, [pc, #292]	; (80020b8 <sevseg_display+0x2b8>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <sevseg_display+0x2bc>)
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	4a47      	ldr	r2, [pc, #284]	; (80020bc <sevseg_display+0x2bc>)
 8001f9e:	f043 0320 	orr.w	r3, r3, #32
 8001fa2:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 8001fa4:	4b45      	ldr	r3, [pc, #276]	; (80020bc <sevseg_display+0x2bc>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	4a44      	ldr	r2, [pc, #272]	; (80020bc <sevseg_display+0x2bc>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<1); //4
 8001fb0:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <sevseg_display+0x2b8>)
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	4a40      	ldr	r2, [pc, #256]	; (80020b8 <sevseg_display+0x2b8>)
 8001fb6:	f023 0302 	bic.w	r3, r3, #2
 8001fba:	6153      	str	r3, [r2, #20]
			sevsegnum = 2;
 8001fbc:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <sevseg_display+0x2b4>)
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	601a      	str	r2, [r3, #0]
		break;
 8001fc2:	bf00      	nop
		}
		switch(digit) {
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b09      	cmp	r3, #9
 8001fc8:	f200 81db 	bhi.w	8002382 <sevseg_display+0x582>
 8001fcc:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <sevseg_display+0x1d4>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08001ffd 	.word	0x08001ffd
 8001fd8:	08002053 	.word	0x08002053
 8001fdc:	080020c5 	.word	0x080020c5
 8001fe0:	0800211b 	.word	0x0800211b
 8001fe4:	08002171 	.word	0x08002171
 8001fe8:	080021c7 	.word	0x080021c7
 8001fec:	0800221d 	.word	0x0800221d
 8001ff0:	08002273 	.word	0x08002273
 8001ff4:	080022c9 	.word	0x080022c9
 8001ff8:	0800232d 	.word	0x0800232d
		case 0: //abcdef
			GPIOB->ODR |= (1<<3); //a
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <sevseg_display+0x2bc>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <sevseg_display+0x2bc>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <sevseg_display+0x2b8>)
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <sevseg_display+0x2b8>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <sevseg_display+0x2c0>)
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	4a29      	ldr	r2, [pc, #164]	; (80020c0 <sevseg_display+0x2c0>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <sevseg_display+0x2c0>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <sevseg_display+0x2c0>)
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <sevseg_display+0x2bc>)
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	4a22      	ldr	r2, [pc, #136]	; (80020bc <sevseg_display+0x2bc>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <sevseg_display+0x2bc>)
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <sevseg_display+0x2bc>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002042:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <sevseg_display+0x2b8>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <sevseg_display+0x2b8>)
 800204a:	f023 0310 	bic.w	r3, r3, #16
 800204e:	6153      	str	r3, [r2, #20]
		break;
 8002050:	e197      	b.n	8002382 <sevseg_display+0x582>

		case 1:
			GPIOB->ODR &= ~(1<<3); //a
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <sevseg_display+0x2bc>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4a19      	ldr	r2, [pc, #100]	; (80020bc <sevseg_display+0x2bc>)
 8002058:	f023 0308 	bic.w	r3, r3, #8
 800205c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <sevseg_display+0x2b8>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <sevseg_display+0x2b8>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <sevseg_display+0x2c0>)
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <sevseg_display+0x2c0>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <sevseg_display+0x2c0>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <sevseg_display+0x2c0>)
 800207c:	f023 0302 	bic.w	r3, r3, #2
 8002080:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <sevseg_display+0x2bc>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <sevseg_display+0x2bc>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <sevseg_display+0x2bc>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <sevseg_display+0x2bc>)
 8002094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002098:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <sevseg_display+0x2b8>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <sevseg_display+0x2b8>)
 80020a0:	f023 0310 	bic.w	r3, r3, #16
 80020a4:	6153      	str	r3, [r2, #20]
		break;
 80020a6:	e16c      	b.n	8002382 <sevseg_display+0x582>
 80020a8:	10624dd3 	.word	0x10624dd3
 80020ac:	66666667 	.word	0x66666667
 80020b0:	51eb851f 	.word	0x51eb851f
 80020b4:	200000a0 	.word	0x200000a0
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020800 	.word	0x40020800

		case 2:
			GPIOB->ODR |= (1<<3); //a
 80020c4:	4b96      	ldr	r3, [pc, #600]	; (8002320 <sevseg_display+0x520>)
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	4a95      	ldr	r2, [pc, #596]	; (8002320 <sevseg_display+0x520>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 80020d0:	4b94      	ldr	r3, [pc, #592]	; (8002324 <sevseg_display+0x524>)
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	4a93      	ldr	r2, [pc, #588]	; (8002324 <sevseg_display+0x524>)
 80020d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020da:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<0); //c
 80020dc:	4b92      	ldr	r3, [pc, #584]	; (8002328 <sevseg_display+0x528>)
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	4a91      	ldr	r2, [pc, #580]	; (8002328 <sevseg_display+0x528>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 80020e8:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <sevseg_display+0x528>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	4a8e      	ldr	r2, [pc, #568]	; (8002328 <sevseg_display+0x528>)
 80020ee:	f043 0302 	orr.w	r3, r3, #2
 80020f2:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 80020f4:	4b8a      	ldr	r3, [pc, #552]	; (8002320 <sevseg_display+0x520>)
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	4a89      	ldr	r2, [pc, #548]	; (8002320 <sevseg_display+0x520>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 8002100:	4b87      	ldr	r3, [pc, #540]	; (8002320 <sevseg_display+0x520>)
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	4a86      	ldr	r2, [pc, #536]	; (8002320 <sevseg_display+0x520>)
 8002106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800210a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 800210c:	4b85      	ldr	r3, [pc, #532]	; (8002324 <sevseg_display+0x524>)
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	4a84      	ldr	r2, [pc, #528]	; (8002324 <sevseg_display+0x524>)
 8002112:	f043 0310 	orr.w	r3, r3, #16
 8002116:	6153      	str	r3, [r2, #20]
		break;
 8002118:	e133      	b.n	8002382 <sevseg_display+0x582>

		case 3:
			GPIOB->ODR |= (1<<3); //a
 800211a:	4b81      	ldr	r3, [pc, #516]	; (8002320 <sevseg_display+0x520>)
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	4a80      	ldr	r2, [pc, #512]	; (8002320 <sevseg_display+0x520>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <sevseg_display+0x524>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	4a7e      	ldr	r2, [pc, #504]	; (8002324 <sevseg_display+0x524>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002130:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8002132:	4b7d      	ldr	r3, [pc, #500]	; (8002328 <sevseg_display+0x528>)
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4a7c      	ldr	r2, [pc, #496]	; (8002328 <sevseg_display+0x528>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 800213e:	4b7a      	ldr	r3, [pc, #488]	; (8002328 <sevseg_display+0x528>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4a79      	ldr	r2, [pc, #484]	; (8002328 <sevseg_display+0x528>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 800214a:	4b75      	ldr	r3, [pc, #468]	; (8002320 <sevseg_display+0x520>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4a74      	ldr	r2, [pc, #464]	; (8002320 <sevseg_display+0x520>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <sevseg_display+0x520>)
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	4a71      	ldr	r2, [pc, #452]	; (8002320 <sevseg_display+0x520>)
 800215c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002160:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8002162:	4b70      	ldr	r3, [pc, #448]	; (8002324 <sevseg_display+0x524>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	4a6f      	ldr	r2, [pc, #444]	; (8002324 <sevseg_display+0x524>)
 8002168:	f043 0310 	orr.w	r3, r3, #16
 800216c:	6153      	str	r3, [r2, #20]
		break;
 800216e:	e108      	b.n	8002382 <sevseg_display+0x582>

		case 4:
			GPIOB->ODR &= ~(1<<3); //a
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <sevseg_display+0x520>)
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	4a6a      	ldr	r2, [pc, #424]	; (8002320 <sevseg_display+0x520>)
 8002176:	f023 0308 	bic.w	r3, r3, #8
 800217a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 800217c:	4b69      	ldr	r3, [pc, #420]	; (8002324 <sevseg_display+0x524>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	4a68      	ldr	r2, [pc, #416]	; (8002324 <sevseg_display+0x524>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8002188:	4b67      	ldr	r3, [pc, #412]	; (8002328 <sevseg_display+0x528>)
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	4a66      	ldr	r2, [pc, #408]	; (8002328 <sevseg_display+0x528>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 8002194:	4b64      	ldr	r3, [pc, #400]	; (8002328 <sevseg_display+0x528>)
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	4a63      	ldr	r2, [pc, #396]	; (8002328 <sevseg_display+0x528>)
 800219a:	f023 0302 	bic.w	r3, r3, #2
 800219e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80021a0:	4b5f      	ldr	r3, [pc, #380]	; (8002320 <sevseg_display+0x520>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4a5e      	ldr	r2, [pc, #376]	; (8002320 <sevseg_display+0x520>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 80021ac:	4b5c      	ldr	r3, [pc, #368]	; (8002320 <sevseg_display+0x520>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <sevseg_display+0x520>)
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b6:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 80021b8:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <sevseg_display+0x524>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	4a59      	ldr	r2, [pc, #356]	; (8002324 <sevseg_display+0x524>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	6153      	str	r3, [r2, #20]
		break;
 80021c4:	e0dd      	b.n	8002382 <sevseg_display+0x582>

		case 5:
			GPIOB->ODR |= (1<<3); //a
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <sevseg_display+0x520>)
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4a55      	ldr	r2, [pc, #340]	; (8002320 <sevseg_display+0x520>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<8); //b
 80021d2:	4b54      	ldr	r3, [pc, #336]	; (8002324 <sevseg_display+0x524>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4a53      	ldr	r2, [pc, #332]	; (8002324 <sevseg_display+0x524>)
 80021d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021dc:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 80021de:	4b52      	ldr	r3, [pc, #328]	; (8002328 <sevseg_display+0x528>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4a51      	ldr	r2, [pc, #324]	; (8002328 <sevseg_display+0x528>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 80021ea:	4b4f      	ldr	r3, [pc, #316]	; (8002328 <sevseg_display+0x528>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4a4e      	ldr	r2, [pc, #312]	; (8002328 <sevseg_display+0x528>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <sevseg_display+0x520>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4a49      	ldr	r2, [pc, #292]	; (8002320 <sevseg_display+0x520>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <sevseg_display+0x520>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	4a46      	ldr	r2, [pc, #280]	; (8002320 <sevseg_display+0x520>)
 8002208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800220c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 800220e:	4b45      	ldr	r3, [pc, #276]	; (8002324 <sevseg_display+0x524>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4a44      	ldr	r2, [pc, #272]	; (8002324 <sevseg_display+0x524>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6153      	str	r3, [r2, #20]
		break;
 800221a:	e0b2      	b.n	8002382 <sevseg_display+0x582>

		case 6:
			GPIOB->ODR |= (1<<3); //a
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <sevseg_display+0x520>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	4a3f      	ldr	r2, [pc, #252]	; (8002320 <sevseg_display+0x520>)
 8002222:	f043 0308 	orr.w	r3, r3, #8
 8002226:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<8); //b
 8002228:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <sevseg_display+0x524>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <sevseg_display+0x524>)
 800222e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002232:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8002234:	4b3c      	ldr	r3, [pc, #240]	; (8002328 <sevseg_display+0x528>)
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <sevseg_display+0x528>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8002240:	4b39      	ldr	r3, [pc, #228]	; (8002328 <sevseg_display+0x528>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	4a38      	ldr	r2, [pc, #224]	; (8002328 <sevseg_display+0x528>)
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <sevseg_display+0x520>)
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	4a33      	ldr	r2, [pc, #204]	; (8002320 <sevseg_display+0x520>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <sevseg_display+0x520>)
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	4a30      	ldr	r2, [pc, #192]	; (8002320 <sevseg_display+0x520>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002262:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8002264:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <sevseg_display+0x524>)
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	4a2e      	ldr	r2, [pc, #184]	; (8002324 <sevseg_display+0x524>)
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	6153      	str	r3, [r2, #20]
		break;
 8002270:	e087      	b.n	8002382 <sevseg_display+0x582>

		case 7:
			GPIOB->ODR |= (1<<3); //a
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <sevseg_display+0x520>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <sevseg_display+0x520>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <sevseg_display+0x524>)
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4a28      	ldr	r2, [pc, #160]	; (8002324 <sevseg_display+0x524>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <sevseg_display+0x528>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4a26      	ldr	r2, [pc, #152]	; (8002328 <sevseg_display+0x528>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <sevseg_display+0x528>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a23      	ldr	r2, [pc, #140]	; (8002328 <sevseg_display+0x528>)
 800229c:	f023 0302 	bic.w	r3, r3, #2
 80022a0:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80022a2:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <sevseg_display+0x520>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <sevseg_display+0x520>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <sevseg_display+0x520>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <sevseg_display+0x520>)
 80022b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022b8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <sevseg_display+0x524>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4a19      	ldr	r2, [pc, #100]	; (8002324 <sevseg_display+0x524>)
 80022c0:	f023 0310 	bic.w	r3, r3, #16
 80022c4:	6153      	str	r3, [r2, #20]
		break;
 80022c6:	e05c      	b.n	8002382 <sevseg_display+0x582>

		case 8:
			GPIOB->ODR |= (1<<3); //a
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <sevseg_display+0x520>)
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <sevseg_display+0x520>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <sevseg_display+0x524>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <sevseg_display+0x524>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022de:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <sevseg_display+0x528>)
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	4a10      	ldr	r2, [pc, #64]	; (8002328 <sevseg_display+0x528>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <sevseg_display+0x528>)
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <sevseg_display+0x528>)
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <sevseg_display+0x520>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	4a08      	ldr	r2, [pc, #32]	; (8002320 <sevseg_display+0x520>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <sevseg_display+0x520>)
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	4a05      	ldr	r2, [pc, #20]	; (8002320 <sevseg_display+0x520>)
 800230a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230e:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <sevseg_display+0x524>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	4a03      	ldr	r2, [pc, #12]	; (8002324 <sevseg_display+0x524>)
 8002316:	f043 0310 	orr.w	r3, r3, #16
 800231a:	6153      	str	r3, [r2, #20]
		break;
 800231c:	e031      	b.n	8002382 <sevseg_display+0x582>
 800231e:	bf00      	nop
 8002320:	40020400 	.word	0x40020400
 8002324:	40020000 	.word	0x40020000
 8002328:	40020800 	.word	0x40020800

		case 9:
			GPIOB->ODR |= (1<<3); //a
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <sevseg_display+0x5a4>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <sevseg_display+0x5a4>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <sevseg_display+0x5a8>)
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <sevseg_display+0x5a8>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002342:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <sevseg_display+0x5ac>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <sevseg_display+0x5ac>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <sevseg_display+0x5ac>)
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <sevseg_display+0x5ac>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <sevseg_display+0x5a4>)
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <sevseg_display+0x5a4>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <sevseg_display+0x5a4>)
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <sevseg_display+0x5a4>)
 800236e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002372:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <sevseg_display+0x5a8>)
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <sevseg_display+0x5a8>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6153      	str	r3, [r2, #20]
		break;
 8002380:	bf00      	nop
		}
		for (int j=0; j<1000; j++){
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	e002      	b.n	800238e <sevseg_display+0x58e>
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	3301      	adds	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002394:	dbf8      	blt.n	8002388 <sevseg_display+0x588>

	//GPIOA->ODR |= (1<<0); //1
	//GPIOB->ODR |= (1<<4); //2
	//GPIOB->ODR |= (1<<5); //3
	//GPIOC->ODR |= (1<<0); //4
}
 8002396:	bf00      	nop
 8002398:	bf00      	nop
 800239a:	3724      	adds	r7, #36	; 0x24
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020000 	.word	0x40020000
 80023ac:	40020800 	.word	0x40020800

080023b0 <alert>:

void alert(int alert){
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	// 0 for green, 1 for yellow, 2 for red
	switch (alert){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d02f      	beq.n	800241e <alert+0x6e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	dc3f      	bgt.n	8002444 <alert+0x94>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <alert+0x22>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d013      	beq.n	80023f8 <alert+0x48>
		GPIOC->ODR |= (1<<9);
		GPIOB->ODR &= ~(1<<8);
		GPIOB->ODR &= ~(1<<9);
		break;
	}
}
 80023d0:	e038      	b.n	8002444 <alert+0x94>
		GPIOC->ODR &= ~(1<<9);
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <alert+0xa0>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <alert+0xa0>)
 80023d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023dc:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<8);
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <alert+0xa4>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4a1c      	ldr	r2, [pc, #112]	; (8002454 <alert+0xa4>)
 80023e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e8:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= (1<<9);
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <alert+0xa4>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4a19      	ldr	r2, [pc, #100]	; (8002454 <alert+0xa4>)
 80023f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f4:	6153      	str	r3, [r2, #20]
		break;
 80023f6:	e025      	b.n	8002444 <alert+0x94>
		GPIOC->ODR &= ~(1<<9);
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <alert+0xa0>)
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	4a14      	ldr	r2, [pc, #80]	; (8002450 <alert+0xa0>)
 80023fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002402:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= (1<<8);
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <alert+0xa4>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <alert+0xa4>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
 8002410:	4b10      	ldr	r3, [pc, #64]	; (8002454 <alert+0xa4>)
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <alert+0xa4>)
 8002416:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800241a:	6153      	str	r3, [r2, #20]
		break;
 800241c:	e012      	b.n	8002444 <alert+0x94>
		GPIOC->ODR |= (1<<9);
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <alert+0xa0>)
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <alert+0xa0>)
 8002424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002428:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<8);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <alert+0xa4>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <alert+0xa4>)
 8002430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002434:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <alert+0xa4>)
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	4a06      	ldr	r2, [pc, #24]	; (8002454 <alert+0xa4>)
 800243c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002440:	6153      	str	r3, [r2, #20]
		break;
 8002442:	bf00      	nop
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40020800 	.word	0x40020800
 8002454:	40020400 	.word	0x40020400

08002458 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	sevseg_display(sevseg_data);
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <TIM4_IRQHandler+0x20>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fccd 	bl	8001e00 <sevseg_display>
	TIM4->SR &= ~(5<<0); // Clear UIF update interrupt flag
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <TIM4_IRQHandler+0x24>)
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <TIM4_IRQHandler+0x24>)
 800246c:	f023 0305 	bic.w	r3, r3, #5
 8002470:	6113      	str	r3, [r2, #16]
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000000 	.word	0x20000000
 800247c:	40000800 	.word	0x40000800

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <NMI_Handler+0x4>

08002486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <MemManage_Handler+0x4>

08002492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <UsageFault_Handler+0x4>

0800249e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024cc:	f000 f874 	bl	80025b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002504:	f000 f88c 	bl	8002620 <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	220c      	movs	r2, #12
 800250c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	e009      	b.n	8002528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <_sbrk+0x64>)
 8002524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20020000 	.word	0x20020000
 8002534:	00000400 	.word	0x00000400
 8002538:	200001f4 	.word	0x200001f4
 800253c:	20000348 	.word	0x20000348

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800259c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800256a:	490e      	ldr	r1, [pc, #56]	; (80025a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002580:	4c0b      	ldr	r4, [pc, #44]	; (80025b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800258e:	f7ff ffd7 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002592:	f000 f84b 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002596:	f7ff f9f1 	bl	800197c <main>
  bx  lr    
 800259a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800259c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025a8:	08003f00 	.word	0x08003f00
  ldr r2, =_sbss
 80025ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025b0:	20000344 	.word	0x20000344

080025b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC_IRQHandler>
	...

080025b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x20>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x24>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <HAL_IncTick+0x24>)
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000008 	.word	0x20000008
 80025dc:	200001f8 	.word	0x200001f8

080025e0 <siprintf>:
 80025e0:	b40e      	push	{r1, r2, r3}
 80025e2:	b500      	push	{lr}
 80025e4:	b09c      	sub	sp, #112	; 0x70
 80025e6:	ab1d      	add	r3, sp, #116	; 0x74
 80025e8:	9002      	str	r0, [sp, #8]
 80025ea:	9006      	str	r0, [sp, #24]
 80025ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80025f0:	4809      	ldr	r0, [pc, #36]	; (8002618 <siprintf+0x38>)
 80025f2:	9107      	str	r1, [sp, #28]
 80025f4:	9104      	str	r1, [sp, #16]
 80025f6:	4909      	ldr	r1, [pc, #36]	; (800261c <siprintf+0x3c>)
 80025f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80025fc:	9105      	str	r1, [sp, #20]
 80025fe:	6800      	ldr	r0, [r0, #0]
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	a902      	add	r1, sp, #8
 8002604:	f000 f98a 	bl	800291c <_svfiprintf_r>
 8002608:	9b02      	ldr	r3, [sp, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	b01c      	add	sp, #112	; 0x70
 8002610:	f85d eb04 	ldr.w	lr, [sp], #4
 8002614:	b003      	add	sp, #12
 8002616:	4770      	bx	lr
 8002618:	20000058 	.word	0x20000058
 800261c:	ffff0208 	.word	0xffff0208

08002620 <__errno>:
 8002620:	4b01      	ldr	r3, [pc, #4]	; (8002628 <__errno+0x8>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000058 	.word	0x20000058

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	4d0d      	ldr	r5, [pc, #52]	; (8002664 <__libc_init_array+0x38>)
 8002630:	4c0d      	ldr	r4, [pc, #52]	; (8002668 <__libc_init_array+0x3c>)
 8002632:	1b64      	subs	r4, r4, r5
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	2600      	movs	r6, #0
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	4d0b      	ldr	r5, [pc, #44]	; (800266c <__libc_init_array+0x40>)
 800263e:	4c0c      	ldr	r4, [pc, #48]	; (8002670 <__libc_init_array+0x44>)
 8002640:	f001 fba2 	bl	8003d88 <_init>
 8002644:	1b64      	subs	r4, r4, r5
 8002646:	10a4      	asrs	r4, r4, #2
 8002648:	2600      	movs	r6, #0
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f855 3b04 	ldr.w	r3, [r5], #4
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f855 3b04 	ldr.w	r3, [r5], #4
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	08003ef8 	.word	0x08003ef8
 8002668:	08003ef8 	.word	0x08003ef8
 800266c:	08003ef8 	.word	0x08003ef8
 8002670:	08003efc 	.word	0x08003efc

08002674 <__retarget_lock_acquire_recursive>:
 8002674:	4770      	bx	lr

08002676 <__retarget_lock_release_recursive>:
 8002676:	4770      	bx	lr

08002678 <_free_r>:
 8002678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800267a:	2900      	cmp	r1, #0
 800267c:	d044      	beq.n	8002708 <_free_r+0x90>
 800267e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002682:	9001      	str	r0, [sp, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f1a1 0404 	sub.w	r4, r1, #4
 800268a:	bfb8      	it	lt
 800268c:	18e4      	addlt	r4, r4, r3
 800268e:	f000 f8df 	bl	8002850 <__malloc_lock>
 8002692:	4a1e      	ldr	r2, [pc, #120]	; (800270c <_free_r+0x94>)
 8002694:	9801      	ldr	r0, [sp, #4]
 8002696:	6813      	ldr	r3, [r2, #0]
 8002698:	b933      	cbnz	r3, 80026a8 <_free_r+0x30>
 800269a:	6063      	str	r3, [r4, #4]
 800269c:	6014      	str	r4, [r2, #0]
 800269e:	b003      	add	sp, #12
 80026a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80026a4:	f000 b8da 	b.w	800285c <__malloc_unlock>
 80026a8:	42a3      	cmp	r3, r4
 80026aa:	d908      	bls.n	80026be <_free_r+0x46>
 80026ac:	6825      	ldr	r5, [r4, #0]
 80026ae:	1961      	adds	r1, r4, r5
 80026b0:	428b      	cmp	r3, r1
 80026b2:	bf01      	itttt	eq
 80026b4:	6819      	ldreq	r1, [r3, #0]
 80026b6:	685b      	ldreq	r3, [r3, #4]
 80026b8:	1949      	addeq	r1, r1, r5
 80026ba:	6021      	streq	r1, [r4, #0]
 80026bc:	e7ed      	b.n	800269a <_free_r+0x22>
 80026be:	461a      	mov	r2, r3
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	b10b      	cbz	r3, 80026c8 <_free_r+0x50>
 80026c4:	42a3      	cmp	r3, r4
 80026c6:	d9fa      	bls.n	80026be <_free_r+0x46>
 80026c8:	6811      	ldr	r1, [r2, #0]
 80026ca:	1855      	adds	r5, r2, r1
 80026cc:	42a5      	cmp	r5, r4
 80026ce:	d10b      	bne.n	80026e8 <_free_r+0x70>
 80026d0:	6824      	ldr	r4, [r4, #0]
 80026d2:	4421      	add	r1, r4
 80026d4:	1854      	adds	r4, r2, r1
 80026d6:	42a3      	cmp	r3, r4
 80026d8:	6011      	str	r1, [r2, #0]
 80026da:	d1e0      	bne.n	800269e <_free_r+0x26>
 80026dc:	681c      	ldr	r4, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	6053      	str	r3, [r2, #4]
 80026e2:	440c      	add	r4, r1
 80026e4:	6014      	str	r4, [r2, #0]
 80026e6:	e7da      	b.n	800269e <_free_r+0x26>
 80026e8:	d902      	bls.n	80026f0 <_free_r+0x78>
 80026ea:	230c      	movs	r3, #12
 80026ec:	6003      	str	r3, [r0, #0]
 80026ee:	e7d6      	b.n	800269e <_free_r+0x26>
 80026f0:	6825      	ldr	r5, [r4, #0]
 80026f2:	1961      	adds	r1, r4, r5
 80026f4:	428b      	cmp	r3, r1
 80026f6:	bf04      	itt	eq
 80026f8:	6819      	ldreq	r1, [r3, #0]
 80026fa:	685b      	ldreq	r3, [r3, #4]
 80026fc:	6063      	str	r3, [r4, #4]
 80026fe:	bf04      	itt	eq
 8002700:	1949      	addeq	r1, r1, r5
 8002702:	6021      	streq	r1, [r4, #0]
 8002704:	6054      	str	r4, [r2, #4]
 8002706:	e7ca      	b.n	800269e <_free_r+0x26>
 8002708:	b003      	add	sp, #12
 800270a:	bd30      	pop	{r4, r5, pc}
 800270c:	2000033c 	.word	0x2000033c

08002710 <sbrk_aligned>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	4e0e      	ldr	r6, [pc, #56]	; (800274c <sbrk_aligned+0x3c>)
 8002714:	460c      	mov	r4, r1
 8002716:	6831      	ldr	r1, [r6, #0]
 8002718:	4605      	mov	r5, r0
 800271a:	b911      	cbnz	r1, 8002722 <sbrk_aligned+0x12>
 800271c:	f000 fba6 	bl	8002e6c <_sbrk_r>
 8002720:	6030      	str	r0, [r6, #0]
 8002722:	4621      	mov	r1, r4
 8002724:	4628      	mov	r0, r5
 8002726:	f000 fba1 	bl	8002e6c <_sbrk_r>
 800272a:	1c43      	adds	r3, r0, #1
 800272c:	d00a      	beq.n	8002744 <sbrk_aligned+0x34>
 800272e:	1cc4      	adds	r4, r0, #3
 8002730:	f024 0403 	bic.w	r4, r4, #3
 8002734:	42a0      	cmp	r0, r4
 8002736:	d007      	beq.n	8002748 <sbrk_aligned+0x38>
 8002738:	1a21      	subs	r1, r4, r0
 800273a:	4628      	mov	r0, r5
 800273c:	f000 fb96 	bl	8002e6c <_sbrk_r>
 8002740:	3001      	adds	r0, #1
 8002742:	d101      	bne.n	8002748 <sbrk_aligned+0x38>
 8002744:	f04f 34ff 	mov.w	r4, #4294967295
 8002748:	4620      	mov	r0, r4
 800274a:	bd70      	pop	{r4, r5, r6, pc}
 800274c:	20000340 	.word	0x20000340

08002750 <_malloc_r>:
 8002750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002754:	1ccd      	adds	r5, r1, #3
 8002756:	f025 0503 	bic.w	r5, r5, #3
 800275a:	3508      	adds	r5, #8
 800275c:	2d0c      	cmp	r5, #12
 800275e:	bf38      	it	cc
 8002760:	250c      	movcc	r5, #12
 8002762:	2d00      	cmp	r5, #0
 8002764:	4607      	mov	r7, r0
 8002766:	db01      	blt.n	800276c <_malloc_r+0x1c>
 8002768:	42a9      	cmp	r1, r5
 800276a:	d905      	bls.n	8002778 <_malloc_r+0x28>
 800276c:	230c      	movs	r3, #12
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	2600      	movs	r6, #0
 8002772:	4630      	mov	r0, r6
 8002774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002778:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800284c <_malloc_r+0xfc>
 800277c:	f000 f868 	bl	8002850 <__malloc_lock>
 8002780:	f8d8 3000 	ldr.w	r3, [r8]
 8002784:	461c      	mov	r4, r3
 8002786:	bb5c      	cbnz	r4, 80027e0 <_malloc_r+0x90>
 8002788:	4629      	mov	r1, r5
 800278a:	4638      	mov	r0, r7
 800278c:	f7ff ffc0 	bl	8002710 <sbrk_aligned>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	4604      	mov	r4, r0
 8002794:	d155      	bne.n	8002842 <_malloc_r+0xf2>
 8002796:	f8d8 4000 	ldr.w	r4, [r8]
 800279a:	4626      	mov	r6, r4
 800279c:	2e00      	cmp	r6, #0
 800279e:	d145      	bne.n	800282c <_malloc_r+0xdc>
 80027a0:	2c00      	cmp	r4, #0
 80027a2:	d048      	beq.n	8002836 <_malloc_r+0xe6>
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	4631      	mov	r1, r6
 80027a8:	4638      	mov	r0, r7
 80027aa:	eb04 0903 	add.w	r9, r4, r3
 80027ae:	f000 fb5d 	bl	8002e6c <_sbrk_r>
 80027b2:	4581      	cmp	r9, r0
 80027b4:	d13f      	bne.n	8002836 <_malloc_r+0xe6>
 80027b6:	6821      	ldr	r1, [r4, #0]
 80027b8:	1a6d      	subs	r5, r5, r1
 80027ba:	4629      	mov	r1, r5
 80027bc:	4638      	mov	r0, r7
 80027be:	f7ff ffa7 	bl	8002710 <sbrk_aligned>
 80027c2:	3001      	adds	r0, #1
 80027c4:	d037      	beq.n	8002836 <_malloc_r+0xe6>
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	442b      	add	r3, r5
 80027ca:	6023      	str	r3, [r4, #0]
 80027cc:	f8d8 3000 	ldr.w	r3, [r8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d038      	beq.n	8002846 <_malloc_r+0xf6>
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	42a2      	cmp	r2, r4
 80027d8:	d12b      	bne.n	8002832 <_malloc_r+0xe2>
 80027da:	2200      	movs	r2, #0
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	e00f      	b.n	8002800 <_malloc_r+0xb0>
 80027e0:	6822      	ldr	r2, [r4, #0]
 80027e2:	1b52      	subs	r2, r2, r5
 80027e4:	d41f      	bmi.n	8002826 <_malloc_r+0xd6>
 80027e6:	2a0b      	cmp	r2, #11
 80027e8:	d917      	bls.n	800281a <_malloc_r+0xca>
 80027ea:	1961      	adds	r1, r4, r5
 80027ec:	42a3      	cmp	r3, r4
 80027ee:	6025      	str	r5, [r4, #0]
 80027f0:	bf18      	it	ne
 80027f2:	6059      	strne	r1, [r3, #4]
 80027f4:	6863      	ldr	r3, [r4, #4]
 80027f6:	bf08      	it	eq
 80027f8:	f8c8 1000 	streq.w	r1, [r8]
 80027fc:	5162      	str	r2, [r4, r5]
 80027fe:	604b      	str	r3, [r1, #4]
 8002800:	4638      	mov	r0, r7
 8002802:	f104 060b 	add.w	r6, r4, #11
 8002806:	f000 f829 	bl	800285c <__malloc_unlock>
 800280a:	f026 0607 	bic.w	r6, r6, #7
 800280e:	1d23      	adds	r3, r4, #4
 8002810:	1af2      	subs	r2, r6, r3
 8002812:	d0ae      	beq.n	8002772 <_malloc_r+0x22>
 8002814:	1b9b      	subs	r3, r3, r6
 8002816:	50a3      	str	r3, [r4, r2]
 8002818:	e7ab      	b.n	8002772 <_malloc_r+0x22>
 800281a:	42a3      	cmp	r3, r4
 800281c:	6862      	ldr	r2, [r4, #4]
 800281e:	d1dd      	bne.n	80027dc <_malloc_r+0x8c>
 8002820:	f8c8 2000 	str.w	r2, [r8]
 8002824:	e7ec      	b.n	8002800 <_malloc_r+0xb0>
 8002826:	4623      	mov	r3, r4
 8002828:	6864      	ldr	r4, [r4, #4]
 800282a:	e7ac      	b.n	8002786 <_malloc_r+0x36>
 800282c:	4634      	mov	r4, r6
 800282e:	6876      	ldr	r6, [r6, #4]
 8002830:	e7b4      	b.n	800279c <_malloc_r+0x4c>
 8002832:	4613      	mov	r3, r2
 8002834:	e7cc      	b.n	80027d0 <_malloc_r+0x80>
 8002836:	230c      	movs	r3, #12
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4638      	mov	r0, r7
 800283c:	f000 f80e 	bl	800285c <__malloc_unlock>
 8002840:	e797      	b.n	8002772 <_malloc_r+0x22>
 8002842:	6025      	str	r5, [r4, #0]
 8002844:	e7dc      	b.n	8002800 <_malloc_r+0xb0>
 8002846:	605b      	str	r3, [r3, #4]
 8002848:	deff      	udf	#255	; 0xff
 800284a:	bf00      	nop
 800284c:	2000033c 	.word	0x2000033c

08002850 <__malloc_lock>:
 8002850:	4801      	ldr	r0, [pc, #4]	; (8002858 <__malloc_lock+0x8>)
 8002852:	f7ff bf0f 	b.w	8002674 <__retarget_lock_acquire_recursive>
 8002856:	bf00      	nop
 8002858:	20000338 	.word	0x20000338

0800285c <__malloc_unlock>:
 800285c:	4801      	ldr	r0, [pc, #4]	; (8002864 <__malloc_unlock+0x8>)
 800285e:	f7ff bf0a 	b.w	8002676 <__retarget_lock_release_recursive>
 8002862:	bf00      	nop
 8002864:	20000338 	.word	0x20000338

08002868 <__ssputs_r>:
 8002868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800286c:	688e      	ldr	r6, [r1, #8]
 800286e:	461f      	mov	r7, r3
 8002870:	42be      	cmp	r6, r7
 8002872:	680b      	ldr	r3, [r1, #0]
 8002874:	4682      	mov	sl, r0
 8002876:	460c      	mov	r4, r1
 8002878:	4690      	mov	r8, r2
 800287a:	d82c      	bhi.n	80028d6 <__ssputs_r+0x6e>
 800287c:	898a      	ldrh	r2, [r1, #12]
 800287e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002882:	d026      	beq.n	80028d2 <__ssputs_r+0x6a>
 8002884:	6965      	ldr	r5, [r4, #20]
 8002886:	6909      	ldr	r1, [r1, #16]
 8002888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800288c:	eba3 0901 	sub.w	r9, r3, r1
 8002890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002894:	1c7b      	adds	r3, r7, #1
 8002896:	444b      	add	r3, r9
 8002898:	106d      	asrs	r5, r5, #1
 800289a:	429d      	cmp	r5, r3
 800289c:	bf38      	it	cc
 800289e:	461d      	movcc	r5, r3
 80028a0:	0553      	lsls	r3, r2, #21
 80028a2:	d527      	bpl.n	80028f4 <__ssputs_r+0x8c>
 80028a4:	4629      	mov	r1, r5
 80028a6:	f7ff ff53 	bl	8002750 <_malloc_r>
 80028aa:	4606      	mov	r6, r0
 80028ac:	b360      	cbz	r0, 8002908 <__ssputs_r+0xa0>
 80028ae:	6921      	ldr	r1, [r4, #16]
 80028b0:	464a      	mov	r2, r9
 80028b2:	f000 faeb 	bl	8002e8c <memcpy>
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c0:	81a3      	strh	r3, [r4, #12]
 80028c2:	6126      	str	r6, [r4, #16]
 80028c4:	6165      	str	r5, [r4, #20]
 80028c6:	444e      	add	r6, r9
 80028c8:	eba5 0509 	sub.w	r5, r5, r9
 80028cc:	6026      	str	r6, [r4, #0]
 80028ce:	60a5      	str	r5, [r4, #8]
 80028d0:	463e      	mov	r6, r7
 80028d2:	42be      	cmp	r6, r7
 80028d4:	d900      	bls.n	80028d8 <__ssputs_r+0x70>
 80028d6:	463e      	mov	r6, r7
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	4632      	mov	r2, r6
 80028dc:	4641      	mov	r1, r8
 80028de:	f000 faab 	bl	8002e38 <memmove>
 80028e2:	68a3      	ldr	r3, [r4, #8]
 80028e4:	1b9b      	subs	r3, r3, r6
 80028e6:	60a3      	str	r3, [r4, #8]
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	4433      	add	r3, r6
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	2000      	movs	r0, #0
 80028f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028f4:	462a      	mov	r2, r5
 80028f6:	f000 fad7 	bl	8002ea8 <_realloc_r>
 80028fa:	4606      	mov	r6, r0
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d1e0      	bne.n	80028c2 <__ssputs_r+0x5a>
 8002900:	6921      	ldr	r1, [r4, #16]
 8002902:	4650      	mov	r0, sl
 8002904:	f7ff feb8 	bl	8002678 <_free_r>
 8002908:	230c      	movs	r3, #12
 800290a:	f8ca 3000 	str.w	r3, [sl]
 800290e:	89a3      	ldrh	r3, [r4, #12]
 8002910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002914:	81a3      	strh	r3, [r4, #12]
 8002916:	f04f 30ff 	mov.w	r0, #4294967295
 800291a:	e7e9      	b.n	80028f0 <__ssputs_r+0x88>

0800291c <_svfiprintf_r>:
 800291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002920:	4698      	mov	r8, r3
 8002922:	898b      	ldrh	r3, [r1, #12]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	b09d      	sub	sp, #116	; 0x74
 8002928:	4607      	mov	r7, r0
 800292a:	460d      	mov	r5, r1
 800292c:	4614      	mov	r4, r2
 800292e:	d50e      	bpl.n	800294e <_svfiprintf_r+0x32>
 8002930:	690b      	ldr	r3, [r1, #16]
 8002932:	b963      	cbnz	r3, 800294e <_svfiprintf_r+0x32>
 8002934:	2140      	movs	r1, #64	; 0x40
 8002936:	f7ff ff0b 	bl	8002750 <_malloc_r>
 800293a:	6028      	str	r0, [r5, #0]
 800293c:	6128      	str	r0, [r5, #16]
 800293e:	b920      	cbnz	r0, 800294a <_svfiprintf_r+0x2e>
 8002940:	230c      	movs	r3, #12
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	e0d0      	b.n	8002aec <_svfiprintf_r+0x1d0>
 800294a:	2340      	movs	r3, #64	; 0x40
 800294c:	616b      	str	r3, [r5, #20]
 800294e:	2300      	movs	r3, #0
 8002950:	9309      	str	r3, [sp, #36]	; 0x24
 8002952:	2320      	movs	r3, #32
 8002954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002958:	f8cd 800c 	str.w	r8, [sp, #12]
 800295c:	2330      	movs	r3, #48	; 0x30
 800295e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002b04 <_svfiprintf_r+0x1e8>
 8002962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002966:	f04f 0901 	mov.w	r9, #1
 800296a:	4623      	mov	r3, r4
 800296c:	469a      	mov	sl, r3
 800296e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002972:	b10a      	cbz	r2, 8002978 <_svfiprintf_r+0x5c>
 8002974:	2a25      	cmp	r2, #37	; 0x25
 8002976:	d1f9      	bne.n	800296c <_svfiprintf_r+0x50>
 8002978:	ebba 0b04 	subs.w	fp, sl, r4
 800297c:	d00b      	beq.n	8002996 <_svfiprintf_r+0x7a>
 800297e:	465b      	mov	r3, fp
 8002980:	4622      	mov	r2, r4
 8002982:	4629      	mov	r1, r5
 8002984:	4638      	mov	r0, r7
 8002986:	f7ff ff6f 	bl	8002868 <__ssputs_r>
 800298a:	3001      	adds	r0, #1
 800298c:	f000 80a9 	beq.w	8002ae2 <_svfiprintf_r+0x1c6>
 8002990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002992:	445a      	add	r2, fp
 8002994:	9209      	str	r2, [sp, #36]	; 0x24
 8002996:	f89a 3000 	ldrb.w	r3, [sl]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80a1 	beq.w	8002ae2 <_svfiprintf_r+0x1c6>
 80029a0:	2300      	movs	r3, #0
 80029a2:	f04f 32ff 	mov.w	r2, #4294967295
 80029a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029aa:	f10a 0a01 	add.w	sl, sl, #1
 80029ae:	9304      	str	r3, [sp, #16]
 80029b0:	9307      	str	r3, [sp, #28]
 80029b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029b6:	931a      	str	r3, [sp, #104]	; 0x68
 80029b8:	4654      	mov	r4, sl
 80029ba:	2205      	movs	r2, #5
 80029bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029c0:	4850      	ldr	r0, [pc, #320]	; (8002b04 <_svfiprintf_r+0x1e8>)
 80029c2:	f7fd fc15 	bl	80001f0 <memchr>
 80029c6:	9a04      	ldr	r2, [sp, #16]
 80029c8:	b9d8      	cbnz	r0, 8002a02 <_svfiprintf_r+0xe6>
 80029ca:	06d0      	lsls	r0, r2, #27
 80029cc:	bf44      	itt	mi
 80029ce:	2320      	movmi	r3, #32
 80029d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029d4:	0711      	lsls	r1, r2, #28
 80029d6:	bf44      	itt	mi
 80029d8:	232b      	movmi	r3, #43	; 0x2b
 80029da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029de:	f89a 3000 	ldrb.w	r3, [sl]
 80029e2:	2b2a      	cmp	r3, #42	; 0x2a
 80029e4:	d015      	beq.n	8002a12 <_svfiprintf_r+0xf6>
 80029e6:	9a07      	ldr	r2, [sp, #28]
 80029e8:	4654      	mov	r4, sl
 80029ea:	2000      	movs	r0, #0
 80029ec:	f04f 0c0a 	mov.w	ip, #10
 80029f0:	4621      	mov	r1, r4
 80029f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029f6:	3b30      	subs	r3, #48	; 0x30
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d94d      	bls.n	8002a98 <_svfiprintf_r+0x17c>
 80029fc:	b1b0      	cbz	r0, 8002a2c <_svfiprintf_r+0x110>
 80029fe:	9207      	str	r2, [sp, #28]
 8002a00:	e014      	b.n	8002a2c <_svfiprintf_r+0x110>
 8002a02:	eba0 0308 	sub.w	r3, r0, r8
 8002a06:	fa09 f303 	lsl.w	r3, r9, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	9304      	str	r3, [sp, #16]
 8002a0e:	46a2      	mov	sl, r4
 8002a10:	e7d2      	b.n	80029b8 <_svfiprintf_r+0x9c>
 8002a12:	9b03      	ldr	r3, [sp, #12]
 8002a14:	1d19      	adds	r1, r3, #4
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	9103      	str	r1, [sp, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bfbb      	ittet	lt
 8002a1e:	425b      	neglt	r3, r3
 8002a20:	f042 0202 	orrlt.w	r2, r2, #2
 8002a24:	9307      	strge	r3, [sp, #28]
 8002a26:	9307      	strlt	r3, [sp, #28]
 8002a28:	bfb8      	it	lt
 8002a2a:	9204      	strlt	r2, [sp, #16]
 8002a2c:	7823      	ldrb	r3, [r4, #0]
 8002a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a30:	d10c      	bne.n	8002a4c <_svfiprintf_r+0x130>
 8002a32:	7863      	ldrb	r3, [r4, #1]
 8002a34:	2b2a      	cmp	r3, #42	; 0x2a
 8002a36:	d134      	bne.n	8002aa2 <_svfiprintf_r+0x186>
 8002a38:	9b03      	ldr	r3, [sp, #12]
 8002a3a:	1d1a      	adds	r2, r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	9203      	str	r2, [sp, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bfb8      	it	lt
 8002a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a48:	3402      	adds	r4, #2
 8002a4a:	9305      	str	r3, [sp, #20]
 8002a4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002b14 <_svfiprintf_r+0x1f8>
 8002a50:	7821      	ldrb	r1, [r4, #0]
 8002a52:	2203      	movs	r2, #3
 8002a54:	4650      	mov	r0, sl
 8002a56:	f7fd fbcb 	bl	80001f0 <memchr>
 8002a5a:	b138      	cbz	r0, 8002a6c <_svfiprintf_r+0x150>
 8002a5c:	9b04      	ldr	r3, [sp, #16]
 8002a5e:	eba0 000a 	sub.w	r0, r0, sl
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	4082      	lsls	r2, r0
 8002a66:	4313      	orrs	r3, r2
 8002a68:	3401      	adds	r4, #1
 8002a6a:	9304      	str	r3, [sp, #16]
 8002a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a70:	4825      	ldr	r0, [pc, #148]	; (8002b08 <_svfiprintf_r+0x1ec>)
 8002a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a76:	2206      	movs	r2, #6
 8002a78:	f7fd fbba 	bl	80001f0 <memchr>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d038      	beq.n	8002af2 <_svfiprintf_r+0x1d6>
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <_svfiprintf_r+0x1f0>)
 8002a82:	bb1b      	cbnz	r3, 8002acc <_svfiprintf_r+0x1b0>
 8002a84:	9b03      	ldr	r3, [sp, #12]
 8002a86:	3307      	adds	r3, #7
 8002a88:	f023 0307 	bic.w	r3, r3, #7
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	9303      	str	r3, [sp, #12]
 8002a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a92:	4433      	add	r3, r6
 8002a94:	9309      	str	r3, [sp, #36]	; 0x24
 8002a96:	e768      	b.n	800296a <_svfiprintf_r+0x4e>
 8002a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	e7a6      	b.n	80029f0 <_svfiprintf_r+0xd4>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	3401      	adds	r4, #1
 8002aa6:	9305      	str	r3, [sp, #20]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f04f 0c0a 	mov.w	ip, #10
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ab4:	3a30      	subs	r2, #48	; 0x30
 8002ab6:	2a09      	cmp	r2, #9
 8002ab8:	d903      	bls.n	8002ac2 <_svfiprintf_r+0x1a6>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0c6      	beq.n	8002a4c <_svfiprintf_r+0x130>
 8002abe:	9105      	str	r1, [sp, #20]
 8002ac0:	e7c4      	b.n	8002a4c <_svfiprintf_r+0x130>
 8002ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e7f0      	b.n	8002aae <_svfiprintf_r+0x192>
 8002acc:	ab03      	add	r3, sp, #12
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	462a      	mov	r2, r5
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <_svfiprintf_r+0x1f4>)
 8002ad4:	a904      	add	r1, sp, #16
 8002ad6:	4638      	mov	r0, r7
 8002ad8:	f3af 8000 	nop.w
 8002adc:	1c42      	adds	r2, r0, #1
 8002ade:	4606      	mov	r6, r0
 8002ae0:	d1d6      	bne.n	8002a90 <_svfiprintf_r+0x174>
 8002ae2:	89ab      	ldrh	r3, [r5, #12]
 8002ae4:	065b      	lsls	r3, r3, #25
 8002ae6:	f53f af2d 	bmi.w	8002944 <_svfiprintf_r+0x28>
 8002aea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002aec:	b01d      	add	sp, #116	; 0x74
 8002aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002af2:	ab03      	add	r3, sp, #12
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	462a      	mov	r2, r5
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <_svfiprintf_r+0x1f4>)
 8002afa:	a904      	add	r1, sp, #16
 8002afc:	4638      	mov	r0, r7
 8002afe:	f000 f879 	bl	8002bf4 <_printf_i>
 8002b02:	e7eb      	b.n	8002adc <_svfiprintf_r+0x1c0>
 8002b04:	08003e91 	.word	0x08003e91
 8002b08:	08003e9b 	.word	0x08003e9b
 8002b0c:	00000000 	.word	0x00000000
 8002b10:	08002869 	.word	0x08002869
 8002b14:	08003e97 	.word	0x08003e97

08002b18 <_printf_common>:
 8002b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b1c:	4616      	mov	r6, r2
 8002b1e:	4699      	mov	r9, r3
 8002b20:	688a      	ldr	r2, [r1, #8]
 8002b22:	690b      	ldr	r3, [r1, #16]
 8002b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	bfb8      	it	lt
 8002b2c:	4613      	movlt	r3, r2
 8002b2e:	6033      	str	r3, [r6, #0]
 8002b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b34:	4607      	mov	r7, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	b10a      	cbz	r2, 8002b3e <_printf_common+0x26>
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	6033      	str	r3, [r6, #0]
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	0699      	lsls	r1, r3, #26
 8002b42:	bf42      	ittt	mi
 8002b44:	6833      	ldrmi	r3, [r6, #0]
 8002b46:	3302      	addmi	r3, #2
 8002b48:	6033      	strmi	r3, [r6, #0]
 8002b4a:	6825      	ldr	r5, [r4, #0]
 8002b4c:	f015 0506 	ands.w	r5, r5, #6
 8002b50:	d106      	bne.n	8002b60 <_printf_common+0x48>
 8002b52:	f104 0a19 	add.w	sl, r4, #25
 8002b56:	68e3      	ldr	r3, [r4, #12]
 8002b58:	6832      	ldr	r2, [r6, #0]
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	42ab      	cmp	r3, r5
 8002b5e:	dc26      	bgt.n	8002bae <_printf_common+0x96>
 8002b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b64:	1e13      	subs	r3, r2, #0
 8002b66:	6822      	ldr	r2, [r4, #0]
 8002b68:	bf18      	it	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	0692      	lsls	r2, r2, #26
 8002b6e:	d42b      	bmi.n	8002bc8 <_printf_common+0xb0>
 8002b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b74:	4649      	mov	r1, r9
 8002b76:	4638      	mov	r0, r7
 8002b78:	47c0      	blx	r8
 8002b7a:	3001      	adds	r0, #1
 8002b7c:	d01e      	beq.n	8002bbc <_printf_common+0xa4>
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	6922      	ldr	r2, [r4, #16]
 8002b82:	f003 0306 	and.w	r3, r3, #6
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	bf02      	ittt	eq
 8002b8a:	68e5      	ldreq	r5, [r4, #12]
 8002b8c:	6833      	ldreq	r3, [r6, #0]
 8002b8e:	1aed      	subeq	r5, r5, r3
 8002b90:	68a3      	ldr	r3, [r4, #8]
 8002b92:	bf0c      	ite	eq
 8002b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b98:	2500      	movne	r5, #0
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	bfc4      	itt	gt
 8002b9e:	1a9b      	subgt	r3, r3, r2
 8002ba0:	18ed      	addgt	r5, r5, r3
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	341a      	adds	r4, #26
 8002ba6:	42b5      	cmp	r5, r6
 8002ba8:	d11a      	bne.n	8002be0 <_printf_common+0xc8>
 8002baa:	2000      	movs	r0, #0
 8002bac:	e008      	b.n	8002bc0 <_printf_common+0xa8>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4652      	mov	r2, sl
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	47c0      	blx	r8
 8002bb8:	3001      	adds	r0, #1
 8002bba:	d103      	bne.n	8002bc4 <_printf_common+0xac>
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc4:	3501      	adds	r5, #1
 8002bc6:	e7c6      	b.n	8002b56 <_printf_common+0x3e>
 8002bc8:	18e1      	adds	r1, r4, r3
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	2030      	movs	r0, #48	; 0x30
 8002bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bd2:	4422      	add	r2, r4
 8002bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bdc:	3302      	adds	r3, #2
 8002bde:	e7c7      	b.n	8002b70 <_printf_common+0x58>
 8002be0:	2301      	movs	r3, #1
 8002be2:	4622      	mov	r2, r4
 8002be4:	4649      	mov	r1, r9
 8002be6:	4638      	mov	r0, r7
 8002be8:	47c0      	blx	r8
 8002bea:	3001      	adds	r0, #1
 8002bec:	d0e6      	beq.n	8002bbc <_printf_common+0xa4>
 8002bee:	3601      	adds	r6, #1
 8002bf0:	e7d9      	b.n	8002ba6 <_printf_common+0x8e>
	...

08002bf4 <_printf_i>:
 8002bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf8:	7e0f      	ldrb	r7, [r1, #24]
 8002bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002bfc:	2f78      	cmp	r7, #120	; 0x78
 8002bfe:	4691      	mov	r9, r2
 8002c00:	4680      	mov	r8, r0
 8002c02:	460c      	mov	r4, r1
 8002c04:	469a      	mov	sl, r3
 8002c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c0a:	d807      	bhi.n	8002c1c <_printf_i+0x28>
 8002c0c:	2f62      	cmp	r7, #98	; 0x62
 8002c0e:	d80a      	bhi.n	8002c26 <_printf_i+0x32>
 8002c10:	2f00      	cmp	r7, #0
 8002c12:	f000 80d4 	beq.w	8002dbe <_printf_i+0x1ca>
 8002c16:	2f58      	cmp	r7, #88	; 0x58
 8002c18:	f000 80c0 	beq.w	8002d9c <_printf_i+0x1a8>
 8002c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c24:	e03a      	b.n	8002c9c <_printf_i+0xa8>
 8002c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c2a:	2b15      	cmp	r3, #21
 8002c2c:	d8f6      	bhi.n	8002c1c <_printf_i+0x28>
 8002c2e:	a101      	add	r1, pc, #4	; (adr r1, 8002c34 <_printf_i+0x40>)
 8002c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c34:	08002c8d 	.word	0x08002c8d
 8002c38:	08002ca1 	.word	0x08002ca1
 8002c3c:	08002c1d 	.word	0x08002c1d
 8002c40:	08002c1d 	.word	0x08002c1d
 8002c44:	08002c1d 	.word	0x08002c1d
 8002c48:	08002c1d 	.word	0x08002c1d
 8002c4c:	08002ca1 	.word	0x08002ca1
 8002c50:	08002c1d 	.word	0x08002c1d
 8002c54:	08002c1d 	.word	0x08002c1d
 8002c58:	08002c1d 	.word	0x08002c1d
 8002c5c:	08002c1d 	.word	0x08002c1d
 8002c60:	08002da5 	.word	0x08002da5
 8002c64:	08002ccd 	.word	0x08002ccd
 8002c68:	08002d5f 	.word	0x08002d5f
 8002c6c:	08002c1d 	.word	0x08002c1d
 8002c70:	08002c1d 	.word	0x08002c1d
 8002c74:	08002dc7 	.word	0x08002dc7
 8002c78:	08002c1d 	.word	0x08002c1d
 8002c7c:	08002ccd 	.word	0x08002ccd
 8002c80:	08002c1d 	.word	0x08002c1d
 8002c84:	08002c1d 	.word	0x08002c1d
 8002c88:	08002d67 	.word	0x08002d67
 8002c8c:	682b      	ldr	r3, [r5, #0]
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	602a      	str	r2, [r5, #0]
 8002c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e09f      	b.n	8002de0 <_printf_i+0x1ec>
 8002ca0:	6820      	ldr	r0, [r4, #0]
 8002ca2:	682b      	ldr	r3, [r5, #0]
 8002ca4:	0607      	lsls	r7, r0, #24
 8002ca6:	f103 0104 	add.w	r1, r3, #4
 8002caa:	6029      	str	r1, [r5, #0]
 8002cac:	d501      	bpl.n	8002cb2 <_printf_i+0xbe>
 8002cae:	681e      	ldr	r6, [r3, #0]
 8002cb0:	e003      	b.n	8002cba <_printf_i+0xc6>
 8002cb2:	0646      	lsls	r6, r0, #25
 8002cb4:	d5fb      	bpl.n	8002cae <_printf_i+0xba>
 8002cb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002cba:	2e00      	cmp	r6, #0
 8002cbc:	da03      	bge.n	8002cc6 <_printf_i+0xd2>
 8002cbe:	232d      	movs	r3, #45	; 0x2d
 8002cc0:	4276      	negs	r6, r6
 8002cc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cc6:	485a      	ldr	r0, [pc, #360]	; (8002e30 <_printf_i+0x23c>)
 8002cc8:	230a      	movs	r3, #10
 8002cca:	e012      	b.n	8002cf2 <_printf_i+0xfe>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	6820      	ldr	r0, [r4, #0]
 8002cd0:	1d19      	adds	r1, r3, #4
 8002cd2:	6029      	str	r1, [r5, #0]
 8002cd4:	0605      	lsls	r5, r0, #24
 8002cd6:	d501      	bpl.n	8002cdc <_printf_i+0xe8>
 8002cd8:	681e      	ldr	r6, [r3, #0]
 8002cda:	e002      	b.n	8002ce2 <_printf_i+0xee>
 8002cdc:	0641      	lsls	r1, r0, #25
 8002cde:	d5fb      	bpl.n	8002cd8 <_printf_i+0xe4>
 8002ce0:	881e      	ldrh	r6, [r3, #0]
 8002ce2:	4853      	ldr	r0, [pc, #332]	; (8002e30 <_printf_i+0x23c>)
 8002ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2308      	moveq	r3, #8
 8002cea:	230a      	movne	r3, #10
 8002cec:	2100      	movs	r1, #0
 8002cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cf2:	6865      	ldr	r5, [r4, #4]
 8002cf4:	60a5      	str	r5, [r4, #8]
 8002cf6:	2d00      	cmp	r5, #0
 8002cf8:	bfa2      	ittt	ge
 8002cfa:	6821      	ldrge	r1, [r4, #0]
 8002cfc:	f021 0104 	bicge.w	r1, r1, #4
 8002d00:	6021      	strge	r1, [r4, #0]
 8002d02:	b90e      	cbnz	r6, 8002d08 <_printf_i+0x114>
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	d04b      	beq.n	8002da0 <_printf_i+0x1ac>
 8002d08:	4615      	mov	r5, r2
 8002d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8002d12:	5dc7      	ldrb	r7, [r0, r7]
 8002d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d18:	4637      	mov	r7, r6
 8002d1a:	42bb      	cmp	r3, r7
 8002d1c:	460e      	mov	r6, r1
 8002d1e:	d9f4      	bls.n	8002d0a <_printf_i+0x116>
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d10b      	bne.n	8002d3c <_printf_i+0x148>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	07de      	lsls	r6, r3, #31
 8002d28:	d508      	bpl.n	8002d3c <_printf_i+0x148>
 8002d2a:	6923      	ldr	r3, [r4, #16]
 8002d2c:	6861      	ldr	r1, [r4, #4]
 8002d2e:	4299      	cmp	r1, r3
 8002d30:	bfde      	ittt	le
 8002d32:	2330      	movle	r3, #48	; 0x30
 8002d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d3c:	1b52      	subs	r2, r2, r5
 8002d3e:	6122      	str	r2, [r4, #16]
 8002d40:	f8cd a000 	str.w	sl, [sp]
 8002d44:	464b      	mov	r3, r9
 8002d46:	aa03      	add	r2, sp, #12
 8002d48:	4621      	mov	r1, r4
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	f7ff fee4 	bl	8002b18 <_printf_common>
 8002d50:	3001      	adds	r0, #1
 8002d52:	d14a      	bne.n	8002dea <_printf_i+0x1f6>
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	b004      	add	sp, #16
 8002d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5e:	6823      	ldr	r3, [r4, #0]
 8002d60:	f043 0320 	orr.w	r3, r3, #32
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	4833      	ldr	r0, [pc, #204]	; (8002e34 <_printf_i+0x240>)
 8002d68:	2778      	movs	r7, #120	; 0x78
 8002d6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	6829      	ldr	r1, [r5, #0]
 8002d72:	061f      	lsls	r7, r3, #24
 8002d74:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d78:	d402      	bmi.n	8002d80 <_printf_i+0x18c>
 8002d7a:	065f      	lsls	r7, r3, #25
 8002d7c:	bf48      	it	mi
 8002d7e:	b2b6      	uxthmi	r6, r6
 8002d80:	07df      	lsls	r7, r3, #31
 8002d82:	bf48      	it	mi
 8002d84:	f043 0320 	orrmi.w	r3, r3, #32
 8002d88:	6029      	str	r1, [r5, #0]
 8002d8a:	bf48      	it	mi
 8002d8c:	6023      	strmi	r3, [r4, #0]
 8002d8e:	b91e      	cbnz	r6, 8002d98 <_printf_i+0x1a4>
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	f023 0320 	bic.w	r3, r3, #32
 8002d96:	6023      	str	r3, [r4, #0]
 8002d98:	2310      	movs	r3, #16
 8002d9a:	e7a7      	b.n	8002cec <_printf_i+0xf8>
 8002d9c:	4824      	ldr	r0, [pc, #144]	; (8002e30 <_printf_i+0x23c>)
 8002d9e:	e7e4      	b.n	8002d6a <_printf_i+0x176>
 8002da0:	4615      	mov	r5, r2
 8002da2:	e7bd      	b.n	8002d20 <_printf_i+0x12c>
 8002da4:	682b      	ldr	r3, [r5, #0]
 8002da6:	6826      	ldr	r6, [r4, #0]
 8002da8:	6961      	ldr	r1, [r4, #20]
 8002daa:	1d18      	adds	r0, r3, #4
 8002dac:	6028      	str	r0, [r5, #0]
 8002dae:	0635      	lsls	r5, r6, #24
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	d501      	bpl.n	8002db8 <_printf_i+0x1c4>
 8002db4:	6019      	str	r1, [r3, #0]
 8002db6:	e002      	b.n	8002dbe <_printf_i+0x1ca>
 8002db8:	0670      	lsls	r0, r6, #25
 8002dba:	d5fb      	bpl.n	8002db4 <_printf_i+0x1c0>
 8002dbc:	8019      	strh	r1, [r3, #0]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	6123      	str	r3, [r4, #16]
 8002dc2:	4615      	mov	r5, r2
 8002dc4:	e7bc      	b.n	8002d40 <_printf_i+0x14c>
 8002dc6:	682b      	ldr	r3, [r5, #0]
 8002dc8:	1d1a      	adds	r2, r3, #4
 8002dca:	602a      	str	r2, [r5, #0]
 8002dcc:	681d      	ldr	r5, [r3, #0]
 8002dce:	6862      	ldr	r2, [r4, #4]
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f7fd fa0c 	bl	80001f0 <memchr>
 8002dd8:	b108      	cbz	r0, 8002dde <_printf_i+0x1ea>
 8002dda:	1b40      	subs	r0, r0, r5
 8002ddc:	6060      	str	r0, [r4, #4]
 8002dde:	6863      	ldr	r3, [r4, #4]
 8002de0:	6123      	str	r3, [r4, #16]
 8002de2:	2300      	movs	r3, #0
 8002de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de8:	e7aa      	b.n	8002d40 <_printf_i+0x14c>
 8002dea:	6923      	ldr	r3, [r4, #16]
 8002dec:	462a      	mov	r2, r5
 8002dee:	4649      	mov	r1, r9
 8002df0:	4640      	mov	r0, r8
 8002df2:	47d0      	blx	sl
 8002df4:	3001      	adds	r0, #1
 8002df6:	d0ad      	beq.n	8002d54 <_printf_i+0x160>
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	079b      	lsls	r3, r3, #30
 8002dfc:	d413      	bmi.n	8002e26 <_printf_i+0x232>
 8002dfe:	68e0      	ldr	r0, [r4, #12]
 8002e00:	9b03      	ldr	r3, [sp, #12]
 8002e02:	4298      	cmp	r0, r3
 8002e04:	bfb8      	it	lt
 8002e06:	4618      	movlt	r0, r3
 8002e08:	e7a6      	b.n	8002d58 <_printf_i+0x164>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	4632      	mov	r2, r6
 8002e0e:	4649      	mov	r1, r9
 8002e10:	4640      	mov	r0, r8
 8002e12:	47d0      	blx	sl
 8002e14:	3001      	adds	r0, #1
 8002e16:	d09d      	beq.n	8002d54 <_printf_i+0x160>
 8002e18:	3501      	adds	r5, #1
 8002e1a:	68e3      	ldr	r3, [r4, #12]
 8002e1c:	9903      	ldr	r1, [sp, #12]
 8002e1e:	1a5b      	subs	r3, r3, r1
 8002e20:	42ab      	cmp	r3, r5
 8002e22:	dcf2      	bgt.n	8002e0a <_printf_i+0x216>
 8002e24:	e7eb      	b.n	8002dfe <_printf_i+0x20a>
 8002e26:	2500      	movs	r5, #0
 8002e28:	f104 0619 	add.w	r6, r4, #25
 8002e2c:	e7f5      	b.n	8002e1a <_printf_i+0x226>
 8002e2e:	bf00      	nop
 8002e30:	08003ea2 	.word	0x08003ea2
 8002e34:	08003eb3 	.word	0x08003eb3

08002e38 <memmove>:
 8002e38:	4288      	cmp	r0, r1
 8002e3a:	b510      	push	{r4, lr}
 8002e3c:	eb01 0402 	add.w	r4, r1, r2
 8002e40:	d902      	bls.n	8002e48 <memmove+0x10>
 8002e42:	4284      	cmp	r4, r0
 8002e44:	4623      	mov	r3, r4
 8002e46:	d807      	bhi.n	8002e58 <memmove+0x20>
 8002e48:	1e43      	subs	r3, r0, #1
 8002e4a:	42a1      	cmp	r1, r4
 8002e4c:	d008      	beq.n	8002e60 <memmove+0x28>
 8002e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e56:	e7f8      	b.n	8002e4a <memmove+0x12>
 8002e58:	4402      	add	r2, r0
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	428a      	cmp	r2, r1
 8002e5e:	d100      	bne.n	8002e62 <memmove+0x2a>
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e6a:	e7f7      	b.n	8002e5c <memmove+0x24>

08002e6c <_sbrk_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	4d06      	ldr	r5, [pc, #24]	; (8002e88 <_sbrk_r+0x1c>)
 8002e70:	2300      	movs	r3, #0
 8002e72:	4604      	mov	r4, r0
 8002e74:	4608      	mov	r0, r1
 8002e76:	602b      	str	r3, [r5, #0]
 8002e78:	f7ff fb2c 	bl	80024d4 <_sbrk>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	d102      	bne.n	8002e86 <_sbrk_r+0x1a>
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	b103      	cbz	r3, 8002e86 <_sbrk_r+0x1a>
 8002e84:	6023      	str	r3, [r4, #0]
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
 8002e88:	20000334 	.word	0x20000334

08002e8c <memcpy>:
 8002e8c:	440a      	add	r2, r1
 8002e8e:	4291      	cmp	r1, r2
 8002e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e94:	d100      	bne.n	8002e98 <memcpy+0xc>
 8002e96:	4770      	bx	lr
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ea2:	4291      	cmp	r1, r2
 8002ea4:	d1f9      	bne.n	8002e9a <memcpy+0xe>
 8002ea6:	bd10      	pop	{r4, pc}

08002ea8 <_realloc_r>:
 8002ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eac:	4680      	mov	r8, r0
 8002eae:	4614      	mov	r4, r2
 8002eb0:	460e      	mov	r6, r1
 8002eb2:	b921      	cbnz	r1, 8002ebe <_realloc_r+0x16>
 8002eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb8:	4611      	mov	r1, r2
 8002eba:	f7ff bc49 	b.w	8002750 <_malloc_r>
 8002ebe:	b92a      	cbnz	r2, 8002ecc <_realloc_r+0x24>
 8002ec0:	f7ff fbda 	bl	8002678 <_free_r>
 8002ec4:	4625      	mov	r5, r4
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ecc:	f000 f81b 	bl	8002f06 <_malloc_usable_size_r>
 8002ed0:	4284      	cmp	r4, r0
 8002ed2:	4607      	mov	r7, r0
 8002ed4:	d802      	bhi.n	8002edc <_realloc_r+0x34>
 8002ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002eda:	d812      	bhi.n	8002f02 <_realloc_r+0x5a>
 8002edc:	4621      	mov	r1, r4
 8002ede:	4640      	mov	r0, r8
 8002ee0:	f7ff fc36 	bl	8002750 <_malloc_r>
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d0ed      	beq.n	8002ec6 <_realloc_r+0x1e>
 8002eea:	42bc      	cmp	r4, r7
 8002eec:	4622      	mov	r2, r4
 8002eee:	4631      	mov	r1, r6
 8002ef0:	bf28      	it	cs
 8002ef2:	463a      	movcs	r2, r7
 8002ef4:	f7ff ffca 	bl	8002e8c <memcpy>
 8002ef8:	4631      	mov	r1, r6
 8002efa:	4640      	mov	r0, r8
 8002efc:	f7ff fbbc 	bl	8002678 <_free_r>
 8002f00:	e7e1      	b.n	8002ec6 <_realloc_r+0x1e>
 8002f02:	4635      	mov	r5, r6
 8002f04:	e7df      	b.n	8002ec6 <_realloc_r+0x1e>

08002f06 <_malloc_usable_size_r>:
 8002f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f0a:	1f18      	subs	r0, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bfbc      	itt	lt
 8002f10:	580b      	ldrlt	r3, [r1, r0]
 8002f12:	18c0      	addlt	r0, r0, r3
 8002f14:	4770      	bx	lr
	...

08002f18 <pow>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	ed2d 8b02 	vpush	{d8}
 8002f1e:	eeb0 8a40 	vmov.f32	s16, s0
 8002f22:	eef0 8a60 	vmov.f32	s17, s1
 8002f26:	ec55 4b11 	vmov	r4, r5, d1
 8002f2a:	f000 f871 	bl	8003010 <__ieee754_pow>
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	4620      	mov	r0, r4
 8002f34:	4629      	mov	r1, r5
 8002f36:	ec57 6b10 	vmov	r6, r7, d0
 8002f3a:	f7fd fdff 	bl	8000b3c <__aeabi_dcmpun>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d13b      	bne.n	8002fba <pow+0xa2>
 8002f42:	ec51 0b18 	vmov	r0, r1, d8
 8002f46:	2200      	movs	r2, #0
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f7fd fdc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f4e:	b1b8      	cbz	r0, 8002f80 <pow+0x68>
 8002f50:	2200      	movs	r2, #0
 8002f52:	2300      	movs	r3, #0
 8002f54:	4620      	mov	r0, r4
 8002f56:	4629      	mov	r1, r5
 8002f58:	f7fd fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d146      	bne.n	8002fee <pow+0xd6>
 8002f60:	ec45 4b10 	vmov	d0, r4, r5
 8002f64:	f000 f848 	bl	8002ff8 <finite>
 8002f68:	b338      	cbz	r0, 8002fba <pow+0xa2>
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4629      	mov	r1, r5
 8002f72:	f7fd fdbb 	bl	8000aec <__aeabi_dcmplt>
 8002f76:	b300      	cbz	r0, 8002fba <pow+0xa2>
 8002f78:	f7ff fb52 	bl	8002620 <__errno>
 8002f7c:	2322      	movs	r3, #34	; 0x22
 8002f7e:	e01b      	b.n	8002fb8 <pow+0xa0>
 8002f80:	ec47 6b10 	vmov	d0, r6, r7
 8002f84:	f000 f838 	bl	8002ff8 <finite>
 8002f88:	b9e0      	cbnz	r0, 8002fc4 <pow+0xac>
 8002f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8002f8e:	eef0 0a68 	vmov.f32	s1, s17
 8002f92:	f000 f831 	bl	8002ff8 <finite>
 8002f96:	b1a8      	cbz	r0, 8002fc4 <pow+0xac>
 8002f98:	ec45 4b10 	vmov	d0, r4, r5
 8002f9c:	f000 f82c 	bl	8002ff8 <finite>
 8002fa0:	b180      	cbz	r0, 8002fc4 <pow+0xac>
 8002fa2:	4632      	mov	r2, r6
 8002fa4:	463b      	mov	r3, r7
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	4639      	mov	r1, r7
 8002faa:	f7fd fdc7 	bl	8000b3c <__aeabi_dcmpun>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d0e2      	beq.n	8002f78 <pow+0x60>
 8002fb2:	f7ff fb35 	bl	8002620 <__errno>
 8002fb6:	2321      	movs	r3, #33	; 0x21
 8002fb8:	6003      	str	r3, [r0, #0]
 8002fba:	ecbd 8b02 	vpop	{d8}
 8002fbe:	ec47 6b10 	vmov	d0, r6, r7
 8002fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	4630      	mov	r0, r6
 8002fca:	4639      	mov	r1, r7
 8002fcc:	f7fd fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d0f2      	beq.n	8002fba <pow+0xa2>
 8002fd4:	eeb0 0a48 	vmov.f32	s0, s16
 8002fd8:	eef0 0a68 	vmov.f32	s1, s17
 8002fdc:	f000 f80c 	bl	8002ff8 <finite>
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	d0ea      	beq.n	8002fba <pow+0xa2>
 8002fe4:	ec45 4b10 	vmov	d0, r4, r5
 8002fe8:	f000 f806 	bl	8002ff8 <finite>
 8002fec:	e7c3      	b.n	8002f76 <pow+0x5e>
 8002fee:	4f01      	ldr	r7, [pc, #4]	; (8002ff4 <pow+0xdc>)
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	e7e2      	b.n	8002fba <pow+0xa2>
 8002ff4:	3ff00000 	.word	0x3ff00000

08002ff8 <finite>:
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	ed8d 0b00 	vstr	d0, [sp]
 8002ffe:	9801      	ldr	r0, [sp, #4]
 8003000:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003004:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003008:	0fc0      	lsrs	r0, r0, #31
 800300a:	b002      	add	sp, #8
 800300c:	4770      	bx	lr
	...

08003010 <__ieee754_pow>:
 8003010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003014:	ed2d 8b06 	vpush	{d8-d10}
 8003018:	b089      	sub	sp, #36	; 0x24
 800301a:	ed8d 1b00 	vstr	d1, [sp]
 800301e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003022:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003026:	ea58 0102 	orrs.w	r1, r8, r2
 800302a:	ec57 6b10 	vmov	r6, r7, d0
 800302e:	d115      	bne.n	800305c <__ieee754_pow+0x4c>
 8003030:	19b3      	adds	r3, r6, r6
 8003032:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003036:	4152      	adcs	r2, r2
 8003038:	4299      	cmp	r1, r3
 800303a:	4b89      	ldr	r3, [pc, #548]	; (8003260 <__ieee754_pow+0x250>)
 800303c:	4193      	sbcs	r3, r2
 800303e:	f080 84d1 	bcs.w	80039e4 <__ieee754_pow+0x9d4>
 8003042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003046:	4630      	mov	r0, r6
 8003048:	4639      	mov	r1, r7
 800304a:	f7fd f927 	bl	800029c <__adddf3>
 800304e:	ec41 0b10 	vmov	d0, r0, r1
 8003052:	b009      	add	sp, #36	; 0x24
 8003054:	ecbd 8b06 	vpop	{d8-d10}
 8003058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800305c:	4b81      	ldr	r3, [pc, #516]	; (8003264 <__ieee754_pow+0x254>)
 800305e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003062:	429c      	cmp	r4, r3
 8003064:	ee10 aa10 	vmov	sl, s0
 8003068:	463d      	mov	r5, r7
 800306a:	dc06      	bgt.n	800307a <__ieee754_pow+0x6a>
 800306c:	d101      	bne.n	8003072 <__ieee754_pow+0x62>
 800306e:	2e00      	cmp	r6, #0
 8003070:	d1e7      	bne.n	8003042 <__ieee754_pow+0x32>
 8003072:	4598      	cmp	r8, r3
 8003074:	dc01      	bgt.n	800307a <__ieee754_pow+0x6a>
 8003076:	d10f      	bne.n	8003098 <__ieee754_pow+0x88>
 8003078:	b172      	cbz	r2, 8003098 <__ieee754_pow+0x88>
 800307a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800307e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003082:	ea55 050a 	orrs.w	r5, r5, sl
 8003086:	d1dc      	bne.n	8003042 <__ieee754_pow+0x32>
 8003088:	e9dd 3200 	ldrd	r3, r2, [sp]
 800308c:	18db      	adds	r3, r3, r3
 800308e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003092:	4152      	adcs	r2, r2
 8003094:	429d      	cmp	r5, r3
 8003096:	e7d0      	b.n	800303a <__ieee754_pow+0x2a>
 8003098:	2d00      	cmp	r5, #0
 800309a:	da3b      	bge.n	8003114 <__ieee754_pow+0x104>
 800309c:	4b72      	ldr	r3, [pc, #456]	; (8003268 <__ieee754_pow+0x258>)
 800309e:	4598      	cmp	r8, r3
 80030a0:	dc51      	bgt.n	8003146 <__ieee754_pow+0x136>
 80030a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80030a6:	4598      	cmp	r8, r3
 80030a8:	f340 84ab 	ble.w	8003a02 <__ieee754_pow+0x9f2>
 80030ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 80030b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80030b4:	2b14      	cmp	r3, #20
 80030b6:	dd0f      	ble.n	80030d8 <__ieee754_pow+0xc8>
 80030b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80030bc:	fa22 f103 	lsr.w	r1, r2, r3
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	4293      	cmp	r3, r2
 80030c6:	f040 849c 	bne.w	8003a02 <__ieee754_pow+0x9f2>
 80030ca:	f001 0101 	and.w	r1, r1, #1
 80030ce:	f1c1 0302 	rsb	r3, r1, #2
 80030d2:	9304      	str	r3, [sp, #16]
 80030d4:	b182      	cbz	r2, 80030f8 <__ieee754_pow+0xe8>
 80030d6:	e05f      	b.n	8003198 <__ieee754_pow+0x188>
 80030d8:	2a00      	cmp	r2, #0
 80030da:	d15b      	bne.n	8003194 <__ieee754_pow+0x184>
 80030dc:	f1c3 0314 	rsb	r3, r3, #20
 80030e0:	fa48 f103 	asr.w	r1, r8, r3
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	4543      	cmp	r3, r8
 80030ea:	f040 8487 	bne.w	80039fc <__ieee754_pow+0x9ec>
 80030ee:	f001 0101 	and.w	r1, r1, #1
 80030f2:	f1c1 0302 	rsb	r3, r1, #2
 80030f6:	9304      	str	r3, [sp, #16]
 80030f8:	4b5c      	ldr	r3, [pc, #368]	; (800326c <__ieee754_pow+0x25c>)
 80030fa:	4598      	cmp	r8, r3
 80030fc:	d132      	bne.n	8003164 <__ieee754_pow+0x154>
 80030fe:	f1b9 0f00 	cmp.w	r9, #0
 8003102:	f280 8477 	bge.w	80039f4 <__ieee754_pow+0x9e4>
 8003106:	4959      	ldr	r1, [pc, #356]	; (800326c <__ieee754_pow+0x25c>)
 8003108:	4632      	mov	r2, r6
 800310a:	463b      	mov	r3, r7
 800310c:	2000      	movs	r0, #0
 800310e:	f7fd fba5 	bl	800085c <__aeabi_ddiv>
 8003112:	e79c      	b.n	800304e <__ieee754_pow+0x3e>
 8003114:	2300      	movs	r3, #0
 8003116:	9304      	str	r3, [sp, #16]
 8003118:	2a00      	cmp	r2, #0
 800311a:	d13d      	bne.n	8003198 <__ieee754_pow+0x188>
 800311c:	4b51      	ldr	r3, [pc, #324]	; (8003264 <__ieee754_pow+0x254>)
 800311e:	4598      	cmp	r8, r3
 8003120:	d1ea      	bne.n	80030f8 <__ieee754_pow+0xe8>
 8003122:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003126:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800312a:	ea53 030a 	orrs.w	r3, r3, sl
 800312e:	f000 8459 	beq.w	80039e4 <__ieee754_pow+0x9d4>
 8003132:	4b4f      	ldr	r3, [pc, #316]	; (8003270 <__ieee754_pow+0x260>)
 8003134:	429c      	cmp	r4, r3
 8003136:	dd08      	ble.n	800314a <__ieee754_pow+0x13a>
 8003138:	f1b9 0f00 	cmp.w	r9, #0
 800313c:	f2c0 8456 	blt.w	80039ec <__ieee754_pow+0x9dc>
 8003140:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003144:	e783      	b.n	800304e <__ieee754_pow+0x3e>
 8003146:	2302      	movs	r3, #2
 8003148:	e7e5      	b.n	8003116 <__ieee754_pow+0x106>
 800314a:	f1b9 0f00 	cmp.w	r9, #0
 800314e:	f04f 0000 	mov.w	r0, #0
 8003152:	f04f 0100 	mov.w	r1, #0
 8003156:	f6bf af7a 	bge.w	800304e <__ieee754_pow+0x3e>
 800315a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800315e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003162:	e774      	b.n	800304e <__ieee754_pow+0x3e>
 8003164:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003168:	d106      	bne.n	8003178 <__ieee754_pow+0x168>
 800316a:	4632      	mov	r2, r6
 800316c:	463b      	mov	r3, r7
 800316e:	4630      	mov	r0, r6
 8003170:	4639      	mov	r1, r7
 8003172:	f7fd fa49 	bl	8000608 <__aeabi_dmul>
 8003176:	e76a      	b.n	800304e <__ieee754_pow+0x3e>
 8003178:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <__ieee754_pow+0x264>)
 800317a:	4599      	cmp	r9, r3
 800317c:	d10c      	bne.n	8003198 <__ieee754_pow+0x188>
 800317e:	2d00      	cmp	r5, #0
 8003180:	db0a      	blt.n	8003198 <__ieee754_pow+0x188>
 8003182:	ec47 6b10 	vmov	d0, r6, r7
 8003186:	b009      	add	sp, #36	; 0x24
 8003188:	ecbd 8b06 	vpop	{d8-d10}
 800318c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003190:	f000 bd20 	b.w	8003bd4 <__ieee754_sqrt>
 8003194:	2300      	movs	r3, #0
 8003196:	9304      	str	r3, [sp, #16]
 8003198:	ec47 6b10 	vmov	d0, r6, r7
 800319c:	f000 fc62 	bl	8003a64 <fabs>
 80031a0:	ec51 0b10 	vmov	r0, r1, d0
 80031a4:	f1ba 0f00 	cmp.w	sl, #0
 80031a8:	d129      	bne.n	80031fe <__ieee754_pow+0x1ee>
 80031aa:	b124      	cbz	r4, 80031b6 <__ieee754_pow+0x1a6>
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <__ieee754_pow+0x25c>)
 80031ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d123      	bne.n	80031fe <__ieee754_pow+0x1ee>
 80031b6:	f1b9 0f00 	cmp.w	r9, #0
 80031ba:	da05      	bge.n	80031c8 <__ieee754_pow+0x1b8>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	2000      	movs	r0, #0
 80031c2:	492a      	ldr	r1, [pc, #168]	; (800326c <__ieee754_pow+0x25c>)
 80031c4:	f7fd fb4a 	bl	800085c <__aeabi_ddiv>
 80031c8:	2d00      	cmp	r5, #0
 80031ca:	f6bf af40 	bge.w	800304e <__ieee754_pow+0x3e>
 80031ce:	9b04      	ldr	r3, [sp, #16]
 80031d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80031d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80031d8:	431c      	orrs	r4, r3
 80031da:	d108      	bne.n	80031ee <__ieee754_pow+0x1de>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd f858 	bl	8000298 <__aeabi_dsub>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	e78f      	b.n	800310e <__ieee754_pow+0xfe>
 80031ee:	9b04      	ldr	r3, [sp, #16]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f47f af2c 	bne.w	800304e <__ieee754_pow+0x3e>
 80031f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80031fa:	4619      	mov	r1, r3
 80031fc:	e727      	b.n	800304e <__ieee754_pow+0x3e>
 80031fe:	0feb      	lsrs	r3, r5, #31
 8003200:	3b01      	subs	r3, #1
 8003202:	9306      	str	r3, [sp, #24]
 8003204:	9a06      	ldr	r2, [sp, #24]
 8003206:	9b04      	ldr	r3, [sp, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	d102      	bne.n	8003212 <__ieee754_pow+0x202>
 800320c:	4632      	mov	r2, r6
 800320e:	463b      	mov	r3, r7
 8003210:	e7e6      	b.n	80031e0 <__ieee754_pow+0x1d0>
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <__ieee754_pow+0x268>)
 8003214:	4598      	cmp	r8, r3
 8003216:	f340 80fb 	ble.w	8003410 <__ieee754_pow+0x400>
 800321a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800321e:	4598      	cmp	r8, r3
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <__ieee754_pow+0x260>)
 8003222:	dd0c      	ble.n	800323e <__ieee754_pow+0x22e>
 8003224:	429c      	cmp	r4, r3
 8003226:	dc0f      	bgt.n	8003248 <__ieee754_pow+0x238>
 8003228:	f1b9 0f00 	cmp.w	r9, #0
 800322c:	da0f      	bge.n	800324e <__ieee754_pow+0x23e>
 800322e:	2000      	movs	r0, #0
 8003230:	b009      	add	sp, #36	; 0x24
 8003232:	ecbd 8b06 	vpop	{d8-d10}
 8003236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323a:	f000 bcc2 	b.w	8003bc2 <__math_oflow>
 800323e:	429c      	cmp	r4, r3
 8003240:	dbf2      	blt.n	8003228 <__ieee754_pow+0x218>
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <__ieee754_pow+0x25c>)
 8003244:	429c      	cmp	r4, r3
 8003246:	dd19      	ble.n	800327c <__ieee754_pow+0x26c>
 8003248:	f1b9 0f00 	cmp.w	r9, #0
 800324c:	dcef      	bgt.n	800322e <__ieee754_pow+0x21e>
 800324e:	2000      	movs	r0, #0
 8003250:	b009      	add	sp, #36	; 0x24
 8003252:	ecbd 8b06 	vpop	{d8-d10}
 8003256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325a:	f000 bca9 	b.w	8003bb0 <__math_uflow>
 800325e:	bf00      	nop
 8003260:	fff00000 	.word	0xfff00000
 8003264:	7ff00000 	.word	0x7ff00000
 8003268:	433fffff 	.word	0x433fffff
 800326c:	3ff00000 	.word	0x3ff00000
 8003270:	3fefffff 	.word	0x3fefffff
 8003274:	3fe00000 	.word	0x3fe00000
 8003278:	41e00000 	.word	0x41e00000
 800327c:	4b60      	ldr	r3, [pc, #384]	; (8003400 <__ieee754_pow+0x3f0>)
 800327e:	2200      	movs	r2, #0
 8003280:	f7fd f80a 	bl	8000298 <__aeabi_dsub>
 8003284:	a354      	add	r3, pc, #336	; (adr r3, 80033d8 <__ieee754_pow+0x3c8>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	4604      	mov	r4, r0
 800328c:	460d      	mov	r5, r1
 800328e:	f7fd f9bb 	bl	8000608 <__aeabi_dmul>
 8003292:	a353      	add	r3, pc, #332	; (adr r3, 80033e0 <__ieee754_pow+0x3d0>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	4606      	mov	r6, r0
 800329a:	460f      	mov	r7, r1
 800329c:	4620      	mov	r0, r4
 800329e:	4629      	mov	r1, r5
 80032a0:	f7fd f9b2 	bl	8000608 <__aeabi_dmul>
 80032a4:	4b57      	ldr	r3, [pc, #348]	; (8003404 <__ieee754_pow+0x3f4>)
 80032a6:	4682      	mov	sl, r0
 80032a8:	468b      	mov	fp, r1
 80032aa:	2200      	movs	r2, #0
 80032ac:	4620      	mov	r0, r4
 80032ae:	4629      	mov	r1, r5
 80032b0:	f7fd f9aa 	bl	8000608 <__aeabi_dmul>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	a14b      	add	r1, pc, #300	; (adr r1, 80033e8 <__ieee754_pow+0x3d8>)
 80032ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032be:	f7fc ffeb 	bl	8000298 <__aeabi_dsub>
 80032c2:	4622      	mov	r2, r4
 80032c4:	462b      	mov	r3, r5
 80032c6:	f7fd f99f 	bl	8000608 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	2000      	movs	r0, #0
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <__ieee754_pow+0x3f8>)
 80032d2:	f7fc ffe1 	bl	8000298 <__aeabi_dsub>
 80032d6:	4622      	mov	r2, r4
 80032d8:	4680      	mov	r8, r0
 80032da:	4689      	mov	r9, r1
 80032dc:	462b      	mov	r3, r5
 80032de:	4620      	mov	r0, r4
 80032e0:	4629      	mov	r1, r5
 80032e2:	f7fd f991 	bl	8000608 <__aeabi_dmul>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4640      	mov	r0, r8
 80032ec:	4649      	mov	r1, r9
 80032ee:	f7fd f98b 	bl	8000608 <__aeabi_dmul>
 80032f2:	a33f      	add	r3, pc, #252	; (adr r3, 80033f0 <__ieee754_pow+0x3e0>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd f986 	bl	8000608 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4650      	mov	r0, sl
 8003302:	4659      	mov	r1, fp
 8003304:	f7fc ffc8 	bl	8000298 <__aeabi_dsub>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4680      	mov	r8, r0
 800330e:	4689      	mov	r9, r1
 8003310:	4630      	mov	r0, r6
 8003312:	4639      	mov	r1, r7
 8003314:	f7fc ffc2 	bl	800029c <__adddf3>
 8003318:	2000      	movs	r0, #0
 800331a:	4632      	mov	r2, r6
 800331c:	463b      	mov	r3, r7
 800331e:	4604      	mov	r4, r0
 8003320:	460d      	mov	r5, r1
 8003322:	f7fc ffb9 	bl	8000298 <__aeabi_dsub>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4640      	mov	r0, r8
 800332c:	4649      	mov	r1, r9
 800332e:	f7fc ffb3 	bl	8000298 <__aeabi_dsub>
 8003332:	9b04      	ldr	r3, [sp, #16]
 8003334:	9a06      	ldr	r2, [sp, #24]
 8003336:	3b01      	subs	r3, #1
 8003338:	4313      	orrs	r3, r2
 800333a:	4682      	mov	sl, r0
 800333c:	468b      	mov	fp, r1
 800333e:	f040 81e7 	bne.w	8003710 <__ieee754_pow+0x700>
 8003342:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80033f8 <__ieee754_pow+0x3e8>
 8003346:	eeb0 8a47 	vmov.f32	s16, s14
 800334a:	eef0 8a67 	vmov.f32	s17, s15
 800334e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003352:	2600      	movs	r6, #0
 8003354:	4632      	mov	r2, r6
 8003356:	463b      	mov	r3, r7
 8003358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800335c:	f7fc ff9c 	bl	8000298 <__aeabi_dsub>
 8003360:	4622      	mov	r2, r4
 8003362:	462b      	mov	r3, r5
 8003364:	f7fd f950 	bl	8000608 <__aeabi_dmul>
 8003368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800336c:	4680      	mov	r8, r0
 800336e:	4689      	mov	r9, r1
 8003370:	4650      	mov	r0, sl
 8003372:	4659      	mov	r1, fp
 8003374:	f7fd f948 	bl	8000608 <__aeabi_dmul>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4640      	mov	r0, r8
 800337e:	4649      	mov	r1, r9
 8003380:	f7fc ff8c 	bl	800029c <__adddf3>
 8003384:	4632      	mov	r2, r6
 8003386:	463b      	mov	r3, r7
 8003388:	4680      	mov	r8, r0
 800338a:	4689      	mov	r9, r1
 800338c:	4620      	mov	r0, r4
 800338e:	4629      	mov	r1, r5
 8003390:	f7fd f93a 	bl	8000608 <__aeabi_dmul>
 8003394:	460b      	mov	r3, r1
 8003396:	4604      	mov	r4, r0
 8003398:	460d      	mov	r5, r1
 800339a:	4602      	mov	r2, r0
 800339c:	4649      	mov	r1, r9
 800339e:	4640      	mov	r0, r8
 80033a0:	f7fc ff7c 	bl	800029c <__adddf3>
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <__ieee754_pow+0x3fc>)
 80033a6:	4299      	cmp	r1, r3
 80033a8:	ec45 4b19 	vmov	d9, r4, r5
 80033ac:	4606      	mov	r6, r0
 80033ae:	460f      	mov	r7, r1
 80033b0:	468b      	mov	fp, r1
 80033b2:	f340 82f0 	ble.w	8003996 <__ieee754_pow+0x986>
 80033b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80033ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80033be:	4303      	orrs	r3, r0
 80033c0:	f000 81e4 	beq.w	800378c <__ieee754_pow+0x77c>
 80033c4:	ec51 0b18 	vmov	r0, r1, d8
 80033c8:	2200      	movs	r2, #0
 80033ca:	2300      	movs	r3, #0
 80033cc:	f7fd fb8e 	bl	8000aec <__aeabi_dcmplt>
 80033d0:	3800      	subs	r0, #0
 80033d2:	bf18      	it	ne
 80033d4:	2001      	movne	r0, #1
 80033d6:	e72b      	b.n	8003230 <__ieee754_pow+0x220>
 80033d8:	60000000 	.word	0x60000000
 80033dc:	3ff71547 	.word	0x3ff71547
 80033e0:	f85ddf44 	.word	0xf85ddf44
 80033e4:	3e54ae0b 	.word	0x3e54ae0b
 80033e8:	55555555 	.word	0x55555555
 80033ec:	3fd55555 	.word	0x3fd55555
 80033f0:	652b82fe 	.word	0x652b82fe
 80033f4:	3ff71547 	.word	0x3ff71547
 80033f8:	00000000 	.word	0x00000000
 80033fc:	bff00000 	.word	0xbff00000
 8003400:	3ff00000 	.word	0x3ff00000
 8003404:	3fd00000 	.word	0x3fd00000
 8003408:	3fe00000 	.word	0x3fe00000
 800340c:	408fffff 	.word	0x408fffff
 8003410:	4bd5      	ldr	r3, [pc, #852]	; (8003768 <__ieee754_pow+0x758>)
 8003412:	402b      	ands	r3, r5
 8003414:	2200      	movs	r2, #0
 8003416:	b92b      	cbnz	r3, 8003424 <__ieee754_pow+0x414>
 8003418:	4bd4      	ldr	r3, [pc, #848]	; (800376c <__ieee754_pow+0x75c>)
 800341a:	f7fd f8f5 	bl	8000608 <__aeabi_dmul>
 800341e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003422:	460c      	mov	r4, r1
 8003424:	1523      	asrs	r3, r4, #20
 8003426:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800342a:	4413      	add	r3, r2
 800342c:	9305      	str	r3, [sp, #20]
 800342e:	4bd0      	ldr	r3, [pc, #832]	; (8003770 <__ieee754_pow+0x760>)
 8003430:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003434:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003438:	429c      	cmp	r4, r3
 800343a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800343e:	dd08      	ble.n	8003452 <__ieee754_pow+0x442>
 8003440:	4bcc      	ldr	r3, [pc, #816]	; (8003774 <__ieee754_pow+0x764>)
 8003442:	429c      	cmp	r4, r3
 8003444:	f340 8162 	ble.w	800370c <__ieee754_pow+0x6fc>
 8003448:	9b05      	ldr	r3, [sp, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	9305      	str	r3, [sp, #20]
 800344e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003452:	2400      	movs	r4, #0
 8003454:	00e3      	lsls	r3, r4, #3
 8003456:	9307      	str	r3, [sp, #28]
 8003458:	4bc7      	ldr	r3, [pc, #796]	; (8003778 <__ieee754_pow+0x768>)
 800345a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800345e:	ed93 7b00 	vldr	d7, [r3]
 8003462:	4629      	mov	r1, r5
 8003464:	ec53 2b17 	vmov	r2, r3, d7
 8003468:	eeb0 9a47 	vmov.f32	s18, s14
 800346c:	eef0 9a67 	vmov.f32	s19, s15
 8003470:	4682      	mov	sl, r0
 8003472:	f7fc ff11 	bl	8000298 <__aeabi_dsub>
 8003476:	4652      	mov	r2, sl
 8003478:	4606      	mov	r6, r0
 800347a:	460f      	mov	r7, r1
 800347c:	462b      	mov	r3, r5
 800347e:	ec51 0b19 	vmov	r0, r1, d9
 8003482:	f7fc ff0b 	bl	800029c <__adddf3>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	2000      	movs	r0, #0
 800348c:	49bb      	ldr	r1, [pc, #748]	; (800377c <__ieee754_pow+0x76c>)
 800348e:	f7fd f9e5 	bl	800085c <__aeabi_ddiv>
 8003492:	ec41 0b1a 	vmov	d10, r0, r1
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4630      	mov	r0, r6
 800349c:	4639      	mov	r1, r7
 800349e:	f7fd f8b3 	bl	8000608 <__aeabi_dmul>
 80034a2:	2300      	movs	r3, #0
 80034a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034a8:	9302      	str	r3, [sp, #8]
 80034aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80034ae:	46ab      	mov	fp, r5
 80034b0:	106d      	asrs	r5, r5, #1
 80034b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80034b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80034ba:	ec41 0b18 	vmov	d8, r0, r1
 80034be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80034c2:	2200      	movs	r2, #0
 80034c4:	4640      	mov	r0, r8
 80034c6:	4649      	mov	r1, r9
 80034c8:	4614      	mov	r4, r2
 80034ca:	461d      	mov	r5, r3
 80034cc:	f7fd f89c 	bl	8000608 <__aeabi_dmul>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4630      	mov	r0, r6
 80034d6:	4639      	mov	r1, r7
 80034d8:	f7fc fede 	bl	8000298 <__aeabi_dsub>
 80034dc:	ec53 2b19 	vmov	r2, r3, d9
 80034e0:	4606      	mov	r6, r0
 80034e2:	460f      	mov	r7, r1
 80034e4:	4620      	mov	r0, r4
 80034e6:	4629      	mov	r1, r5
 80034e8:	f7fc fed6 	bl	8000298 <__aeabi_dsub>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4650      	mov	r0, sl
 80034f2:	4659      	mov	r1, fp
 80034f4:	f7fc fed0 	bl	8000298 <__aeabi_dsub>
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	f7fd f884 	bl	8000608 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4630      	mov	r0, r6
 8003506:	4639      	mov	r1, r7
 8003508:	f7fc fec6 	bl	8000298 <__aeabi_dsub>
 800350c:	ec53 2b1a 	vmov	r2, r3, d10
 8003510:	f7fd f87a 	bl	8000608 <__aeabi_dmul>
 8003514:	ec53 2b18 	vmov	r2, r3, d8
 8003518:	ec41 0b19 	vmov	d9, r0, r1
 800351c:	ec51 0b18 	vmov	r0, r1, d8
 8003520:	f7fd f872 	bl	8000608 <__aeabi_dmul>
 8003524:	a37c      	add	r3, pc, #496	; (adr r3, 8003718 <__ieee754_pow+0x708>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	4604      	mov	r4, r0
 800352c:	460d      	mov	r5, r1
 800352e:	f7fd f86b 	bl	8000608 <__aeabi_dmul>
 8003532:	a37b      	add	r3, pc, #492	; (adr r3, 8003720 <__ieee754_pow+0x710>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fc feb0 	bl	800029c <__adddf3>
 800353c:	4622      	mov	r2, r4
 800353e:	462b      	mov	r3, r5
 8003540:	f7fd f862 	bl	8000608 <__aeabi_dmul>
 8003544:	a378      	add	r3, pc, #480	; (adr r3, 8003728 <__ieee754_pow+0x718>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f7fc fea7 	bl	800029c <__adddf3>
 800354e:	4622      	mov	r2, r4
 8003550:	462b      	mov	r3, r5
 8003552:	f7fd f859 	bl	8000608 <__aeabi_dmul>
 8003556:	a376      	add	r3, pc, #472	; (adr r3, 8003730 <__ieee754_pow+0x720>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fc fe9e 	bl	800029c <__adddf3>
 8003560:	4622      	mov	r2, r4
 8003562:	462b      	mov	r3, r5
 8003564:	f7fd f850 	bl	8000608 <__aeabi_dmul>
 8003568:	a373      	add	r3, pc, #460	; (adr r3, 8003738 <__ieee754_pow+0x728>)
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f7fc fe95 	bl	800029c <__adddf3>
 8003572:	4622      	mov	r2, r4
 8003574:	462b      	mov	r3, r5
 8003576:	f7fd f847 	bl	8000608 <__aeabi_dmul>
 800357a:	a371      	add	r3, pc, #452	; (adr r3, 8003740 <__ieee754_pow+0x730>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fc fe8c 	bl	800029c <__adddf3>
 8003584:	4622      	mov	r2, r4
 8003586:	4606      	mov	r6, r0
 8003588:	460f      	mov	r7, r1
 800358a:	462b      	mov	r3, r5
 800358c:	4620      	mov	r0, r4
 800358e:	4629      	mov	r1, r5
 8003590:	f7fd f83a 	bl	8000608 <__aeabi_dmul>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4630      	mov	r0, r6
 800359a:	4639      	mov	r1, r7
 800359c:	f7fd f834 	bl	8000608 <__aeabi_dmul>
 80035a0:	4642      	mov	r2, r8
 80035a2:	4604      	mov	r4, r0
 80035a4:	460d      	mov	r5, r1
 80035a6:	464b      	mov	r3, r9
 80035a8:	ec51 0b18 	vmov	r0, r1, d8
 80035ac:	f7fc fe76 	bl	800029c <__adddf3>
 80035b0:	ec53 2b19 	vmov	r2, r3, d9
 80035b4:	f7fd f828 	bl	8000608 <__aeabi_dmul>
 80035b8:	4622      	mov	r2, r4
 80035ba:	462b      	mov	r3, r5
 80035bc:	f7fc fe6e 	bl	800029c <__adddf3>
 80035c0:	4642      	mov	r2, r8
 80035c2:	4682      	mov	sl, r0
 80035c4:	468b      	mov	fp, r1
 80035c6:	464b      	mov	r3, r9
 80035c8:	4640      	mov	r0, r8
 80035ca:	4649      	mov	r1, r9
 80035cc:	f7fd f81c 	bl	8000608 <__aeabi_dmul>
 80035d0:	4b6b      	ldr	r3, [pc, #428]	; (8003780 <__ieee754_pow+0x770>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	4606      	mov	r6, r0
 80035d6:	460f      	mov	r7, r1
 80035d8:	f7fc fe60 	bl	800029c <__adddf3>
 80035dc:	4652      	mov	r2, sl
 80035de:	465b      	mov	r3, fp
 80035e0:	f7fc fe5c 	bl	800029c <__adddf3>
 80035e4:	2000      	movs	r0, #0
 80035e6:	4604      	mov	r4, r0
 80035e8:	460d      	mov	r5, r1
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4640      	mov	r0, r8
 80035f0:	4649      	mov	r1, r9
 80035f2:	f7fd f809 	bl	8000608 <__aeabi_dmul>
 80035f6:	4b62      	ldr	r3, [pc, #392]	; (8003780 <__ieee754_pow+0x770>)
 80035f8:	4680      	mov	r8, r0
 80035fa:	4689      	mov	r9, r1
 80035fc:	2200      	movs	r2, #0
 80035fe:	4620      	mov	r0, r4
 8003600:	4629      	mov	r1, r5
 8003602:	f7fc fe49 	bl	8000298 <__aeabi_dsub>
 8003606:	4632      	mov	r2, r6
 8003608:	463b      	mov	r3, r7
 800360a:	f7fc fe45 	bl	8000298 <__aeabi_dsub>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4650      	mov	r0, sl
 8003614:	4659      	mov	r1, fp
 8003616:	f7fc fe3f 	bl	8000298 <__aeabi_dsub>
 800361a:	ec53 2b18 	vmov	r2, r3, d8
 800361e:	f7fc fff3 	bl	8000608 <__aeabi_dmul>
 8003622:	4622      	mov	r2, r4
 8003624:	4606      	mov	r6, r0
 8003626:	460f      	mov	r7, r1
 8003628:	462b      	mov	r3, r5
 800362a:	ec51 0b19 	vmov	r0, r1, d9
 800362e:	f7fc ffeb 	bl	8000608 <__aeabi_dmul>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4630      	mov	r0, r6
 8003638:	4639      	mov	r1, r7
 800363a:	f7fc fe2f 	bl	800029c <__adddf3>
 800363e:	4606      	mov	r6, r0
 8003640:	460f      	mov	r7, r1
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4640      	mov	r0, r8
 8003648:	4649      	mov	r1, r9
 800364a:	f7fc fe27 	bl	800029c <__adddf3>
 800364e:	a33e      	add	r3, pc, #248	; (adr r3, 8003748 <__ieee754_pow+0x738>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	2000      	movs	r0, #0
 8003656:	4604      	mov	r4, r0
 8003658:	460d      	mov	r5, r1
 800365a:	f7fc ffd5 	bl	8000608 <__aeabi_dmul>
 800365e:	4642      	mov	r2, r8
 8003660:	ec41 0b18 	vmov	d8, r0, r1
 8003664:	464b      	mov	r3, r9
 8003666:	4620      	mov	r0, r4
 8003668:	4629      	mov	r1, r5
 800366a:	f7fc fe15 	bl	8000298 <__aeabi_dsub>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4630      	mov	r0, r6
 8003674:	4639      	mov	r1, r7
 8003676:	f7fc fe0f 	bl	8000298 <__aeabi_dsub>
 800367a:	a335      	add	r3, pc, #212	; (adr r3, 8003750 <__ieee754_pow+0x740>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fc ffc2 	bl	8000608 <__aeabi_dmul>
 8003684:	a334      	add	r3, pc, #208	; (adr r3, 8003758 <__ieee754_pow+0x748>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	4606      	mov	r6, r0
 800368c:	460f      	mov	r7, r1
 800368e:	4620      	mov	r0, r4
 8003690:	4629      	mov	r1, r5
 8003692:	f7fc ffb9 	bl	8000608 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4630      	mov	r0, r6
 800369c:	4639      	mov	r1, r7
 800369e:	f7fc fdfd 	bl	800029c <__adddf3>
 80036a2:	9a07      	ldr	r2, [sp, #28]
 80036a4:	4b37      	ldr	r3, [pc, #220]	; (8003784 <__ieee754_pow+0x774>)
 80036a6:	4413      	add	r3, r2
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fc fdf6 	bl	800029c <__adddf3>
 80036b0:	4682      	mov	sl, r0
 80036b2:	9805      	ldr	r0, [sp, #20]
 80036b4:	468b      	mov	fp, r1
 80036b6:	f7fc ff3d 	bl	8000534 <__aeabi_i2d>
 80036ba:	9a07      	ldr	r2, [sp, #28]
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <__ieee754_pow+0x778>)
 80036be:	4413      	add	r3, r2
 80036c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036c4:	4606      	mov	r6, r0
 80036c6:	460f      	mov	r7, r1
 80036c8:	4652      	mov	r2, sl
 80036ca:	465b      	mov	r3, fp
 80036cc:	ec51 0b18 	vmov	r0, r1, d8
 80036d0:	f7fc fde4 	bl	800029c <__adddf3>
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	f7fc fde0 	bl	800029c <__adddf3>
 80036dc:	4632      	mov	r2, r6
 80036de:	463b      	mov	r3, r7
 80036e0:	f7fc fddc 	bl	800029c <__adddf3>
 80036e4:	2000      	movs	r0, #0
 80036e6:	4632      	mov	r2, r6
 80036e8:	463b      	mov	r3, r7
 80036ea:	4604      	mov	r4, r0
 80036ec:	460d      	mov	r5, r1
 80036ee:	f7fc fdd3 	bl	8000298 <__aeabi_dsub>
 80036f2:	4642      	mov	r2, r8
 80036f4:	464b      	mov	r3, r9
 80036f6:	f7fc fdcf 	bl	8000298 <__aeabi_dsub>
 80036fa:	ec53 2b18 	vmov	r2, r3, d8
 80036fe:	f7fc fdcb 	bl	8000298 <__aeabi_dsub>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4650      	mov	r0, sl
 8003708:	4659      	mov	r1, fp
 800370a:	e610      	b.n	800332e <__ieee754_pow+0x31e>
 800370c:	2401      	movs	r4, #1
 800370e:	e6a1      	b.n	8003454 <__ieee754_pow+0x444>
 8003710:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8003760 <__ieee754_pow+0x750>
 8003714:	e617      	b.n	8003346 <__ieee754_pow+0x336>
 8003716:	bf00      	nop
 8003718:	4a454eef 	.word	0x4a454eef
 800371c:	3fca7e28 	.word	0x3fca7e28
 8003720:	93c9db65 	.word	0x93c9db65
 8003724:	3fcd864a 	.word	0x3fcd864a
 8003728:	a91d4101 	.word	0xa91d4101
 800372c:	3fd17460 	.word	0x3fd17460
 8003730:	518f264d 	.word	0x518f264d
 8003734:	3fd55555 	.word	0x3fd55555
 8003738:	db6fabff 	.word	0xdb6fabff
 800373c:	3fdb6db6 	.word	0x3fdb6db6
 8003740:	33333303 	.word	0x33333303
 8003744:	3fe33333 	.word	0x3fe33333
 8003748:	e0000000 	.word	0xe0000000
 800374c:	3feec709 	.word	0x3feec709
 8003750:	dc3a03fd 	.word	0xdc3a03fd
 8003754:	3feec709 	.word	0x3feec709
 8003758:	145b01f5 	.word	0x145b01f5
 800375c:	be3e2fe0 	.word	0xbe3e2fe0
 8003760:	00000000 	.word	0x00000000
 8003764:	3ff00000 	.word	0x3ff00000
 8003768:	7ff00000 	.word	0x7ff00000
 800376c:	43400000 	.word	0x43400000
 8003770:	0003988e 	.word	0x0003988e
 8003774:	000bb679 	.word	0x000bb679
 8003778:	08003ec8 	.word	0x08003ec8
 800377c:	3ff00000 	.word	0x3ff00000
 8003780:	40080000 	.word	0x40080000
 8003784:	08003ee8 	.word	0x08003ee8
 8003788:	08003ed8 	.word	0x08003ed8
 800378c:	a3b3      	add	r3, pc, #716	; (adr r3, 8003a5c <__ieee754_pow+0xa4c>)
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	4640      	mov	r0, r8
 8003794:	4649      	mov	r1, r9
 8003796:	f7fc fd81 	bl	800029c <__adddf3>
 800379a:	4622      	mov	r2, r4
 800379c:	ec41 0b1a 	vmov	d10, r0, r1
 80037a0:	462b      	mov	r3, r5
 80037a2:	4630      	mov	r0, r6
 80037a4:	4639      	mov	r1, r7
 80037a6:	f7fc fd77 	bl	8000298 <__aeabi_dsub>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	ec51 0b1a 	vmov	r0, r1, d10
 80037b2:	f7fd f9b9 	bl	8000b28 <__aeabi_dcmpgt>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	f47f ae04 	bne.w	80033c4 <__ieee754_pow+0x3b4>
 80037bc:	4aa2      	ldr	r2, [pc, #648]	; (8003a48 <__ieee754_pow+0xa38>)
 80037be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80037c2:	4293      	cmp	r3, r2
 80037c4:	f340 8107 	ble.w	80039d6 <__ieee754_pow+0x9c6>
 80037c8:	151b      	asrs	r3, r3, #20
 80037ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80037ce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80037d2:	fa4a fa03 	asr.w	sl, sl, r3
 80037d6:	44da      	add	sl, fp
 80037d8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80037dc:	489b      	ldr	r0, [pc, #620]	; (8003a4c <__ieee754_pow+0xa3c>)
 80037de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80037e2:	4108      	asrs	r0, r1
 80037e4:	ea00 030a 	and.w	r3, r0, sl
 80037e8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80037ec:	f1c1 0114 	rsb	r1, r1, #20
 80037f0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80037f4:	fa4a fa01 	asr.w	sl, sl, r1
 80037f8:	f1bb 0f00 	cmp.w	fp, #0
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	4620      	mov	r0, r4
 8003802:	4629      	mov	r1, r5
 8003804:	bfb8      	it	lt
 8003806:	f1ca 0a00 	rsblt	sl, sl, #0
 800380a:	f7fc fd45 	bl	8000298 <__aeabi_dsub>
 800380e:	ec41 0b19 	vmov	d9, r0, r1
 8003812:	4642      	mov	r2, r8
 8003814:	464b      	mov	r3, r9
 8003816:	ec51 0b19 	vmov	r0, r1, d9
 800381a:	f7fc fd3f 	bl	800029c <__adddf3>
 800381e:	a37a      	add	r3, pc, #488	; (adr r3, 8003a08 <__ieee754_pow+0x9f8>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	2000      	movs	r0, #0
 8003826:	4604      	mov	r4, r0
 8003828:	460d      	mov	r5, r1
 800382a:	f7fc feed 	bl	8000608 <__aeabi_dmul>
 800382e:	ec53 2b19 	vmov	r2, r3, d9
 8003832:	4606      	mov	r6, r0
 8003834:	460f      	mov	r7, r1
 8003836:	4620      	mov	r0, r4
 8003838:	4629      	mov	r1, r5
 800383a:	f7fc fd2d 	bl	8000298 <__aeabi_dsub>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4640      	mov	r0, r8
 8003844:	4649      	mov	r1, r9
 8003846:	f7fc fd27 	bl	8000298 <__aeabi_dsub>
 800384a:	a371      	add	r3, pc, #452	; (adr r3, 8003a10 <__ieee754_pow+0xa00>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f7fc feda 	bl	8000608 <__aeabi_dmul>
 8003854:	a370      	add	r3, pc, #448	; (adr r3, 8003a18 <__ieee754_pow+0xa08>)
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	4680      	mov	r8, r0
 800385c:	4689      	mov	r9, r1
 800385e:	4620      	mov	r0, r4
 8003860:	4629      	mov	r1, r5
 8003862:	f7fc fed1 	bl	8000608 <__aeabi_dmul>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4640      	mov	r0, r8
 800386c:	4649      	mov	r1, r9
 800386e:	f7fc fd15 	bl	800029c <__adddf3>
 8003872:	4604      	mov	r4, r0
 8003874:	460d      	mov	r5, r1
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4630      	mov	r0, r6
 800387c:	4639      	mov	r1, r7
 800387e:	f7fc fd0d 	bl	800029c <__adddf3>
 8003882:	4632      	mov	r2, r6
 8003884:	463b      	mov	r3, r7
 8003886:	4680      	mov	r8, r0
 8003888:	4689      	mov	r9, r1
 800388a:	f7fc fd05 	bl	8000298 <__aeabi_dsub>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4620      	mov	r0, r4
 8003894:	4629      	mov	r1, r5
 8003896:	f7fc fcff 	bl	8000298 <__aeabi_dsub>
 800389a:	4642      	mov	r2, r8
 800389c:	4606      	mov	r6, r0
 800389e:	460f      	mov	r7, r1
 80038a0:	464b      	mov	r3, r9
 80038a2:	4640      	mov	r0, r8
 80038a4:	4649      	mov	r1, r9
 80038a6:	f7fc feaf 	bl	8000608 <__aeabi_dmul>
 80038aa:	a35d      	add	r3, pc, #372	; (adr r3, 8003a20 <__ieee754_pow+0xa10>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	4604      	mov	r4, r0
 80038b2:	460d      	mov	r5, r1
 80038b4:	f7fc fea8 	bl	8000608 <__aeabi_dmul>
 80038b8:	a35b      	add	r3, pc, #364	; (adr r3, 8003a28 <__ieee754_pow+0xa18>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f7fc fceb 	bl	8000298 <__aeabi_dsub>
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f7fc fe9f 	bl	8000608 <__aeabi_dmul>
 80038ca:	a359      	add	r3, pc, #356	; (adr r3, 8003a30 <__ieee754_pow+0xa20>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc fce4 	bl	800029c <__adddf3>
 80038d4:	4622      	mov	r2, r4
 80038d6:	462b      	mov	r3, r5
 80038d8:	f7fc fe96 	bl	8000608 <__aeabi_dmul>
 80038dc:	a356      	add	r3, pc, #344	; (adr r3, 8003a38 <__ieee754_pow+0xa28>)
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f7fc fcd9 	bl	8000298 <__aeabi_dsub>
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	f7fc fe8d 	bl	8000608 <__aeabi_dmul>
 80038ee:	a354      	add	r3, pc, #336	; (adr r3, 8003a40 <__ieee754_pow+0xa30>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f7fc fcd2 	bl	800029c <__adddf3>
 80038f8:	4622      	mov	r2, r4
 80038fa:	462b      	mov	r3, r5
 80038fc:	f7fc fe84 	bl	8000608 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4640      	mov	r0, r8
 8003906:	4649      	mov	r1, r9
 8003908:	f7fc fcc6 	bl	8000298 <__aeabi_dsub>
 800390c:	4604      	mov	r4, r0
 800390e:	460d      	mov	r5, r1
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4640      	mov	r0, r8
 8003916:	4649      	mov	r1, r9
 8003918:	f7fc fe76 	bl	8000608 <__aeabi_dmul>
 800391c:	2200      	movs	r2, #0
 800391e:	ec41 0b19 	vmov	d9, r0, r1
 8003922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003926:	4620      	mov	r0, r4
 8003928:	4629      	mov	r1, r5
 800392a:	f7fc fcb5 	bl	8000298 <__aeabi_dsub>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	ec51 0b19 	vmov	r0, r1, d9
 8003936:	f7fc ff91 	bl	800085c <__aeabi_ddiv>
 800393a:	4632      	mov	r2, r6
 800393c:	4604      	mov	r4, r0
 800393e:	460d      	mov	r5, r1
 8003940:	463b      	mov	r3, r7
 8003942:	4640      	mov	r0, r8
 8003944:	4649      	mov	r1, r9
 8003946:	f7fc fe5f 	bl	8000608 <__aeabi_dmul>
 800394a:	4632      	mov	r2, r6
 800394c:	463b      	mov	r3, r7
 800394e:	f7fc fca5 	bl	800029c <__adddf3>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4620      	mov	r0, r4
 8003958:	4629      	mov	r1, r5
 800395a:	f7fc fc9d 	bl	8000298 <__aeabi_dsub>
 800395e:	4642      	mov	r2, r8
 8003960:	464b      	mov	r3, r9
 8003962:	f7fc fc99 	bl	8000298 <__aeabi_dsub>
 8003966:	460b      	mov	r3, r1
 8003968:	4602      	mov	r2, r0
 800396a:	4939      	ldr	r1, [pc, #228]	; (8003a50 <__ieee754_pow+0xa40>)
 800396c:	2000      	movs	r0, #0
 800396e:	f7fc fc93 	bl	8000298 <__aeabi_dsub>
 8003972:	ec41 0b10 	vmov	d0, r0, r1
 8003976:	ee10 3a90 	vmov	r3, s1
 800397a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800397e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003982:	da2b      	bge.n	80039dc <__ieee754_pow+0x9cc>
 8003984:	4650      	mov	r0, sl
 8003986:	f000 f877 	bl	8003a78 <scalbn>
 800398a:	ec51 0b10 	vmov	r0, r1, d0
 800398e:	ec53 2b18 	vmov	r2, r3, d8
 8003992:	f7ff bbee 	b.w	8003172 <__ieee754_pow+0x162>
 8003996:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <__ieee754_pow+0xa44>)
 8003998:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800399c:	429e      	cmp	r6, r3
 800399e:	f77f af0d 	ble.w	80037bc <__ieee754_pow+0x7ac>
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <__ieee754_pow+0xa48>)
 80039a4:	440b      	add	r3, r1
 80039a6:	4303      	orrs	r3, r0
 80039a8:	d009      	beq.n	80039be <__ieee754_pow+0x9ae>
 80039aa:	ec51 0b18 	vmov	r0, r1, d8
 80039ae:	2200      	movs	r2, #0
 80039b0:	2300      	movs	r3, #0
 80039b2:	f7fd f89b 	bl	8000aec <__aeabi_dcmplt>
 80039b6:	3800      	subs	r0, #0
 80039b8:	bf18      	it	ne
 80039ba:	2001      	movne	r0, #1
 80039bc:	e448      	b.n	8003250 <__ieee754_pow+0x240>
 80039be:	4622      	mov	r2, r4
 80039c0:	462b      	mov	r3, r5
 80039c2:	f7fc fc69 	bl	8000298 <__aeabi_dsub>
 80039c6:	4642      	mov	r2, r8
 80039c8:	464b      	mov	r3, r9
 80039ca:	f7fd f8a3 	bl	8000b14 <__aeabi_dcmpge>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	f43f aef4 	beq.w	80037bc <__ieee754_pow+0x7ac>
 80039d4:	e7e9      	b.n	80039aa <__ieee754_pow+0x99a>
 80039d6:	f04f 0a00 	mov.w	sl, #0
 80039da:	e71a      	b.n	8003812 <__ieee754_pow+0x802>
 80039dc:	ec51 0b10 	vmov	r0, r1, d0
 80039e0:	4619      	mov	r1, r3
 80039e2:	e7d4      	b.n	800398e <__ieee754_pow+0x97e>
 80039e4:	491a      	ldr	r1, [pc, #104]	; (8003a50 <__ieee754_pow+0xa40>)
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7ff bb31 	b.w	800304e <__ieee754_pow+0x3e>
 80039ec:	2000      	movs	r0, #0
 80039ee:	2100      	movs	r1, #0
 80039f0:	f7ff bb2d 	b.w	800304e <__ieee754_pow+0x3e>
 80039f4:	4630      	mov	r0, r6
 80039f6:	4639      	mov	r1, r7
 80039f8:	f7ff bb29 	b.w	800304e <__ieee754_pow+0x3e>
 80039fc:	9204      	str	r2, [sp, #16]
 80039fe:	f7ff bb7b 	b.w	80030f8 <__ieee754_pow+0xe8>
 8003a02:	2300      	movs	r3, #0
 8003a04:	f7ff bb65 	b.w	80030d2 <__ieee754_pow+0xc2>
 8003a08:	00000000 	.word	0x00000000
 8003a0c:	3fe62e43 	.word	0x3fe62e43
 8003a10:	fefa39ef 	.word	0xfefa39ef
 8003a14:	3fe62e42 	.word	0x3fe62e42
 8003a18:	0ca86c39 	.word	0x0ca86c39
 8003a1c:	be205c61 	.word	0xbe205c61
 8003a20:	72bea4d0 	.word	0x72bea4d0
 8003a24:	3e663769 	.word	0x3e663769
 8003a28:	c5d26bf1 	.word	0xc5d26bf1
 8003a2c:	3ebbbd41 	.word	0x3ebbbd41
 8003a30:	af25de2c 	.word	0xaf25de2c
 8003a34:	3f11566a 	.word	0x3f11566a
 8003a38:	16bebd93 	.word	0x16bebd93
 8003a3c:	3f66c16c 	.word	0x3f66c16c
 8003a40:	5555553e 	.word	0x5555553e
 8003a44:	3fc55555 	.word	0x3fc55555
 8003a48:	3fe00000 	.word	0x3fe00000
 8003a4c:	fff00000 	.word	0xfff00000
 8003a50:	3ff00000 	.word	0x3ff00000
 8003a54:	4090cbff 	.word	0x4090cbff
 8003a58:	3f6f3400 	.word	0x3f6f3400
 8003a5c:	652b82fe 	.word	0x652b82fe
 8003a60:	3c971547 	.word	0x3c971547

08003a64 <fabs>:
 8003a64:	ec51 0b10 	vmov	r0, r1, d0
 8003a68:	ee10 2a10 	vmov	r2, s0
 8003a6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a70:	ec43 2b10 	vmov	d0, r2, r3
 8003a74:	4770      	bx	lr
	...

08003a78 <scalbn>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	ec55 4b10 	vmov	r4, r5, d0
 8003a7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003a82:	4606      	mov	r6, r0
 8003a84:	462b      	mov	r3, r5
 8003a86:	b999      	cbnz	r1, 8003ab0 <scalbn+0x38>
 8003a88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003a8c:	4323      	orrs	r3, r4
 8003a8e:	d03f      	beq.n	8003b10 <scalbn+0x98>
 8003a90:	4b35      	ldr	r3, [pc, #212]	; (8003b68 <scalbn+0xf0>)
 8003a92:	4629      	mov	r1, r5
 8003a94:	ee10 0a10 	vmov	r0, s0
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f7fc fdb5 	bl	8000608 <__aeabi_dmul>
 8003a9e:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <scalbn+0xf4>)
 8003aa0:	429e      	cmp	r6, r3
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	460d      	mov	r5, r1
 8003aa6:	da10      	bge.n	8003aca <scalbn+0x52>
 8003aa8:	a327      	add	r3, pc, #156	; (adr r3, 8003b48 <scalbn+0xd0>)
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	e01f      	b.n	8003af0 <scalbn+0x78>
 8003ab0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003ab4:	4291      	cmp	r1, r2
 8003ab6:	d10c      	bne.n	8003ad2 <scalbn+0x5a>
 8003ab8:	ee10 2a10 	vmov	r2, s0
 8003abc:	4620      	mov	r0, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f7fc fbec 	bl	800029c <__adddf3>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	460d      	mov	r5, r1
 8003ac8:	e022      	b.n	8003b10 <scalbn+0x98>
 8003aca:	460b      	mov	r3, r1
 8003acc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003ad0:	3936      	subs	r1, #54	; 0x36
 8003ad2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003ad6:	4296      	cmp	r6, r2
 8003ad8:	dd0d      	ble.n	8003af6 <scalbn+0x7e>
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	a11c      	add	r1, pc, #112	; (adr r1, 8003b50 <scalbn+0xd8>)
 8003ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ae2:	da02      	bge.n	8003aea <scalbn+0x72>
 8003ae4:	a11c      	add	r1, pc, #112	; (adr r1, 8003b58 <scalbn+0xe0>)
 8003ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003aea:	a319      	add	r3, pc, #100	; (adr r3, 8003b50 <scalbn+0xd8>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f7fc fd8a 	bl	8000608 <__aeabi_dmul>
 8003af4:	e7e6      	b.n	8003ac4 <scalbn+0x4c>
 8003af6:	1872      	adds	r2, r6, r1
 8003af8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003afc:	428a      	cmp	r2, r1
 8003afe:	dcec      	bgt.n	8003ada <scalbn+0x62>
 8003b00:	2a00      	cmp	r2, #0
 8003b02:	dd08      	ble.n	8003b16 <scalbn+0x9e>
 8003b04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b10:	ec45 4b10 	vmov	d0, r4, r5
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
 8003b16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003b1a:	da08      	bge.n	8003b2e <scalbn+0xb6>
 8003b1c:	2d00      	cmp	r5, #0
 8003b1e:	a10a      	add	r1, pc, #40	; (adr r1, 8003b48 <scalbn+0xd0>)
 8003b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b24:	dac0      	bge.n	8003aa8 <scalbn+0x30>
 8003b26:	a10e      	add	r1, pc, #56	; (adr r1, 8003b60 <scalbn+0xe8>)
 8003b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b2c:	e7bc      	b.n	8003aa8 <scalbn+0x30>
 8003b2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b32:	3236      	adds	r2, #54	; 0x36
 8003b34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <scalbn+0xf8>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	e7d5      	b.n	8003af0 <scalbn+0x78>
 8003b44:	f3af 8000 	nop.w
 8003b48:	c2f8f359 	.word	0xc2f8f359
 8003b4c:	01a56e1f 	.word	0x01a56e1f
 8003b50:	8800759c 	.word	0x8800759c
 8003b54:	7e37e43c 	.word	0x7e37e43c
 8003b58:	8800759c 	.word	0x8800759c
 8003b5c:	fe37e43c 	.word	0xfe37e43c
 8003b60:	c2f8f359 	.word	0xc2f8f359
 8003b64:	81a56e1f 	.word	0x81a56e1f
 8003b68:	43500000 	.word	0x43500000
 8003b6c:	ffff3cb0 	.word	0xffff3cb0
 8003b70:	3c900000 	.word	0x3c900000

08003b74 <with_errno>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	460d      	mov	r5, r1
 8003b7a:	4616      	mov	r6, r2
 8003b7c:	f7fe fd50 	bl	8002620 <__errno>
 8003b80:	4629      	mov	r1, r5
 8003b82:	6006      	str	r6, [r0, #0]
 8003b84:	4620      	mov	r0, r4
 8003b86:	bd70      	pop	{r4, r5, r6, pc}

08003b88 <xflow>:
 8003b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b8a:	4614      	mov	r4, r2
 8003b8c:	461d      	mov	r5, r3
 8003b8e:	b108      	cbz	r0, 8003b94 <xflow+0xc>
 8003b90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003b94:	e9cd 2300 	strd	r2, r3, [sp]
 8003b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	f7fc fd32 	bl	8000608 <__aeabi_dmul>
 8003ba4:	2222      	movs	r2, #34	; 0x22
 8003ba6:	b003      	add	sp, #12
 8003ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bac:	f7ff bfe2 	b.w	8003b74 <with_errno>

08003bb0 <__math_uflow>:
 8003bb0:	b508      	push	{r3, lr}
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003bb8:	f7ff ffe6 	bl	8003b88 <xflow>
 8003bbc:	ec41 0b10 	vmov	d0, r0, r1
 8003bc0:	bd08      	pop	{r3, pc}

08003bc2 <__math_oflow>:
 8003bc2:	b508      	push	{r3, lr}
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003bca:	f7ff ffdd 	bl	8003b88 <xflow>
 8003bce:	ec41 0b10 	vmov	d0, r0, r1
 8003bd2:	bd08      	pop	{r3, pc}

08003bd4 <__ieee754_sqrt>:
 8003bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	ec55 4b10 	vmov	r4, r5, d0
 8003bdc:	4e67      	ldr	r6, [pc, #412]	; (8003d7c <__ieee754_sqrt+0x1a8>)
 8003bde:	43ae      	bics	r6, r5
 8003be0:	ee10 0a10 	vmov	r0, s0
 8003be4:	ee10 2a10 	vmov	r2, s0
 8003be8:	4629      	mov	r1, r5
 8003bea:	462b      	mov	r3, r5
 8003bec:	d10d      	bne.n	8003c0a <__ieee754_sqrt+0x36>
 8003bee:	f7fc fd0b 	bl	8000608 <__aeabi_dmul>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f7fc fb4f 	bl	800029c <__adddf3>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	460d      	mov	r5, r1
 8003c02:	ec45 4b10 	vmov	d0, r4, r5
 8003c06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	dc0b      	bgt.n	8003c26 <__ieee754_sqrt+0x52>
 8003c0e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003c12:	4326      	orrs	r6, r4
 8003c14:	d0f5      	beq.n	8003c02 <__ieee754_sqrt+0x2e>
 8003c16:	b135      	cbz	r5, 8003c26 <__ieee754_sqrt+0x52>
 8003c18:	f7fc fb3e 	bl	8000298 <__aeabi_dsub>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	f7fc fe1c 	bl	800085c <__aeabi_ddiv>
 8003c24:	e7eb      	b.n	8003bfe <__ieee754_sqrt+0x2a>
 8003c26:	1509      	asrs	r1, r1, #20
 8003c28:	f000 808d 	beq.w	8003d46 <__ieee754_sqrt+0x172>
 8003c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c30:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8003c34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c38:	07c9      	lsls	r1, r1, #31
 8003c3a:	bf5c      	itt	pl
 8003c3c:	005b      	lslpl	r3, r3, #1
 8003c3e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8003c42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003c46:	bf58      	it	pl
 8003c48:	0052      	lslpl	r2, r2, #1
 8003c4a:	2500      	movs	r5, #0
 8003c4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003c50:	1076      	asrs	r6, r6, #1
 8003c52:	0052      	lsls	r2, r2, #1
 8003c54:	f04f 0e16 	mov.w	lr, #22
 8003c58:	46ac      	mov	ip, r5
 8003c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c5e:	eb0c 0001 	add.w	r0, ip, r1
 8003c62:	4298      	cmp	r0, r3
 8003c64:	bfde      	ittt	le
 8003c66:	1a1b      	suble	r3, r3, r0
 8003c68:	eb00 0c01 	addle.w	ip, r0, r1
 8003c6c:	186d      	addle	r5, r5, r1
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	f1be 0e01 	subs.w	lr, lr, #1
 8003c74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003c78:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003c7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003c80:	d1ed      	bne.n	8003c5e <__ieee754_sqrt+0x8a>
 8003c82:	4674      	mov	r4, lr
 8003c84:	2720      	movs	r7, #32
 8003c86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c8a:	4563      	cmp	r3, ip
 8003c8c:	eb01 000e 	add.w	r0, r1, lr
 8003c90:	dc02      	bgt.n	8003c98 <__ieee754_sqrt+0xc4>
 8003c92:	d113      	bne.n	8003cbc <__ieee754_sqrt+0xe8>
 8003c94:	4290      	cmp	r0, r2
 8003c96:	d811      	bhi.n	8003cbc <__ieee754_sqrt+0xe8>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	eb00 0e01 	add.w	lr, r0, r1
 8003c9e:	da57      	bge.n	8003d50 <__ieee754_sqrt+0x17c>
 8003ca0:	f1be 0f00 	cmp.w	lr, #0
 8003ca4:	db54      	blt.n	8003d50 <__ieee754_sqrt+0x17c>
 8003ca6:	f10c 0801 	add.w	r8, ip, #1
 8003caa:	eba3 030c 	sub.w	r3, r3, ip
 8003cae:	4290      	cmp	r0, r2
 8003cb0:	bf88      	it	hi
 8003cb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003cb6:	1a12      	subs	r2, r2, r0
 8003cb8:	440c      	add	r4, r1
 8003cba:	46c4      	mov	ip, r8
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	3f01      	subs	r7, #1
 8003cc0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003cc4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003cc8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003ccc:	d1dd      	bne.n	8003c8a <__ieee754_sqrt+0xb6>
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d01b      	beq.n	8003d0a <__ieee754_sqrt+0x136>
 8003cd2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003d80 <__ieee754_sqrt+0x1ac>
 8003cd6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003d84 <__ieee754_sqrt+0x1b0>
 8003cda:	e9da 0100 	ldrd	r0, r1, [sl]
 8003cde:	e9db 2300 	ldrd	r2, r3, [fp]
 8003ce2:	f7fc fad9 	bl	8000298 <__aeabi_dsub>
 8003ce6:	e9da 8900 	ldrd	r8, r9, [sl]
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4640      	mov	r0, r8
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	f7fc ff05 	bl	8000b00 <__aeabi_dcmple>
 8003cf6:	b140      	cbz	r0, 8003d0a <__ieee754_sqrt+0x136>
 8003cf8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003cfc:	e9da 0100 	ldrd	r0, r1, [sl]
 8003d00:	e9db 2300 	ldrd	r2, r3, [fp]
 8003d04:	d126      	bne.n	8003d54 <__ieee754_sqrt+0x180>
 8003d06:	3501      	adds	r5, #1
 8003d08:	463c      	mov	r4, r7
 8003d0a:	106a      	asrs	r2, r5, #1
 8003d0c:	0863      	lsrs	r3, r4, #1
 8003d0e:	07e9      	lsls	r1, r5, #31
 8003d10:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003d14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003d18:	bf48      	it	mi
 8003d1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8003d22:	461c      	mov	r4, r3
 8003d24:	e76d      	b.n	8003c02 <__ieee754_sqrt+0x2e>
 8003d26:	0ad3      	lsrs	r3, r2, #11
 8003d28:	3815      	subs	r0, #21
 8003d2a:	0552      	lsls	r2, r2, #21
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0fa      	beq.n	8003d26 <__ieee754_sqrt+0x152>
 8003d30:	02dc      	lsls	r4, r3, #11
 8003d32:	d50a      	bpl.n	8003d4a <__ieee754_sqrt+0x176>
 8003d34:	f1c1 0420 	rsb	r4, r1, #32
 8003d38:	fa22 f404 	lsr.w	r4, r2, r4
 8003d3c:	1e4d      	subs	r5, r1, #1
 8003d3e:	408a      	lsls	r2, r1
 8003d40:	4323      	orrs	r3, r4
 8003d42:	1b41      	subs	r1, r0, r5
 8003d44:	e772      	b.n	8003c2c <__ieee754_sqrt+0x58>
 8003d46:	4608      	mov	r0, r1
 8003d48:	e7f0      	b.n	8003d2c <__ieee754_sqrt+0x158>
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	3101      	adds	r1, #1
 8003d4e:	e7ef      	b.n	8003d30 <__ieee754_sqrt+0x15c>
 8003d50:	46e0      	mov	r8, ip
 8003d52:	e7aa      	b.n	8003caa <__ieee754_sqrt+0xd6>
 8003d54:	f7fc faa2 	bl	800029c <__adddf3>
 8003d58:	e9da 8900 	ldrd	r8, r9, [sl]
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4640      	mov	r0, r8
 8003d62:	4649      	mov	r1, r9
 8003d64:	f7fc fec2 	bl	8000aec <__aeabi_dcmplt>
 8003d68:	b120      	cbz	r0, 8003d74 <__ieee754_sqrt+0x1a0>
 8003d6a:	1ca0      	adds	r0, r4, #2
 8003d6c:	bf08      	it	eq
 8003d6e:	3501      	addeq	r5, #1
 8003d70:	3402      	adds	r4, #2
 8003d72:	e7ca      	b.n	8003d0a <__ieee754_sqrt+0x136>
 8003d74:	3401      	adds	r4, #1
 8003d76:	f024 0401 	bic.w	r4, r4, #1
 8003d7a:	e7c6      	b.n	8003d0a <__ieee754_sqrt+0x136>
 8003d7c:	7ff00000 	.word	0x7ff00000
 8003d80:	20000060 	.word	0x20000060
 8003d84:	20000068 	.word	0x20000068

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
