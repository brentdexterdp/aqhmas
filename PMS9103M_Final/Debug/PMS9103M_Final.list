
PMS9103M_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002070  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002210  08002210  00012210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002334  08002334  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002334  08002334  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002334  08002334  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002338  08002338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800233c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000060  0800239c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800239c  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003160  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d70  00000000  00000000  00023233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000320  00000000  00000000  00023fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000230  00000000  00000000  000242c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015540  00000000  00000000  000244f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004e92  00000000  00000000  00039a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008460d  00000000  00000000  0003e8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e80  00000000  00000000  000c2ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c3  00000000  00000000  000c3d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080021f8 	.word	0x080021f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080021f8 	.word	0x080021f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ESP8266_Init>:
#include "ESP8266.h"
#include <string.h>
#include <stdio.h>
#include <stdint.h>

void ESP8266_Init(char *ssid, char *password){
 8000290:	b580      	push	{r7, lr}
 8000292:	b09c      	sub	sp, #112	; 0x70
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]

	int ESP_response = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	66fb      	str	r3, [r7, #108]	; 0x6c
	char data_to_send[100];

	checker_1 = 1;
 800029e:	4b41      	ldr	r3, [pc, #260]	; (80003a4 <ESP8266_Init+0x114>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	601a      	str	r2, [r3, #0]
	USART6_Text_Write("AT+RST\r\n");
 80002a4:	4840      	ldr	r0, [pc, #256]	; (80003a8 <ESP8266_Init+0x118>)
 80002a6:	f000 fb61 	bl	800096c <USART6_Text_Write>
	Tim3_wait_for_timeout();
 80002aa:	f000 fa5f 	bl	800076c <Tim3_wait_for_timeout>
	delay_s(10);
 80002ae:	200a      	movs	r0, #10
 80002b0:	f000 f9cd 	bl	800064e <delay_s>
//	while(!ESP_response){ESP_response = USART6_Wait_For("WIFI GOT IP\r\n", 1, 1);}
	Tim3_esp_not_stuck();
 80002b4:	f000 fa6e 	bl	8000794 <Tim3_esp_not_stuck>

	checker_1 = 2;
 80002b8:	4b3a      	ldr	r3, [pc, #232]	; (80003a4 <ESP8266_Init+0x114>)
 80002ba:	2202      	movs	r2, #2
 80002bc:	601a      	str	r2, [r3, #0]

	USART6_Text_Write("AT\r\n");
 80002be:	483b      	ldr	r0, [pc, #236]	; (80003ac <ESP8266_Init+0x11c>)
 80002c0:	f000 fb54 	bl	800096c <USART6_Text_Write>
	ESP_response = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 80002c8:	f000 fa50 	bl	800076c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 80002cc:	e005      	b.n	80002da <ESP8266_Init+0x4a>
 80002ce:	2201      	movs	r2, #1
 80002d0:	2101      	movs	r1, #1
 80002d2:	4837      	ldr	r0, [pc, #220]	; (80003b0 <ESP8266_Init+0x120>)
 80002d4:	f000 fb8a 	bl	80009ec <USART6_Wait_For>
 80002d8:	66f8      	str	r0, [r7, #108]	; 0x6c
 80002da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d103      	bne.n	80002e8 <ESP8266_Init+0x58>
 80002e0:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <ESP8266_Init+0x124>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f2      	beq.n	80002ce <ESP8266_Init+0x3e>
	Tim3_esp_not_stuck();
 80002e8:	f000 fa54 	bl	8000794 <Tim3_esp_not_stuck>

	checker_1 = 3;
 80002ec:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <ESP8266_Init+0x114>)
 80002ee:	2203      	movs	r2, #3
 80002f0:	601a      	str	r2, [r3, #0]

	USART6_Text_Write("AT+CWMODE=1\r\n");
 80002f2:	4831      	ldr	r0, [pc, #196]	; (80003b8 <ESP8266_Init+0x128>)
 80002f4:	f000 fb3a 	bl	800096c <USART6_Text_Write>
	ESP_response = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 80002fc:	f000 fa36 	bl	800076c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 8000300:	e005      	b.n	800030e <ESP8266_Init+0x7e>
 8000302:	2201      	movs	r2, #1
 8000304:	2101      	movs	r1, #1
 8000306:	482a      	ldr	r0, [pc, #168]	; (80003b0 <ESP8266_Init+0x120>)
 8000308:	f000 fb70 	bl	80009ec <USART6_Wait_For>
 800030c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800030e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000310:	2b00      	cmp	r3, #0
 8000312:	d103      	bne.n	800031c <ESP8266_Init+0x8c>
 8000314:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <ESP8266_Init+0x124>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f2      	beq.n	8000302 <ESP8266_Init+0x72>
	Tim3_esp_not_stuck();
 800031c:	f000 fa3a 	bl	8000794 <Tim3_esp_not_stuck>

	checker_1 = 4;
 8000320:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <ESP8266_Init+0x114>)
 8000322:	2204      	movs	r2, #4
 8000324:	601a      	str	r2, [r3, #0]

	sprintf(data_to_send, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8000326:	f107 0008 	add.w	r0, r7, #8
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	4923      	ldr	r1, [pc, #140]	; (80003bc <ESP8266_Init+0x12c>)
 8000330:	f001 fac6 	bl	80018c0 <siprintf>
	USART6_Text_Write(data_to_send);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fb17 	bl	800096c <USART6_Text_Write>
	ESP_response = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 8000342:	f000 fa13 	bl	800076c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 8000346:	e005      	b.n	8000354 <ESP8266_Init+0xc4>
 8000348:	2201      	movs	r2, #1
 800034a:	2101      	movs	r1, #1
 800034c:	4818      	ldr	r0, [pc, #96]	; (80003b0 <ESP8266_Init+0x120>)
 800034e:	f000 fb4d 	bl	80009ec <USART6_Wait_For>
 8000352:	66f8      	str	r0, [r7, #108]	; 0x6c
 8000354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000356:	2b00      	cmp	r3, #0
 8000358:	d103      	bne.n	8000362 <ESP8266_Init+0xd2>
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <ESP8266_Init+0x124>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f2      	beq.n	8000348 <ESP8266_Init+0xb8>
	Tim3_esp_not_stuck();
 8000362:	f000 fa17 	bl	8000794 <Tim3_esp_not_stuck>

	checker_1 = 5;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <ESP8266_Init+0x114>)
 8000368:	2205      	movs	r2, #5
 800036a:	601a      	str	r2, [r3, #0]

	USART6_Text_Write("AT+CIPMUX=0\r\n");
 800036c:	4814      	ldr	r0, [pc, #80]	; (80003c0 <ESP8266_Init+0x130>)
 800036e:	f000 fafd 	bl	800096c <USART6_Text_Write>
	ESP_response = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 8000376:	f000 f9f9 	bl	800076c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 800037a:	e005      	b.n	8000388 <ESP8266_Init+0xf8>
 800037c:	2201      	movs	r2, #1
 800037e:	2101      	movs	r1, #1
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <ESP8266_Init+0x120>)
 8000382:	f000 fb33 	bl	80009ec <USART6_Wait_For>
 8000386:	66f8      	str	r0, [r7, #108]	; 0x6c
 8000388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800038a:	2b00      	cmp	r3, #0
 800038c:	d103      	bne.n	8000396 <ESP8266_Init+0x106>
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <ESP8266_Init+0x124>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f2      	beq.n	800037c <ESP8266_Init+0xec>
	Tim3_esp_not_stuck();
 8000396:	f000 f9fd 	bl	8000794 <Tim3_esp_not_stuck>

}
 800039a:	bf00      	nop
 800039c:	3770      	adds	r7, #112	; 0x70
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000080 	.word	0x20000080
 80003a8:	08002210 	.word	0x08002210
 80003ac:	0800221c 	.word	0x0800221c
 80003b0:	08002224 	.word	0x08002224
 80003b4:	200002f8 	.word	0x200002f8
 80003b8:	0800222c 	.word	0x0800222c
 80003bc:	0800223c 	.word	0x0800223c
 80003c0:	08002254 	.word	0x08002254

080003c4 <ESP8266_Send_Data>:

void ESP8266_Send_Data(char *writeAPIKey, int fieldNumber, int value){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80003ca:	af02      	add	r7, sp, #8
 80003cc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80003d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80003d4:	6018      	str	r0, [r3, #0]
 80003d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80003da:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80003de:	6019      	str	r1, [r3, #0]
 80003e0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80003e4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80003e8:	601a      	str	r2, [r3, #0]

	int ESP_response = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	char data_to_send[300];
	char data_to_send_two[300];

	USART6_Text_Write("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 80003f0:	4847      	ldr	r0, [pc, #284]	; (8000510 <ESP8266_Send_Data+0x14c>)
 80003f2:	f000 fabb 	bl	800096c <USART6_Text_Write>
	ESP_response = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80003fc:	f000 f9b6 	bl	800076c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 0, 1);}
 8000400:	e006      	b.n	8000410 <ESP8266_Send_Data+0x4c>
 8000402:	2201      	movs	r2, #1
 8000404:	2100      	movs	r1, #0
 8000406:	4843      	ldr	r0, [pc, #268]	; (8000514 <ESP8266_Send_Data+0x150>)
 8000408:	f000 faf0 	bl	80009ec <USART6_Wait_For>
 800040c:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 8000410:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000414:	2b00      	cmp	r3, #0
 8000416:	d103      	bne.n	8000420 <ESP8266_Send_Data+0x5c>
 8000418:	4b3f      	ldr	r3, [pc, #252]	; (8000518 <ESP8266_Send_Data+0x154>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0f0      	beq.n	8000402 <ESP8266_Send_Data+0x3e>
	Tim3_esp_not_stuck();
 8000420:	f000 f9b8 	bl	8000794 <Tim3_esp_not_stuck>

	sprintf(data_to_send, "GET /update?api_key=%s&field%d=%u\r\n", writeAPIKey, fieldNumber, value);
 8000424:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8000428:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800042c:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8000430:	f5a2 7219 	sub.w	r2, r2, #612	; 0x264
 8000434:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8000438:	f507 711c 	add.w	r1, r7, #624	; 0x270
 800043c:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
 8000440:	6809      	ldr	r1, [r1, #0]
 8000442:	9100      	str	r1, [sp, #0]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6812      	ldr	r2, [r2, #0]
 8000448:	4934      	ldr	r1, [pc, #208]	; (800051c <ESP8266_Send_Data+0x158>)
 800044a:	f001 fa39 	bl	80018c0 <siprintf>

	sprintf(data_to_send_two, "AT+CIPSEND=%d\r\n", strlen(data_to_send));
 800044e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff fec4 	bl	80001e0 <strlen>
 8000458:	4602      	mov	r2, r0
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	4930      	ldr	r1, [pc, #192]	; (8000520 <ESP8266_Send_Data+0x15c>)
 8000460:	4618      	mov	r0, r3
 8000462:	f001 fa2d 	bl	80018c0 <siprintf>
	USART6_Text_Write(data_to_send_two);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fa7e 	bl	800096c <USART6_Text_Write>
	ESP_response = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 8000476:	f000 f979 	bl	800076c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For(">", 0, 1);}
 800047a:	e006      	b.n	800048a <ESP8266_Send_Data+0xc6>
 800047c:	2201      	movs	r2, #1
 800047e:	2100      	movs	r1, #0
 8000480:	4828      	ldr	r0, [pc, #160]	; (8000524 <ESP8266_Send_Data+0x160>)
 8000482:	f000 fab3 	bl	80009ec <USART6_Wait_For>
 8000486:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 800048a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800048e:	2b00      	cmp	r3, #0
 8000490:	d103      	bne.n	800049a <ESP8266_Send_Data+0xd6>
 8000492:	4b21      	ldr	r3, [pc, #132]	; (8000518 <ESP8266_Send_Data+0x154>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f0      	beq.n	800047c <ESP8266_Send_Data+0xb8>
	Tim3_esp_not_stuck();
 800049a:	f000 f97b 	bl	8000794 <Tim3_esp_not_stuck>

	USART6_Text_Write(data_to_send);
 800049e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fa62 	bl	800096c <USART6_Text_Write>
	ESP_response = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80004ae:	f000 f95d 	bl	800076c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("SEND OK\r\n", 0, 0);}
 80004b2:	e006      	b.n	80004c2 <ESP8266_Send_Data+0xfe>
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	481b      	ldr	r0, [pc, #108]	; (8000528 <ESP8266_Send_Data+0x164>)
 80004ba:	f000 fa97 	bl	80009ec <USART6_Wait_For>
 80004be:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 80004c2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d103      	bne.n	80004d2 <ESP8266_Send_Data+0x10e>
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <ESP8266_Send_Data+0x154>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f0      	beq.n	80004b4 <ESP8266_Send_Data+0xf0>
	Tim3_esp_not_stuck();
 80004d2:	f000 f95f 	bl	8000794 <Tim3_esp_not_stuck>

	ESP_response = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80004dc:	f000 f946 	bl	800076c <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("CLOSED", 0, 1);}
 80004e0:	e006      	b.n	80004f0 <ESP8266_Send_Data+0x12c>
 80004e2:	2201      	movs	r2, #1
 80004e4:	2100      	movs	r1, #0
 80004e6:	4811      	ldr	r0, [pc, #68]	; (800052c <ESP8266_Send_Data+0x168>)
 80004e8:	f000 fa80 	bl	80009ec <USART6_Wait_For>
 80004ec:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 80004f0:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d103      	bne.n	8000500 <ESP8266_Send_Data+0x13c>
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <ESP8266_Send_Data+0x154>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0f0      	beq.n	80004e2 <ESP8266_Send_Data+0x11e>
	Tim3_esp_not_stuck();
 8000500:	f000 f948 	bl	8000794 <Tim3_esp_not_stuck>

}
 8000504:	bf00      	nop
 8000506:	f507 771c 	add.w	r7, r7, #624	; 0x270
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	08002264 	.word	0x08002264
 8000514:	08002224 	.word	0x08002224
 8000518:	200002f8 	.word	0x200002f8
 800051c:	08002290 	.word	0x08002290
 8000520:	080022b4 	.word	0x080022b4
 8000524:	080022c4 	.word	0x080022c4
 8000528:	080022c8 	.word	0x080022c8
 800052c:	080022d4 	.word	0x080022d4

08000530 <Tim2_Init>:
 *      Author: ADMIN
 */

#include "TIM2.h"

void Tim2_Init(void){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1<<0); // Enable clock for TIM2
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <Tim2_Init+0x6c>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a18      	ldr	r2, [pc, #96]	; (800059c <Tim2_Init+0x6c>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 16-1; // Set PSC+1 = 16000
 8000540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000544:	220f      	movs	r2, #15
 8000546:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2->ARR = 1; // Set timer to reset after CNT = 1 or 1 us
 8000548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054c:	2201      	movs	r2, #1
 800054e:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= (1<<0); // Enable timer interrupt generation
 8000550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	60d3      	str	r3, [r2, #12]

	NVIC->IP[28] = (3 << 4) & 0xff; // Set priority to 3
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <Tim2_Init+0x70>)
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
	NVIC->ISER[0] = (1 << 28); // Enable interrupt
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <Tim2_Init+0x70>)
 800056a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800056e:	601a      	str	r2, [r3, #0]
	TIM2->SR &= ~(1<<0);
 8000570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800057a:	f023 0301 	bic.w	r3, r3, #1
 800057e:	6113      	str	r3, [r2, #16]

	TIM2->CR1 &= ~(1<<0); // Disable timer, for now
 8000580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800058a:	f023 0301 	bic.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]

}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800
 80005a0:	e000e100 	.word	0xe000e100

080005a4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

	done = 1;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <TIM2_IRQHandler+0x34>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]

	TIM2->CR1 &= ~(1<<0);
 80005ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b8:	f023 0301 	bic.w	r3, r3, #1
 80005bc:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(1<<0); // Clear UIF update interrupt flag
 80005be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c2:	691b      	ldr	r3, [r3, #16]
 80005c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c8:	f023 0301 	bic.w	r3, r3, #1
 80005cc:	6113      	str	r3, [r2, #16]

}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000084 	.word	0x20000084

080005dc <delay_us>:

void delay_us(int us_delay){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

	TIM2->ARR = us_delay;
 80005e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	62d3      	str	r3, [r2, #44]	; 0x2c
	done = 0;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <delay_us+0x40>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= (1<<0);
 80005f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6013      	str	r3, [r2, #0]

	while(!done){}
 8000602:	bf00      	nop
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <delay_us+0x40>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0fb      	beq.n	8000604 <delay_us+0x28>

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000084 	.word	0x20000084

08000620 <delay_ms>:

void delay_ms(int ms_delay){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

	for(int i=0; i<=ms_delay; i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e006      	b.n	800063c <delay_ms+0x1c>
		delay_us(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f7ff ffd3 	bl	80005dc <delay_us>
	for(int i=0; i<=ms_delay; i++){
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	ddf4      	ble.n	800062e <delay_ms+0xe>
	}

}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <delay_s>:

void delay_s(int s_delay){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]

	for(int i=0; i<=s_delay; i++){
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e006      	b.n	800066a <delay_s+0x1c>
		delay_ms(1000);
 800065c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000660:	f7ff ffde 	bl	8000620 <delay_ms>
	for(int i=0; i<=s_delay; i++){
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	429a      	cmp	r2, r3
 8000670:	ddf4      	ble.n	800065c <delay_s+0xe>
	}

}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000680:	f3bf 8f4f 	dsb	sy
}
 8000684:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <__NVIC_SystemReset+0x24>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800068e:	4904      	ldr	r1, [pc, #16]	; (80006a0 <__NVIC_SystemReset+0x24>)
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_SystemReset+0x28>)
 8000692:	4313      	orrs	r3, r2
 8000694:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <__NVIC_SystemReset+0x20>
 80006a0:	e000ed00 	.word	0xe000ed00
 80006a4:	05fa0004 	.word	0x05fa0004

080006a8 <Tim3_Init>:

#include "TIM3.h"

void Tim3_Init(void){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1<<1); // Enable clock for TIM3
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <Tim3_Init+0x60>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a15      	ldr	r2, [pc, #84]	; (8000708 <Tim3_Init+0x60>)
 80006b2:	f043 0302 	orr.w	r3, r3, #2
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 62500-1; // Set PSC+1 = 16000
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <Tim3_Init+0x64>)
 80006ba:	f24f 4223 	movw	r2, #62499	; 0xf423
 80006be:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->ARR = 16384; // Set timer to reset after CNT = 100
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <Tim3_Init+0x64>)
 80006c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= (1<<0); // Enable timer interrupt generation
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <Tim3_Init+0x64>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4a0f      	ldr	r2, [pc, #60]	; (800070c <Tim3_Init+0x64>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	60d3      	str	r3, [r2, #12]

	NVIC->IP[29] = (1 << 4) & 0xff; // Set priority to 1
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <Tim3_Init+0x68>)
 80006d6:	2210      	movs	r2, #16
 80006d8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
	NVIC->ISER[0] = (1 << 29); // Enable interrupt
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <Tim3_Init+0x68>)
 80006de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80006e2:	601a      	str	r2, [r3, #0]

	TIM3->SR &= ~(1<<0);
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <Tim3_Init+0x64>)
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	4a08      	ldr	r2, [pc, #32]	; (800070c <Tim3_Init+0x64>)
 80006ea:	f023 0301 	bic.w	r3, r3, #1
 80006ee:	6113      	str	r3, [r2, #16]
	TIM3->CR1 &= ~(1<<0); // Disable timer, for now
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <Tim3_Init+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a05      	ldr	r2, [pc, #20]	; (800070c <Tim3_Init+0x64>)
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40000400 	.word	0x40000400
 8000710:	e000e100 	.word	0xe000e100

08000714 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	while(1){

		if(Tim3_initializing){
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <TIM3_IRQHandler+0x48>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d009      	beq.n	8000734 <TIM3_IRQHandler+0x20>
			Tim3_initializing = 0;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <TIM3_IRQHandler+0x48>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
			TIM3->SR &= ~(1<<0);
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <TIM3_IRQHandler+0x4c>)
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <TIM3_IRQHandler+0x4c>)
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	6113      	str	r3, [r2, #16]
			break;
 8000732:	e011      	b.n	8000758 <TIM3_IRQHandler+0x44>
		} else {

			sys_stuck += 1;
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <TIM3_IRQHandler+0x50>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <TIM3_IRQHandler+0x50>)
 800073c:	6013      	str	r3, [r2, #0]
			break_wait_for = 1;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <TIM3_IRQHandler+0x54>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
			TIM3->SR = 0;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <TIM3_IRQHandler+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]

			if (sys_stuck == 10){NVIC_SystemReset();}
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <TIM3_IRQHandler+0x50>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b0a      	cmp	r3, #10
 8000750:	d101      	bne.n	8000756 <TIM3_IRQHandler+0x42>
 8000752:	f7ff ff93 	bl	800067c <__NVIC_SystemReset>

			break;
 8000756:	bf00      	nop

		}

	}
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000004 	.word	0x20000004
 8000760:	40000400 	.word	0x40000400
 8000764:	200002f4 	.word	0x200002f4
 8000768:	200002f8 	.word	0x200002f8

0800076c <Tim3_wait_for_timeout>:

void Tim3_wait_for_timeout(){
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

	//TIM3->CNT = 0;
	TIM3->ARR = 16384;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <Tim3_wait_for_timeout+0x24>)
 8000772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
	//Tim3_initializing = 1;
	TIM3->CR1 |= (1<<0);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <Tim3_wait_for_timeout+0x24>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <Tim3_wait_for_timeout+0x24>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6013      	str	r3, [r2, #0]

}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40000400 	.word	0x40000400

08000794 <Tim3_esp_not_stuck>:

void Tim3_esp_not_stuck(){
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

	TIM3->CR1 &= ~(1<<0);
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Tim3_esp_not_stuck+0x2c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <Tim3_esp_not_stuck+0x2c>)
 800079e:	f023 0301 	bic.w	r3, r3, #1
 80007a2:	6013      	str	r3, [r2, #0]
	TIM3->SR &= ~(1<<0);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <Tim3_esp_not_stuck+0x2c>)
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <Tim3_esp_not_stuck+0x2c>)
 80007aa:	f023 0301 	bic.w	r3, r3, #1
 80007ae:	6113      	str	r3, [r2, #16]
	TIM3->CNT = 0;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <Tim3_esp_not_stuck+0x2c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24

}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40000400 	.word	0x40000400

080007c4 <Usart6_Init>:
#include "Usart6.h"
#include <string.h>
#include <stdio.h>
#include <stdint.h>

void Usart6_Init(){
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1<<0);
 80007c8:	4b40      	ldr	r3, [pc, #256]	; (80008cc <Usart6_Init+0x108>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	4a3f      	ldr	r2, [pc, #252]	; (80008cc <Usart6_Init+0x108>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(1<<22);
 80007d4:	4b3e      	ldr	r3, [pc, #248]	; (80008d0 <Usart6_Init+0x10c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a3d      	ldr	r2, [pc, #244]	; (80008d0 <Usart6_Init+0x10c>)
 80007da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80007de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<23);
 80007e0:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <Usart6_Init+0x10c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a3a      	ldr	r2, [pc, #232]	; (80008d0 <Usart6_Init+0x10c>)
 80007e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007ea:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(1<<24);
 80007ec:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <Usart6_Init+0x10c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a37      	ldr	r2, [pc, #220]	; (80008d0 <Usart6_Init+0x10c>)
 80007f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<25);
 80007f8:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <Usart6_Init+0x10c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a34      	ldr	r2, [pc, #208]	; (80008d0 <Usart6_Init+0x10c>)
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	6013      	str	r3, [r2, #0]
//	GPIOA->OSPEEDR |= (0b11 << 22);	// PA11(TX) high-speed mode

//	GPIOA->PUPDR &= ~(0b11 << 24); // PA12(RX) pulldown
//	GPIOA->PUPDR |=  (0b10 << 24);

	GPIOA->AFR[1] = (136<<12); // set both PA11 and PA12 to AFRH
 8000804:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <Usart6_Init+0x10c>)
 8000806:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 800080a:	625a      	str	r2, [r3, #36]	; 0x24

	RCC->APB2ENR |= (1<<5);	// Enable USART6 peripheral
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <Usart6_Init+0x108>)
 800080e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000810:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <Usart6_Init+0x108>)
 8000812:	f043 0320 	orr.w	r3, r3, #32
 8000816:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= (1 << 5);	// Reset the whole peripheral
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <Usart6_Init+0x108>)
 800081a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081c:	4a2b      	ldr	r2, [pc, #172]	; (80008cc <Usart6_Init+0x108>)
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~(1 << 5);
 8000824:	4b29      	ldr	r3, [pc, #164]	; (80008cc <Usart6_Init+0x108>)
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000828:	4a28      	ldr	r2, [pc, #160]	; (80008cc <Usart6_Init+0x108>)
 800082a:	f023 0320 	bic.w	r3, r3, #32
 800082e:	6253      	str	r3, [r2, #36]	; 0x24

	USART6->CR1 &= ~(0b11 << 2); // disable USART6 RX and TX for now
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <Usart6_Init+0x110>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <Usart6_Init+0x110>)
 8000836:	f023 030c 	bic.w	r3, r3, #12
 800083a:	60d3      	str	r3, [r2, #12]
	USART6->CR1 |=  (1 << 13); // enable USART6
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <Usart6_Init+0x110>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <Usart6_Init+0x110>)
 8000842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000846:	60d3      	str	r3, [r2, #12]

	USART6->BRR &= ~(0x0000FFFF);
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <Usart6_Init+0x110>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <Usart6_Init+0x110>)
 800084e:	0c1b      	lsrs	r3, r3, #16
 8000850:	041b      	lsls	r3, r3, #16
 8000852:	6093      	str	r3, [r2, #8]
	USART6->BRR |= (0x0000008B);
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <Usart6_Init+0x110>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <Usart6_Init+0x110>)
 800085a:	f043 038b 	orr.w	r3, r3, #139	; 0x8b
 800085e:	6093      	str	r3, [r2, #8]

	USART6->CR1 &= ~(1 << 15);	// OVER8 = 0
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <Usart6_Init+0x110>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <Usart6_Init+0x110>)
 8000866:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800086a:	60d3      	str	r3, [r2, #12]
	USART6->CR2 &= ~(0b11 << 12);	// One (1) stop bit
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <Usart6_Init+0x110>)
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <Usart6_Init+0x110>)
 8000872:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000876:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 10);	// No parity
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <Usart6_Init+0x110>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <Usart6_Init+0x110>)
 800087e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000882:	60d3      	str	r3, [r2, #12]

	USART6->CR2 &= ~(1 << 11);
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <Usart6_Init+0x110>)
 8000886:	691b      	ldr	r3, [r3, #16]
 8000888:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <Usart6_Init+0x110>)
 800088a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800088e:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 12);
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <Usart6_Init+0x110>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <Usart6_Init+0x110>)
 8000896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800089a:	60d3      	str	r3, [r2, #12]
	USART6->CR3 &= ~(0b11 << 8);
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <Usart6_Init+0x110>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <Usart6_Init+0x110>)
 80008a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008a6:	6153      	str	r3, [r2, #20]

	NVIC->IP[71] = (2 << 4) & 0xff; // Set priority to 2
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <Usart6_Init+0x114>)
 80008aa:	2220      	movs	r2, #32
 80008ac:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
	NVIC->ISER[2] = (1 << 7); // position 71, ISER 2, bit 7
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <Usart6_Init+0x114>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	609a      	str	r2, [r3, #8]

	USART6->CR1 |= (0b1011<<2);
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <Usart6_Init+0x110>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <Usart6_Init+0x110>)
 80008bc:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80008c0:	60d3      	str	r3, [r2, #12]

}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40011400 	.word	0x40011400
 80008d8:	e000e100 	.word	0xe000e100

080008dc <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

	if(USART6->SR & 1<<5){
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <USART6_IRQHandler+0x44>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0320 	and.w	r3, r3, #32
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d013      	beq.n	8000914 <USART6_IRQHandler+0x38>

		dataBuffer[dataIndex] = USART6->DR;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <USART6_IRQHandler+0x44>)
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <USART6_IRQHandler+0x48>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	b2d1      	uxtb	r1, r2
 80008f6:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <USART6_IRQHandler+0x4c>)
 80008f8:	54d1      	strb	r1, [r2, r3]
		dataIndex += 1;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <USART6_IRQHandler+0x48>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <USART6_IRQHandler+0x48>)
 8000902:	6013      	str	r3, [r2, #0]

		if(dataIndex == 300){
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <USART6_IRQHandler+0x48>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800090c:	d102      	bne.n	8000914 <USART6_IRQHandler+0x38>
			dataIndex = 0;
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <USART6_IRQHandler+0x48>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
		}

	}

}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40011400 	.word	0x40011400
 8000924:	20000088 	.word	0x20000088
 8000928:	2000008c 	.word	0x2000008c

0800092c <USART6_Write>:
	while(!(USART6->SR & (1<<5))){}
	return USART6->DR;

}

void USART6_Write(char ch){
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]

	while(!(USART6->SR & (1<<7)));
 8000936:	bf00      	nop
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <USART6_Write+0x3c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f9      	beq.n	8000938 <USART6_Write+0xc>
	USART6->DR = ch;
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <USART6_Write+0x3c>)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	6053      	str	r3, [r2, #4]
	while(!(USART6->SR & (1<<6)));
 800094a:	bf00      	nop
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <USART6_Write+0x3c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f9      	beq.n	800094c <USART6_Write+0x20>

}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40011400 	.word	0x40011400

0800096c <USART6_Text_Write>:

void USART6_Text_Write(char *text){
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

	int text_index = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
	int text_length = strlen(text);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fc31 	bl	80001e0 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	60bb      	str	r3, [r7, #8]

	while(text_index < text_length){
 8000982:	e009      	b.n	8000998 <USART6_Text_Write+0x2c>
		USART6_Write(text[text_index]);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffcd 	bl	800092c <USART6_Write>
		text_index++;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
	while(text_index < text_length){
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf1      	blt.n	8000984 <USART6_Text_Write+0x18>
	}

}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <USART6_Clear_Buffer>:

void USART6_Clear_Buffer(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

	for(int i=0; i<300; i++){dataBuffer[i] = 0;}
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	e007      	b.n	80009c8 <USART6_Clear_Buffer+0x1c>
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <USART6_Clear_Buffer+0x38>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009ce:	dbf3      	blt.n	80009b8 <USART6_Clear_Buffer+0xc>
	dataIndex = 0;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <USART6_Clear_Buffer+0x3c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
	delay_ms(200);
 80009d6:	20c8      	movs	r0, #200	; 0xc8
 80009d8:	f7ff fe22 	bl	8000620 <delay_ms>

}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000008c 	.word	0x2000008c
 80009e8:	20000088 	.word	0x20000088

080009ec <USART6_Wait_For>:

int USART6_Wait_For(char *response, int delay_further, int clear_buffer){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]

	int dataBufferIndex = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
	int responseIndex = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
	int responseMatched = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

	while(response[responseIndex] != dataBuffer[dataBufferIndex]){dataBufferIndex++;}
 8000a04:	e002      	b.n	8000a0c <USART6_Wait_For+0x20>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4413      	add	r3, r2
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	492a      	ldr	r1, [pc, #168]	; (8000ac0 <USART6_Wait_For+0xd4>)
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	440b      	add	r3, r1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d1f2      	bne.n	8000a06 <USART6_Wait_For+0x1a>

	while(dataBuffer[dataBufferIndex] != '\0'){
 8000a20:	e039      	b.n	8000a96 <USART6_Wait_For+0xaa>

		while(response[responseIndex] == dataBuffer[dataBufferIndex]){

			char_checker = dataBuffer[dataBufferIndex];
 8000a22:	4a27      	ldr	r2, [pc, #156]	; (8000ac0 <USART6_Wait_For+0xd4>)
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	4413      	add	r3, r2
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <USART6_Wait_For+0xd8>)
 8000a2c:	701a      	strb	r2, [r3, #0]
			char_checker_2 = response[responseIndex];
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <USART6_Wait_For+0xdc>)
 8000a38:	701a      	strb	r2, [r3, #0]
			delay_ms(200);
 8000a3a:	20c8      	movs	r0, #200	; 0xc8
 8000a3c:	f7ff fdf0 	bl	8000620 <delay_ms>

			if(delay_further){delay_s(1);}
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <USART6_Wait_For+0x60>
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fe01 	bl	800064e <delay_s>

			responseIndex++;
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
			dataBufferIndex++;
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3301      	adds	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]

			if(dataBuffer[dataBufferIndex] == '\0' || response[responseIndex] == '\0'){
 8000a58:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <USART6_Wait_For+0xd4>)
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <USART6_Wait_For+0x84>
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <USART6_Wait_For+0x8a>

				responseMatched = 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
				break;
 8000a74:	e009      	b.n	8000a8a <USART6_Wait_For+0x9e>
		while(response[responseIndex] == dataBuffer[dataBufferIndex]){
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	4910      	ldr	r1, [pc, #64]	; (8000ac0 <USART6_Wait_For+0xd4>)
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	440b      	add	r3, r1
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d0cb      	beq.n	8000a22 <USART6_Wait_For+0x36>
			}

		}

		if(responseMatched){
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d109      	bne.n	8000aa4 <USART6_Wait_For+0xb8>
			break;
		} else{
			dataBufferIndex++;
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	3301      	adds	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
	while(dataBuffer[dataBufferIndex] != '\0'){
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <USART6_Wait_For+0xd4>)
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1e9      	bne.n	8000a76 <USART6_Wait_For+0x8a>
 8000aa2:	e000      	b.n	8000aa6 <USART6_Wait_For+0xba>
			break;
 8000aa4:	bf00      	nop
		}

	}

	if(responseMatched && clear_buffer){USART6_Clear_Buffer();}
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <USART6_Wait_For+0xca>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <USART6_Wait_For+0xca>
 8000ab2:	f7ff ff7b 	bl	80009ac <USART6_Clear_Buffer>

	return responseMatched;
 8000ab6:	697b      	ldr	r3, [r7, #20]

}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000008c 	.word	0x2000008c
 8000ac4:	200002e8 	.word	0x200002e8
 8000ac8:	200002e9 	.word	0x200002e9

08000acc <TIM4_Init>:
int found = 0;

int sys_stuck = 0;
int break_wait_for = 0;

void TIM4_Init(void){
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<2); // Enable clock for TIM4
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <TIM4_Init+0x6c>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <TIM4_Init+0x6c>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->PSC = 1600-1; // Set PSC+1 = 160000
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <TIM4_Init+0x70>)
 8000ade:	f240 623f 	movw	r2, #1599	; 0x63f
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 4; // Set timer to reset after CNT = 100
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <TIM4_Init+0x70>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->DIER |= (1<<0); // Enable timer interrupt generation
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <TIM4_Init+0x70>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <TIM4_Init+0x70>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	60d3      	str	r3, [r2, #12]
	NVIC->IP[TIM4_IRQn] = (5 << 4); // Set priority to 2
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <TIM4_Init+0x74>)
 8000af8:	2250      	movs	r2, #80	; 0x50
 8000afa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
	NVIC->ISER[TIM4_IRQn >> 5] |= (1 << (TIM4_IRQn % 32)); // Enable interrupt
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <TIM4_Init+0x74>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <TIM4_Init+0x74>)
 8000b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b08:	6013      	str	r3, [r2, #0]
	TIM4->SR &= ~(1<<0);
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <TIM4_Init+0x70>)
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <TIM4_Init+0x70>)
 8000b10:	f023 0301 	bic.w	r3, r3, #1
 8000b14:	6113      	str	r3, [r2, #16]
	TIM4->EGR |= (1<<0);
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <TIM4_Init+0x70>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <TIM4_Init+0x70>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= (1<<0); // enable timer
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <TIM4_Init+0x70>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <TIM4_Init+0x70>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40000800 	.word	0x40000800
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <sevseg_init>:

void sevseg_init(void){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	TIM4_Init();
 8000b48:	f7ff ffc0 	bl	8000acc <TIM4_Init>
	RCC->AHB1ENR |= (1<<0);
 8000b4c:	4b98      	ldr	r3, [pc, #608]	; (8000db0 <sevseg_init+0x26c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a97      	ldr	r2, [pc, #604]	; (8000db0 <sevseg_init+0x26c>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<1);
 8000b58:	4b95      	ldr	r3, [pc, #596]	; (8000db0 <sevseg_init+0x26c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a94      	ldr	r2, [pc, #592]	; (8000db0 <sevseg_init+0x26c>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<2);
 8000b64:	4b92      	ldr	r3, [pc, #584]	; (8000db0 <sevseg_init+0x26c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a91      	ldr	r2, [pc, #580]	; (8000db0 <sevseg_init+0x26c>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
	//PA0 1st digit
	GPIOA->MODER &= ~(1<<1);
 8000b70:	4b90      	ldr	r3, [pc, #576]	; (8000db4 <sevseg_init+0x270>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a8f      	ldr	r2, [pc, #572]	; (8000db4 <sevseg_init+0x270>)
 8000b76:	f023 0302 	bic.w	r3, r3, #2
 8000b7a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<0);
 8000b7c:	4b8d      	ldr	r3, [pc, #564]	; (8000db4 <sevseg_init+0x270>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a8c      	ldr	r2, [pc, #560]	; (8000db4 <sevseg_init+0x270>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<0);
 8000b88:	4b8a      	ldr	r3, [pc, #552]	; (8000db4 <sevseg_init+0x270>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a89      	ldr	r2, [pc, #548]	; (8000db4 <sevseg_init+0x270>)
 8000b8e:	f023 0301 	bic.w	r3, r3, #1
 8000b92:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1<<0);
 8000b94:	4b87      	ldr	r3, [pc, #540]	; (8000db4 <sevseg_init+0x270>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	4a86      	ldr	r2, [pc, #536]	; (8000db4 <sevseg_init+0x270>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6153      	str	r3, [r2, #20]
	// PB5 2nd digit
	GPIOB->MODER &= ~(1<<11);
 8000ba0:	4b85      	ldr	r3, [pc, #532]	; (8000db8 <sevseg_init+0x274>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a84      	ldr	r2, [pc, #528]	; (8000db8 <sevseg_init+0x274>)
 8000ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000baa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<10);
 8000bac:	4b82      	ldr	r3, [pc, #520]	; (8000db8 <sevseg_init+0x274>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a81      	ldr	r2, [pc, #516]	; (8000db8 <sevseg_init+0x274>)
 8000bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<5);
 8000bb8:	4b7f      	ldr	r3, [pc, #508]	; (8000db8 <sevseg_init+0x274>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	4a7e      	ldr	r2, [pc, #504]	; (8000db8 <sevseg_init+0x274>)
 8000bbe:	f023 0320 	bic.w	r3, r3, #32
 8000bc2:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= (1<<5);
 8000bc4:	4b7c      	ldr	r3, [pc, #496]	; (8000db8 <sevseg_init+0x274>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	4a7b      	ldr	r2, [pc, #492]	; (8000db8 <sevseg_init+0x274>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	6153      	str	r3, [r2, #20]
	//PB4 3rd digit
	GPIOB->MODER &= ~(1<<9);
 8000bd0:	4b79      	ldr	r3, [pc, #484]	; (8000db8 <sevseg_init+0x274>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a78      	ldr	r2, [pc, #480]	; (8000db8 <sevseg_init+0x274>)
 8000bd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<8);
 8000bdc:	4b76      	ldr	r3, [pc, #472]	; (8000db8 <sevseg_init+0x274>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a75      	ldr	r2, [pc, #468]	; (8000db8 <sevseg_init+0x274>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<4);
 8000be8:	4b73      	ldr	r3, [pc, #460]	; (8000db8 <sevseg_init+0x274>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4a72      	ldr	r2, [pc, #456]	; (8000db8 <sevseg_init+0x274>)
 8000bee:	f023 0310 	bic.w	r3, r3, #16
 8000bf2:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= (1<<4);
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <sevseg_init+0x274>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a6f      	ldr	r2, [pc, #444]	; (8000db8 <sevseg_init+0x274>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6153      	str	r3, [r2, #20]
	// PA1 4th digit
	GPIOA->MODER &= ~(1<<3);
 8000c00:	4b6c      	ldr	r3, [pc, #432]	; (8000db4 <sevseg_init+0x270>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a6b      	ldr	r2, [pc, #428]	; (8000db4 <sevseg_init+0x270>)
 8000c06:	f023 0308 	bic.w	r3, r3, #8
 8000c0a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<2);
 8000c0c:	4b69      	ldr	r3, [pc, #420]	; (8000db4 <sevseg_init+0x270>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a68      	ldr	r2, [pc, #416]	; (8000db4 <sevseg_init+0x270>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<1);
 8000c18:	4b66      	ldr	r3, [pc, #408]	; (8000db4 <sevseg_init+0x270>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a65      	ldr	r2, [pc, #404]	; (8000db4 <sevseg_init+0x270>)
 8000c1e:	f023 0302 	bic.w	r3, r3, #2
 8000c22:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1<<1);
 8000c24:	4b63      	ldr	r3, [pc, #396]	; (8000db4 <sevseg_init+0x270>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	4a62      	ldr	r2, [pc, #392]	; (8000db4 <sevseg_init+0x270>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	6153      	str	r3, [r2, #20]
	// PB3 a
	GPIOB->MODER &= ~(1<<7);
 8000c30:	4b61      	ldr	r3, [pc, #388]	; (8000db8 <sevseg_init+0x274>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a60      	ldr	r2, [pc, #384]	; (8000db8 <sevseg_init+0x274>)
 8000c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c3a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<6);
 8000c3c:	4b5e      	ldr	r3, [pc, #376]	; (8000db8 <sevseg_init+0x274>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a5d      	ldr	r2, [pc, #372]	; (8000db8 <sevseg_init+0x274>)
 8000c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c46:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<3);
 8000c48:	4b5b      	ldr	r3, [pc, #364]	; (8000db8 <sevseg_init+0x274>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	4a5a      	ldr	r2, [pc, #360]	; (8000db8 <sevseg_init+0x274>)
 8000c4e:	f023 0308 	bic.w	r3, r3, #8
 8000c52:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<3);
 8000c54:	4b58      	ldr	r3, [pc, #352]	; (8000db8 <sevseg_init+0x274>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	4a57      	ldr	r2, [pc, #348]	; (8000db8 <sevseg_init+0x274>)
 8000c5a:	f023 0308 	bic.w	r3, r3, #8
 8000c5e:	6153      	str	r3, [r2, #20]
	// PA8 b
	GPIOA->MODER &= ~(1<<17);
 8000c60:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <sevseg_init+0x270>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a53      	ldr	r2, [pc, #332]	; (8000db4 <sevseg_init+0x270>)
 8000c66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c6a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<16);
 8000c6c:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <sevseg_init+0x270>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a50      	ldr	r2, [pc, #320]	; (8000db4 <sevseg_init+0x270>)
 8000c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c76:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<8);
 8000c78:	4b4e      	ldr	r3, [pc, #312]	; (8000db4 <sevseg_init+0x270>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a4d      	ldr	r2, [pc, #308]	; (8000db4 <sevseg_init+0x270>)
 8000c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c82:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~(1<<8);
 8000c84:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <sevseg_init+0x270>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	4a4a      	ldr	r2, [pc, #296]	; (8000db4 <sevseg_init+0x270>)
 8000c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c8e:	6153      	str	r3, [r2, #20]
	// PC0 c
	GPIOC->MODER &= ~(1<<1);
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <sevseg_init+0x278>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a49      	ldr	r2, [pc, #292]	; (8000dbc <sevseg_init+0x278>)
 8000c96:	f023 0302 	bic.w	r3, r3, #2
 8000c9a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<0);
 8000c9c:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <sevseg_init+0x278>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <sevseg_init+0x278>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<0);
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <sevseg_init+0x278>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4a43      	ldr	r2, [pc, #268]	; (8000dbc <sevseg_init+0x278>)
 8000cae:	f023 0301 	bic.w	r3, r3, #1
 8000cb2:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<0);
 8000cb4:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <sevseg_init+0x278>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <sevseg_init+0x278>)
 8000cba:	f023 0301 	bic.w	r3, r3, #1
 8000cbe:	6153      	str	r3, [r2, #20]
	// PC1 d
	GPIOC->MODER &= ~(1<<3);
 8000cc0:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <sevseg_init+0x278>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <sevseg_init+0x278>)
 8000cc6:	f023 0308 	bic.w	r3, r3, #8
 8000cca:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<2);
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <sevseg_init+0x278>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a3a      	ldr	r2, [pc, #232]	; (8000dbc <sevseg_init+0x278>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<1);
 8000cd8:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <sevseg_init+0x278>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <sevseg_init+0x278>)
 8000cde:	f023 0302 	bic.w	r3, r3, #2
 8000ce2:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<1);
 8000ce4:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <sevseg_init+0x278>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a34      	ldr	r2, [pc, #208]	; (8000dbc <sevseg_init+0x278>)
 8000cea:	f023 0302 	bic.w	r3, r3, #2
 8000cee:	6153      	str	r3, [r2, #20]
	// PB0 e
	GPIOB->MODER &= ~(1<<1);
 8000cf0:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <sevseg_init+0x274>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a30      	ldr	r2, [pc, #192]	; (8000db8 <sevseg_init+0x274>)
 8000cf6:	f023 0302 	bic.w	r3, r3, #2
 8000cfa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<0);
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <sevseg_init+0x274>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2d      	ldr	r2, [pc, #180]	; (8000db8 <sevseg_init+0x274>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<0);
 8000d08:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <sevseg_init+0x274>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4a2a      	ldr	r2, [pc, #168]	; (8000db8 <sevseg_init+0x274>)
 8000d0e:	f023 0301 	bic.w	r3, r3, #1
 8000d12:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<0);
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <sevseg_init+0x274>)
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	4a27      	ldr	r2, [pc, #156]	; (8000db8 <sevseg_init+0x274>)
 8000d1a:	f023 0301 	bic.w	r3, r3, #1
 8000d1e:	6153      	str	r3, [r2, #20]
	// PB10 f
	GPIOB->MODER &= ~(1<<21);
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <sevseg_init+0x274>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a24      	ldr	r2, [pc, #144]	; (8000db8 <sevseg_init+0x274>)
 8000d26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d2a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<20);
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <sevseg_init+0x274>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <sevseg_init+0x274>)
 8000d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d36:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<10);
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <sevseg_init+0x274>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a1e      	ldr	r2, [pc, #120]	; (8000db8 <sevseg_init+0x274>)
 8000d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d42:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<10);
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <sevseg_init+0x274>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <sevseg_init+0x274>)
 8000d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d4e:	6153      	str	r3, [r2, #20]
	// PA4 g
	GPIOA->MODER &= ~(1<<9);
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <sevseg_init+0x270>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <sevseg_init+0x270>)
 8000d56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d5a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<8);
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <sevseg_init+0x270>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <sevseg_init+0x270>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<4);
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <sevseg_init+0x270>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <sevseg_init+0x270>)
 8000d6e:	f023 0310 	bic.w	r3, r3, #16
 8000d72:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~(1<<4);
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <sevseg_init+0x270>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <sevseg_init+0x270>)
 8000d7a:	f023 0310 	bic.w	r3, r3, #16
 8000d7e:	6153      	str	r3, [r2, #20]
	//PC9 red
	GPIOC->MODER &= ~(1<<19);
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <sevseg_init+0x278>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <sevseg_init+0x278>)
 8000d86:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000d8a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<18);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <sevseg_init+0x278>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <sevseg_init+0x278>)
 8000d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d96:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<1);
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <sevseg_init+0x278>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <sevseg_init+0x278>)
 8000d9e:	f023 0302 	bic.w	r3, r3, #2
 8000da2:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<9);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <sevseg_init+0x278>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <sevseg_init+0x278>)
 8000daa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dae:	e007      	b.n	8000dc0 <sevseg_init+0x27c>
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	6153      	str	r3, [r2, #20]
	//PB8 yellow
	GPIOB->MODER &= ~(1<<17);
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <sevseg_init+0x2e4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <sevseg_init+0x2e4>)
 8000dc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000dcc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<16);
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <sevseg_init+0x2e4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <sevseg_init+0x2e4>)
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<1);
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <sevseg_init+0x2e4>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <sevseg_init+0x2e4>)
 8000de0:	f023 0302 	bic.w	r3, r3, #2
 8000de4:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<8);
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <sevseg_init+0x2e4>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <sevseg_init+0x2e4>)
 8000dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df0:	6153      	str	r3, [r2, #20]
	//PB9 green
	GPIOB->MODER &= ~(1<<19);
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <sevseg_init+0x2e4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <sevseg_init+0x2e4>)
 8000df8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000dfc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<18);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <sevseg_init+0x2e4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <sevseg_init+0x2e4>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<1);
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <sevseg_init+0x2e4>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <sevseg_init+0x2e4>)
 8000e10:	f023 0302 	bic.w	r3, r3, #2
 8000e14:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<9);
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <sevseg_init+0x2e4>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <sevseg_init+0x2e4>)
 8000e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e20:	6153      	str	r3, [r2, #20]
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40020400 	.word	0x40020400

08000e2c <sevseg_display>:

void sevseg_display(int input){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	if (input > 9999){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	dd03      	ble.n	8000e46 <sevseg_display+0x1a>
		input = 9999;
 8000e3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	e004      	b.n	8000e50 <sevseg_display+0x24>
	}else if (input < 0){
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	da01      	bge.n	8000e50 <sevseg_display+0x24>
		input = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
	}
	int thou = (input / 1000) % 10;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4aa0      	ldr	r2, [pc, #640]	; (80010d4 <sevseg_display+0x2a8>)
 8000e54:	fb82 1203 	smull	r1, r2, r2, r3
 8000e58:	1192      	asrs	r2, r2, #6
 8000e5a:	17db      	asrs	r3, r3, #31
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	4b9e      	ldr	r3, [pc, #632]	; (80010d8 <sevseg_display+0x2ac>)
 8000e60:	fb83 1302 	smull	r1, r3, r3, r2
 8000e64:	1099      	asrs	r1, r3, #2
 8000e66:	17d3      	asrs	r3, r2, #31
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	617b      	str	r3, [r7, #20]
	int hund = (input / 100) % 10;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a98      	ldr	r2, [pc, #608]	; (80010dc <sevseg_display+0x2b0>)
 8000e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7e:	1152      	asrs	r2, r2, #5
 8000e80:	17db      	asrs	r3, r3, #31
 8000e82:	1ad2      	subs	r2, r2, r3
 8000e84:	4b94      	ldr	r3, [pc, #592]	; (80010d8 <sevseg_display+0x2ac>)
 8000e86:	fb83 1302 	smull	r1, r3, r3, r2
 8000e8a:	1099      	asrs	r1, r3, #2
 8000e8c:	17d3      	asrs	r3, r2, #31
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	460b      	mov	r3, r1
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	613b      	str	r3, [r7, #16]
	int tens = (input / 10) % 10;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a8e      	ldr	r2, [pc, #568]	; (80010d8 <sevseg_display+0x2ac>)
 8000ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea4:	1092      	asrs	r2, r2, #2
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad2      	subs	r2, r2, r3
 8000eaa:	4b8b      	ldr	r3, [pc, #556]	; (80010d8 <sevseg_display+0x2ac>)
 8000eac:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb0:	1099      	asrs	r1, r3, #2
 8000eb2:	17d3      	asrs	r3, r2, #31
 8000eb4:	1ac9      	subs	r1, r1, r3
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	60fb      	str	r3, [r7, #12]
	int ones = (input / 1) % 10;
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	4b84      	ldr	r3, [pc, #528]	; (80010d8 <sevseg_display+0x2ac>)
 8000ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eca:	1099      	asrs	r1, r3, #2
 8000ecc:	17d3      	asrs	r3, r2, #31
 8000ece:	1ac9      	subs	r1, r1, r3
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	60bb      	str	r3, [r7, #8]

		int digit = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
		switch (sevsegnum) {
 8000ee0:	4b7f      	ldr	r3, [pc, #508]	; (80010e0 <sevseg_display+0x2b4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	f200 8083 	bhi.w	8000ff0 <sevseg_display+0x1c4>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <sevseg_display+0xc4>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f01 	.word	0x08000f01
 8000ef4:	08000f3d 	.word	0x08000f3d
 8000ef8:	08000f79 	.word	0x08000f79
 8000efc:	08000fb5 	.word	0x08000fb5
		case 0:
			digit = thou;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR &= ~(1<<0); //1
 8000f04:	4b77      	ldr	r3, [pc, #476]	; (80010e4 <sevseg_display+0x2b8>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	4a76      	ldr	r2, [pc, #472]	; (80010e4 <sevseg_display+0x2b8>)
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 8000f10:	4b75      	ldr	r3, [pc, #468]	; (80010e8 <sevseg_display+0x2bc>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	4a74      	ldr	r2, [pc, #464]	; (80010e8 <sevseg_display+0x2bc>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 8000f1c:	4b72      	ldr	r3, [pc, #456]	; (80010e8 <sevseg_display+0x2bc>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a71      	ldr	r2, [pc, #452]	; (80010e8 <sevseg_display+0x2bc>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 8000f28:	4b6e      	ldr	r3, [pc, #440]	; (80010e4 <sevseg_display+0x2b8>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	4a6d      	ldr	r2, [pc, #436]	; (80010e4 <sevseg_display+0x2b8>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	6153      	str	r3, [r2, #20]
			sevsegnum = 3;
 8000f34:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <sevseg_display+0x2b4>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	601a      	str	r2, [r3, #0]
		break;
 8000f3a:	e059      	b.n	8000ff0 <sevseg_display+0x1c4>

		case 1:
			digit = hund;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <sevseg_display+0x2b8>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a67      	ldr	r2, [pc, #412]	; (80010e4 <sevseg_display+0x2b8>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<5); //2
 8000f4c:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <sevseg_display+0x2bc>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	4a65      	ldr	r2, [pc, #404]	; (80010e8 <sevseg_display+0x2bc>)
 8000f52:	f023 0320 	bic.w	r3, r3, #32
 8000f56:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 8000f58:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <sevseg_display+0x2bc>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a62      	ldr	r2, [pc, #392]	; (80010e8 <sevseg_display+0x2bc>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 8000f64:	4b5f      	ldr	r3, [pc, #380]	; (80010e4 <sevseg_display+0x2b8>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	4a5e      	ldr	r2, [pc, #376]	; (80010e4 <sevseg_display+0x2b8>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	6153      	str	r3, [r2, #20]
			sevsegnum = 0;
 8000f70:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <sevseg_display+0x2b4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
		break;
 8000f76:	e03b      	b.n	8000ff0 <sevseg_display+0x1c4>

		case 2:
			digit = tens;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 8000f7c:	4b59      	ldr	r3, [pc, #356]	; (80010e4 <sevseg_display+0x2b8>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <sevseg_display+0x2b8>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 8000f88:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <sevseg_display+0x2bc>)
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	4a56      	ldr	r2, [pc, #344]	; (80010e8 <sevseg_display+0x2bc>)
 8000f8e:	f043 0320 	orr.w	r3, r3, #32
 8000f92:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<4); //3
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <sevseg_display+0x2bc>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	4a53      	ldr	r2, [pc, #332]	; (80010e8 <sevseg_display+0x2bc>)
 8000f9a:	f023 0310 	bic.w	r3, r3, #16
 8000f9e:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 8000fa0:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <sevseg_display+0x2b8>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <sevseg_display+0x2b8>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	6153      	str	r3, [r2, #20]
			sevsegnum = 1;
 8000fac:	4b4c      	ldr	r3, [pc, #304]	; (80010e0 <sevseg_display+0x2b4>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
		break;
 8000fb2:	e01d      	b.n	8000ff0 <sevseg_display+0x1c4>

		case 3:
			digit = ones;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <sevseg_display+0x2b8>)
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <sevseg_display+0x2b8>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 8000fc4:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <sevseg_display+0x2bc>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <sevseg_display+0x2bc>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <sevseg_display+0x2bc>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <sevseg_display+0x2bc>)
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<1); //4
 8000fdc:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <sevseg_display+0x2b8>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	4a40      	ldr	r2, [pc, #256]	; (80010e4 <sevseg_display+0x2b8>)
 8000fe2:	f023 0302 	bic.w	r3, r3, #2
 8000fe6:	6153      	str	r3, [r2, #20]
			sevsegnum = 2;
 8000fe8:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <sevseg_display+0x2b4>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	601a      	str	r2, [r3, #0]
		break;
 8000fee:	bf00      	nop
		}
		switch(digit) {
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b09      	cmp	r3, #9
 8000ff4:	f200 81db 	bhi.w	80013ae <sevseg_display+0x582>
 8000ff8:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <sevseg_display+0x1d4>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001029 	.word	0x08001029
 8001004:	0800107f 	.word	0x0800107f
 8001008:	080010f1 	.word	0x080010f1
 800100c:	08001147 	.word	0x08001147
 8001010:	0800119d 	.word	0x0800119d
 8001014:	080011f3 	.word	0x080011f3
 8001018:	08001249 	.word	0x08001249
 800101c:	0800129f 	.word	0x0800129f
 8001020:	080012f5 	.word	0x080012f5
 8001024:	08001359 	.word	0x08001359
		case 0: //abcdef
			GPIOB->ODR |= (1<<3); //a
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <sevseg_display+0x2bc>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a2e      	ldr	r2, [pc, #184]	; (80010e8 <sevseg_display+0x2bc>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <sevseg_display+0x2b8>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <sevseg_display+0x2b8>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <sevseg_display+0x2c0>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	4a29      	ldr	r2, [pc, #164]	; (80010ec <sevseg_display+0x2c0>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <sevseg_display+0x2c0>)
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <sevseg_display+0x2c0>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <sevseg_display+0x2bc>)
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <sevseg_display+0x2bc>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <sevseg_display+0x2bc>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <sevseg_display+0x2bc>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <sevseg_display+0x2b8>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <sevseg_display+0x2b8>)
 8001076:	f023 0310 	bic.w	r3, r3, #16
 800107a:	6153      	str	r3, [r2, #20]
		break;
 800107c:	e197      	b.n	80013ae <sevseg_display+0x582>

		case 1:
			GPIOB->ODR &= ~(1<<3); //a
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <sevseg_display+0x2bc>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <sevseg_display+0x2bc>)
 8001084:	f023 0308 	bic.w	r3, r3, #8
 8001088:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <sevseg_display+0x2b8>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <sevseg_display+0x2b8>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <sevseg_display+0x2c0>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a14      	ldr	r2, [pc, #80]	; (80010ec <sevseg_display+0x2c0>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <sevseg_display+0x2c0>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <sevseg_display+0x2c0>)
 80010a8:	f023 0302 	bic.w	r3, r3, #2
 80010ac:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <sevseg_display+0x2bc>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <sevseg_display+0x2bc>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <sevseg_display+0x2bc>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <sevseg_display+0x2bc>)
 80010c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010c4:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <sevseg_display+0x2b8>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <sevseg_display+0x2b8>)
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	6153      	str	r3, [r2, #20]
		break;
 80010d2:	e16c      	b.n	80013ae <sevseg_display+0x582>
 80010d4:	10624dd3 	.word	0x10624dd3
 80010d8:	66666667 	.word	0x66666667
 80010dc:	51eb851f 	.word	0x51eb851f
 80010e0:	2000007c 	.word	0x2000007c
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800

		case 2:
			GPIOB->ODR |= (1<<3); //a
 80010f0:	4b96      	ldr	r3, [pc, #600]	; (800134c <sevseg_display+0x520>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	4a95      	ldr	r2, [pc, #596]	; (800134c <sevseg_display+0x520>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 80010fc:	4b94      	ldr	r3, [pc, #592]	; (8001350 <sevseg_display+0x524>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	4a93      	ldr	r2, [pc, #588]	; (8001350 <sevseg_display+0x524>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<0); //c
 8001108:	4b92      	ldr	r3, [pc, #584]	; (8001354 <sevseg_display+0x528>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a91      	ldr	r2, [pc, #580]	; (8001354 <sevseg_display+0x528>)
 800110e:	f023 0301 	bic.w	r3, r3, #1
 8001112:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8001114:	4b8f      	ldr	r3, [pc, #572]	; (8001354 <sevseg_display+0x528>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a8e      	ldr	r2, [pc, #568]	; (8001354 <sevseg_display+0x528>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 8001120:	4b8a      	ldr	r3, [pc, #552]	; (800134c <sevseg_display+0x520>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a89      	ldr	r2, [pc, #548]	; (800134c <sevseg_display+0x520>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 800112c:	4b87      	ldr	r3, [pc, #540]	; (800134c <sevseg_display+0x520>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	4a86      	ldr	r2, [pc, #536]	; (800134c <sevseg_display+0x520>)
 8001132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001136:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8001138:	4b85      	ldr	r3, [pc, #532]	; (8001350 <sevseg_display+0x524>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	4a84      	ldr	r2, [pc, #528]	; (8001350 <sevseg_display+0x524>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6153      	str	r3, [r2, #20]
		break;
 8001144:	e133      	b.n	80013ae <sevseg_display+0x582>

		case 3:
			GPIOB->ODR |= (1<<3); //a
 8001146:	4b81      	ldr	r3, [pc, #516]	; (800134c <sevseg_display+0x520>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a80      	ldr	r2, [pc, #512]	; (800134c <sevseg_display+0x520>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8001152:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <sevseg_display+0x524>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a7e      	ldr	r2, [pc, #504]	; (8001350 <sevseg_display+0x524>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115c:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 800115e:	4b7d      	ldr	r3, [pc, #500]	; (8001354 <sevseg_display+0x528>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a7c      	ldr	r2, [pc, #496]	; (8001354 <sevseg_display+0x528>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 800116a:	4b7a      	ldr	r3, [pc, #488]	; (8001354 <sevseg_display+0x528>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a79      	ldr	r2, [pc, #484]	; (8001354 <sevseg_display+0x528>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 8001176:	4b75      	ldr	r3, [pc, #468]	; (800134c <sevseg_display+0x520>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a74      	ldr	r2, [pc, #464]	; (800134c <sevseg_display+0x520>)
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 8001182:	4b72      	ldr	r3, [pc, #456]	; (800134c <sevseg_display+0x520>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a71      	ldr	r2, [pc, #452]	; (800134c <sevseg_display+0x520>)
 8001188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800118c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 800118e:	4b70      	ldr	r3, [pc, #448]	; (8001350 <sevseg_display+0x524>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	4a6f      	ldr	r2, [pc, #444]	; (8001350 <sevseg_display+0x524>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6153      	str	r3, [r2, #20]
		break;
 800119a:	e108      	b.n	80013ae <sevseg_display+0x582>

		case 4:
			GPIOB->ODR &= ~(1<<3); //a
 800119c:	4b6b      	ldr	r3, [pc, #428]	; (800134c <sevseg_display+0x520>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	4a6a      	ldr	r2, [pc, #424]	; (800134c <sevseg_display+0x520>)
 80011a2:	f023 0308 	bic.w	r3, r3, #8
 80011a6:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 80011a8:	4b69      	ldr	r3, [pc, #420]	; (8001350 <sevseg_display+0x524>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	4a68      	ldr	r2, [pc, #416]	; (8001350 <sevseg_display+0x524>)
 80011ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b2:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 80011b4:	4b67      	ldr	r3, [pc, #412]	; (8001354 <sevseg_display+0x528>)
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	4a66      	ldr	r2, [pc, #408]	; (8001354 <sevseg_display+0x528>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <sevseg_display+0x528>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	4a63      	ldr	r2, [pc, #396]	; (8001354 <sevseg_display+0x528>)
 80011c6:	f023 0302 	bic.w	r3, r3, #2
 80011ca:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80011cc:	4b5f      	ldr	r3, [pc, #380]	; (800134c <sevseg_display+0x520>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	4a5e      	ldr	r2, [pc, #376]	; (800134c <sevseg_display+0x520>)
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 80011d8:	4b5c      	ldr	r3, [pc, #368]	; (800134c <sevseg_display+0x520>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	4a5b      	ldr	r2, [pc, #364]	; (800134c <sevseg_display+0x520>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e2:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 80011e4:	4b5a      	ldr	r3, [pc, #360]	; (8001350 <sevseg_display+0x524>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	4a59      	ldr	r2, [pc, #356]	; (8001350 <sevseg_display+0x524>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6153      	str	r3, [r2, #20]
		break;
 80011f0:	e0dd      	b.n	80013ae <sevseg_display+0x582>

		case 5:
			GPIOB->ODR |= (1<<3); //a
 80011f2:	4b56      	ldr	r3, [pc, #344]	; (800134c <sevseg_display+0x520>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a55      	ldr	r2, [pc, #340]	; (800134c <sevseg_display+0x520>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<8); //b
 80011fe:	4b54      	ldr	r3, [pc, #336]	; (8001350 <sevseg_display+0x524>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a53      	ldr	r2, [pc, #332]	; (8001350 <sevseg_display+0x524>)
 8001204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001208:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <sevseg_display+0x528>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a51      	ldr	r2, [pc, #324]	; (8001354 <sevseg_display+0x528>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8001216:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <sevseg_display+0x528>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <sevseg_display+0x528>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <sevseg_display+0x520>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	4a49      	ldr	r2, [pc, #292]	; (800134c <sevseg_display+0x520>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <sevseg_display+0x520>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a46      	ldr	r2, [pc, #280]	; (800134c <sevseg_display+0x520>)
 8001234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001238:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 800123a:	4b45      	ldr	r3, [pc, #276]	; (8001350 <sevseg_display+0x524>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	4a44      	ldr	r2, [pc, #272]	; (8001350 <sevseg_display+0x524>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6153      	str	r3, [r2, #20]
		break;
 8001246:	e0b2      	b.n	80013ae <sevseg_display+0x582>

		case 6:
			GPIOB->ODR |= (1<<3); //a
 8001248:	4b40      	ldr	r3, [pc, #256]	; (800134c <sevseg_display+0x520>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	4a3f      	ldr	r2, [pc, #252]	; (800134c <sevseg_display+0x520>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<8); //b
 8001254:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <sevseg_display+0x524>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	4a3d      	ldr	r2, [pc, #244]	; (8001350 <sevseg_display+0x524>)
 800125a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800125e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001260:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <sevseg_display+0x528>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a3b      	ldr	r2, [pc, #236]	; (8001354 <sevseg_display+0x528>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 800126c:	4b39      	ldr	r3, [pc, #228]	; (8001354 <sevseg_display+0x528>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	4a38      	ldr	r2, [pc, #224]	; (8001354 <sevseg_display+0x528>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 8001278:	4b34      	ldr	r3, [pc, #208]	; (800134c <sevseg_display+0x520>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	4a33      	ldr	r2, [pc, #204]	; (800134c <sevseg_display+0x520>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <sevseg_display+0x520>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	4a30      	ldr	r2, [pc, #192]	; (800134c <sevseg_display+0x520>)
 800128a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128e:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8001290:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <sevseg_display+0x524>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	4a2e      	ldr	r2, [pc, #184]	; (8001350 <sevseg_display+0x524>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6153      	str	r3, [r2, #20]
		break;
 800129c:	e087      	b.n	80013ae <sevseg_display+0x582>

		case 7:
			GPIOB->ODR |= (1<<3); //a
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <sevseg_display+0x520>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	4a2a      	ldr	r2, [pc, #168]	; (800134c <sevseg_display+0x520>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 80012aa:	4b29      	ldr	r3, [pc, #164]	; (8001350 <sevseg_display+0x524>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a28      	ldr	r2, [pc, #160]	; (8001350 <sevseg_display+0x524>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <sevseg_display+0x528>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a26      	ldr	r2, [pc, #152]	; (8001354 <sevseg_display+0x528>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <sevseg_display+0x528>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <sevseg_display+0x528>)
 80012c8:	f023 0302 	bic.w	r3, r3, #2
 80012cc:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <sevseg_display+0x520>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <sevseg_display+0x520>)
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <sevseg_display+0x520>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a1b      	ldr	r2, [pc, #108]	; (800134c <sevseg_display+0x520>)
 80012e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012e4:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <sevseg_display+0x524>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <sevseg_display+0x524>)
 80012ec:	f023 0310 	bic.w	r3, r3, #16
 80012f0:	6153      	str	r3, [r2, #20]
		break;
 80012f2:	e05c      	b.n	80013ae <sevseg_display+0x582>

		case 8:
			GPIOB->ODR |= (1<<3); //a
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <sevseg_display+0x520>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <sevseg_display+0x520>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <sevseg_display+0x524>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <sevseg_display+0x524>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <sevseg_display+0x528>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	4a10      	ldr	r2, [pc, #64]	; (8001354 <sevseg_display+0x528>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <sevseg_display+0x528>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <sevseg_display+0x528>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <sevseg_display+0x520>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <sevseg_display+0x520>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <sevseg_display+0x520>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <sevseg_display+0x520>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <sevseg_display+0x524>)
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	4a03      	ldr	r2, [pc, #12]	; (8001350 <sevseg_display+0x524>)
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	6153      	str	r3, [r2, #20]
		break;
 8001348:	e031      	b.n	80013ae <sevseg_display+0x582>
 800134a:	bf00      	nop
 800134c:	40020400 	.word	0x40020400
 8001350:	40020000 	.word	0x40020000
 8001354:	40020800 	.word	0x40020800

		case 9:
			GPIOB->ODR |= (1<<3); //a
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <sevseg_display+0x5a4>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <sevseg_display+0x5a4>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <sevseg_display+0x5a8>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <sevseg_display+0x5a8>)
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <sevseg_display+0x5ac>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <sevseg_display+0x5ac>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <sevseg_display+0x5ac>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <sevseg_display+0x5ac>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <sevseg_display+0x5a4>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <sevseg_display+0x5a4>)
 800138e:	f023 0301 	bic.w	r3, r3, #1
 8001392:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <sevseg_display+0x5a4>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <sevseg_display+0x5a4>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <sevseg_display+0x5a8>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <sevseg_display+0x5a8>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6153      	str	r3, [r2, #20]
		break;
 80013ac:	bf00      	nop
		}
		for (int j=0; j<1000; j++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	e002      	b.n	80013ba <sevseg_display+0x58e>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	3301      	adds	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c0:	dbf8      	blt.n	80013b4 <sevseg_display+0x588>

	//GPIOA->ODR |= (1<<0); //1
	//GPIOB->ODR |= (1<<4); //2
	//GPIOB->ODR |= (1<<5); //3
	//GPIOC->ODR |= (1<<0); //4
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	3724      	adds	r7, #36	; 0x24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020800 	.word	0x40020800

080013dc <alert>:

void alert(int alert){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	// 0 for green, 1 for yellow, 2 for red
	switch (alert){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d02f      	beq.n	800144a <alert+0x6e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	dc3f      	bgt.n	8001470 <alert+0x94>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <alert+0x22>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d013      	beq.n	8001424 <alert+0x48>
		GPIOC->ODR |= (1<<9);
		GPIOB->ODR &= ~(1<<8);
		GPIOB->ODR &= ~(1<<9);
		break;
	}
}
 80013fc:	e038      	b.n	8001470 <alert+0x94>
		GPIOC->ODR &= ~(1<<9);
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <alert+0xa0>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <alert+0xa0>)
 8001404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001408:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<8);
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <alert+0xa4>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <alert+0xa4>)
 8001410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001414:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= (1<<9);
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <alert+0xa4>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <alert+0xa4>)
 800141c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001420:	6153      	str	r3, [r2, #20]
		break;
 8001422:	e025      	b.n	8001470 <alert+0x94>
		GPIOC->ODR &= ~(1<<9);
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <alert+0xa0>)
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <alert+0xa0>)
 800142a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800142e:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= (1<<8);
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <alert+0xa4>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <alert+0xa4>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143a:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <alert+0xa4>)
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <alert+0xa4>)
 8001442:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001446:	6153      	str	r3, [r2, #20]
		break;
 8001448:	e012      	b.n	8001470 <alert+0x94>
		GPIOC->ODR |= (1<<9);
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <alert+0xa0>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <alert+0xa0>)
 8001450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001454:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<8);
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <alert+0xa4>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <alert+0xa4>)
 800145c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001460:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <alert+0xa4>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <alert+0xa4>)
 8001468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800146c:	6153      	str	r3, [r2, #20]
		break;
 800146e:	bf00      	nop
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40020800 	.word	0x40020800
 8001480:	40020400 	.word	0x40020400

08001484 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	sevseg_display(sevseg_data);
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <TIM4_IRQHandler+0x20>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fccd 	bl	8000e2c <sevseg_display>
	TIM4->SR &= ~(5<<0); // Clear UIF update interrupt flag
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <TIM4_IRQHandler+0x24>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <TIM4_IRQHandler+0x24>)
 8001498:	f023 0305 	bic.w	r3, r3, #5
 800149c:	6113      	str	r3, [r2, #16]
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000000 	.word	0x20000000
 80014a8:	40000800 	.word	0x40000800

080014ac <Usart1_Init>:

void Usart1_Init(){
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1<<0);
 80014b0:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <Usart1_Init+0x11c>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a44      	ldr	r2, [pc, #272]	; (80015c8 <Usart1_Init+0x11c>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(1<<18); // PA9
 80014bc:	4b43      	ldr	r3, [pc, #268]	; (80015cc <Usart1_Init+0x120>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a42      	ldr	r2, [pc, #264]	; (80015cc <Usart1_Init+0x120>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<19);
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <Usart1_Init+0x120>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a3f      	ldr	r2, [pc, #252]	; (80015cc <Usart1_Init+0x120>)
 80014ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014d2:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(1<<20); // PA10
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <Usart1_Init+0x120>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <Usart1_Init+0x120>)
 80014da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<21);
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <Usart1_Init+0x120>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a39      	ldr	r2, [pc, #228]	; (80015cc <Usart1_Init+0x120>)
 80014e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ea:	6013      	str	r3, [r2, #0]

	//GPIOA->AFR[1] = (136<<12); // set both PA9 and PA10 to AFRH
	GPIOA->AFR[1] &= ~(0x00000FF0);
 80014ec:	4b37      	ldr	r3, [pc, #220]	; (80015cc <Usart1_Init+0x120>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	4a36      	ldr	r2, [pc, #216]	; (80015cc <Usart1_Init+0x120>)
 80014f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80014f6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=  (0x00000770);
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <Usart1_Init+0x120>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	4a33      	ldr	r2, [pc, #204]	; (80015cc <Usart1_Init+0x120>)
 80014fe:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8001502:	6253      	str	r3, [r2, #36]	; 0x24

	RCC->APB2ENR |= (1<<4);	// Enable USART1 peripheral
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <Usart1_Init+0x11c>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <Usart1_Init+0x11c>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= (1 << 4);	// Reset the whole peripheral
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <Usart1_Init+0x11c>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	4a2c      	ldr	r2, [pc, #176]	; (80015c8 <Usart1_Init+0x11c>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~(1 << 4);
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <Usart1_Init+0x11c>)
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <Usart1_Init+0x11c>)
 8001522:	f023 0310 	bic.w	r3, r3, #16
 8001526:	6253      	str	r3, [r2, #36]	; 0x24

	USART1->CR1 &= ~(0b11 << 2); // disable USART1 RX and TX for now
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <Usart1_Init+0x124>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <Usart1_Init+0x124>)
 800152e:	f023 030c 	bic.w	r3, r3, #12
 8001532:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |=  (1 << 13); // enable USART1
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <Usart1_Init+0x124>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <Usart1_Init+0x124>)
 800153a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800153e:	60d3      	str	r3, [r2, #12]

	USART1->BRR &= ~(0x0000FFFF);
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <Usart1_Init+0x124>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <Usart1_Init+0x124>)
 8001546:	0c1b      	lsrs	r3, r3, #16
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	6093      	str	r3, [r2, #8]
	USART1->BRR |= (0x00000683);
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <Usart1_Init+0x124>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <Usart1_Init+0x124>)
 8001552:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8001556:	f043 0303 	orr.w	r3, r3, #3
 800155a:	6093      	str	r3, [r2, #8]

	USART1->CR1 &= ~(1 << 15);	// OVER8 = 0
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <Usart1_Init+0x124>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <Usart1_Init+0x124>)
 8001562:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001566:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~(0b11 << 12);	// One (1) stop bit
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <Usart1_Init+0x124>)
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <Usart1_Init+0x124>)
 800156e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001572:	6113      	str	r3, [r2, #16]
	USART1->CR1 &= ~(1 << 10);	// No parity
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <Usart1_Init+0x124>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <Usart1_Init+0x124>)
 800157a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800157e:	60d3      	str	r3, [r2, #12]

	USART1->CR2 &= ~(1 << 11);
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <Usart1_Init+0x124>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <Usart1_Init+0x124>)
 8001586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800158a:	6113      	str	r3, [r2, #16]
	USART1->CR1 &= ~(1 << 12);
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <Usart1_Init+0x124>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <Usart1_Init+0x124>)
 8001592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001596:	60d3      	str	r3, [r2, #12]
	USART1->CR3 &= ~(0b11 << 8);
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <Usart1_Init+0x124>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <Usart1_Init+0x124>)
 800159e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015a2:	6153      	str	r3, [r2, #20]

	NVIC->IP[37] = (2 << 4) & 0xff; // Set priority to 2
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <Usart1_Init+0x128>)
 80015a6:	2220      	movs	r2, #32
 80015a8:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
	NVIC->ISER[1] = (1 << 5); // position 71, ISER 1, bit 5
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <Usart1_Init+0x128>)
 80015ae:	2220      	movs	r2, #32
 80015b0:	605a      	str	r2, [r3, #4]

	USART1->CR1 |= (0b1011<<2);
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <Usart1_Init+0x124>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <Usart1_Init+0x124>)
 80015b8:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80015bc:	60d3      	str	r3, [r2, #12]

}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40011000 	.word	0x40011000
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <USART1_IRQHandler>:

void USART1_IRQHandler(void){
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

	if(USART1->SR & 1<<5){
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <USART1_IRQHandler+0x44>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <USART1_IRQHandler+0x38>

		data2Buffer[data2Index] = USART1->DR;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <USART1_IRQHandler+0x44>)
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <USART1_IRQHandler+0x48>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b2d1      	uxtb	r1, r2
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <USART1_IRQHandler+0x4c>)
 80015f4:	54d1      	strb	r1, [r2, r3]
		data2Index += 1;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <USART1_IRQHandler+0x48>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <USART1_IRQHandler+0x48>)
 80015fe:	6013      	str	r3, [r2, #0]
		if (data2Index >= 300){
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <USART1_IRQHandler+0x48>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001608:	db02      	blt.n	8001610 <USART1_IRQHandler+0x38>
			data2Index = 0;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <USART1_IRQHandler+0x48>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40011000 	.word	0x40011000
 8001620:	200001b8 	.word	0x200001b8
 8001624:	200001bc 	.word	0x200001bc

08001628 <readPM25>:

void readPM25(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	curbufind = 0;
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <readPM25+0xac>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
	found = 0;
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <readPM25+0xb0>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
	while (!found){
 8001638:	e02e      	b.n	8001698 <readPM25+0x70>
		if (data2Buffer[curbufind] == 66 && curbufind < 200){
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <readPM25+0xac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a27      	ldr	r2, [pc, #156]	; (80016dc <readPM25+0xb4>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	2b42      	cmp	r3, #66	; 0x42
 8001644:	d11b      	bne.n	800167e <readPM25+0x56>
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <readPM25+0xac>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2bc7      	cmp	r3, #199	; 0xc7
 800164c:	dc17      	bgt.n	800167e <readPM25+0x56>
			if (data2Buffer[curbufind + 1] == 77) {
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <readPM25+0xac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <readPM25+0xb4>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	2b4d      	cmp	r3, #77	; 0x4d
 800165a:	d110      	bne.n	800167e <readPM25+0x56>
				found = 1;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <readPM25+0xb0>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]
				//(buf[8] << 8) + buf[9];
				PM25 = (data2Buffer[curbufind + 8] << 8) + data2Buffer[curbufind + 9];
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <readPM25+0xac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3308      	adds	r3, #8
 8001668:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <readPM25+0xb4>)
 800166a:	5cd3      	ldrb	r3, [r2, r3]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <readPM25+0xac>)
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	3209      	adds	r2, #9
 8001674:	4919      	ldr	r1, [pc, #100]	; (80016dc <readPM25+0xb4>)
 8001676:	5c8a      	ldrb	r2, [r1, r2]
 8001678:	4413      	add	r3, r2
 800167a:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <readPM25+0xb8>)
 800167c:	6013      	str	r3, [r2, #0]
				}
			}
		curbufind++;
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <readPM25+0xac>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <readPM25+0xac>)
 8001686:	6013      	str	r3, [r2, #0]
		if (curbufind >= 300){
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <readPM25+0xac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001690:	db02      	blt.n	8001698 <readPM25+0x70>
			curbufind = 0;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <readPM25+0xac>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
	while (!found){
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <readPM25+0xb0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0cc      	beq.n	800163a <readPM25+0x12>
		}
	}
	sevseg_data = PM25;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <readPM25+0xb8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <readPM25+0xbc>)
 80016a6:	6013      	str	r3, [r2, #0]

	if (PM25 <= 25) {
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <readPM25+0xb8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b19      	cmp	r3, #25
 80016ae:	dc03      	bgt.n	80016b8 <readPM25+0x90>
		alert(2);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f7ff fe93 	bl	80013dc <alert>
	} else if (PM25 <= 35) {
		alert(1);
	} else {
		alert(0);
	}
}
 80016b6:	e00a      	b.n	80016ce <readPM25+0xa6>
	} else if (PM25 <= 35) {
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <readPM25+0xb8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b23      	cmp	r3, #35	; 0x23
 80016be:	dc03      	bgt.n	80016c8 <readPM25+0xa0>
		alert(1);
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff fe8b 	bl	80013dc <alert>
}
 80016c6:	e002      	b.n	80016ce <readPM25+0xa6>
		alert(0);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff fe87 	bl	80013dc <alert>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200002ec 	.word	0x200002ec
 80016d8:	200002f0 	.word	0x200002f0
 80016dc:	200001bc 	.word	0x200001bc
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000000 	.word	0x20000000

080016e8 <main>:

int main (void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	sevseg_init();
 80016ee:	f7ff fa29 	bl	8000b44 <sevseg_init>
	Tim2_Init();
 80016f2:	f7fe ff1d 	bl	8000530 <Tim2_Init>
	Tim3_Init();
 80016f6:	f7fe ffd7 	bl	80006a8 <Tim3_Init>
	Usart6_Init();
 80016fa:	f7ff f863 	bl	80007c4 <Usart6_Init>
	Usart1_Init();
 80016fe:	f7ff fed5 	bl	80014ac <Usart1_Init>
//			}


//	ESP8266_Init("EEE192-429", "EEE192_Room429");
//	ESP8266_Init("_WiFi@UPD", "");
	ESP8266_Init("owo", "mamamopassword");
 8001702:	4911      	ldr	r1, [pc, #68]	; (8001748 <main+0x60>)
 8001704:	4811      	ldr	r0, [pc, #68]	; (800174c <main+0x64>)
 8001706:	f7fe fdc3 	bl	8000290 <ESP8266_Init>
//	ESP8266_Init("iPhone (8)", "bl3ugh@93");
//	ESP8266_Init("PLDTHOMEFIBRXFGxc", "PLDTWIFIae7dL");

	while(1){

		break_wait_for = 0;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <main+0x68>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

		checker_1 = 2;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <main+0x6c>)
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
		ESP8266_Send_Data("PV6OUPDQYB5A6QS4", 1, sevseg_data);
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <main+0x70>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	2101      	movs	r1, #1
 800171e:	480f      	ldr	r0, [pc, #60]	; (800175c <main+0x74>)
 8001720:	f7fe fe50 	bl	80003c4 <ESP8266_Send_Data>
		checker_1 = 3;
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <main+0x6c>)
 8001726:	2203      	movs	r2, #3
 8001728:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 20; i++){
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	e007      	b.n	8001740 <main+0x58>
			readPM25();
 8001730:	f7ff ff7a 	bl	8001628 <readPM25>
			delay_s(1);
 8001734:	2001      	movs	r0, #1
 8001736:	f7fe ff8a 	bl	800064e <delay_s>
		for (int i = 0; i < 20; i++){
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3301      	adds	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b13      	cmp	r3, #19
 8001744:	ddf4      	ble.n	8001730 <main+0x48>
		break_wait_for = 0;
 8001746:	e7e0      	b.n	800170a <main+0x22>
 8001748:	080022dc 	.word	0x080022dc
 800174c:	080022ec 	.word	0x080022ec
 8001750:	200002f8 	.word	0x200002f8
 8001754:	20000080 	.word	0x20000080
 8001758:	20000000 	.word	0x20000000
 800175c:	080022f0 	.word	0x080022f0

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ac:	f000 f874 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <_sbrk+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <_sbrk+0x60>)
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <_sbrk+0x64>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <_sbrk+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e4:	f000 f88c 	bl	8001900 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	220c      	movs	r2, #12
 80017ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e009      	b.n	8001808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_sbrk+0x64>)
 8001804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20020000 	.word	0x20020000
 8001814:	00000400 	.word	0x00000400
 8001818:	200002fc 	.word	0x200002fc
 800181c:	20000450 	.word	0x20000450

08001820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <SystemInit+0x20>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <SystemInit+0x20>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800187c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800184a:	490e      	ldr	r1, [pc, #56]	; (8001884 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001860:	4c0b      	ldr	r4, [pc, #44]	; (8001890 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800186e:	f7ff ffd7 	bl	8001820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f000 f84b 	bl	800190c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001876:	f7ff ff37 	bl	80016e8 <main>
  bx  lr    
 800187a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800187c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001888:	0800233c 	.word	0x0800233c
  ldr r2, =_sbss
 800188c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001890:	2000044c 	.word	0x2000044c

08001894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	20000300 	.word	0x20000300

080018c0 <siprintf>:
 80018c0:	b40e      	push	{r1, r2, r3}
 80018c2:	b500      	push	{lr}
 80018c4:	b09c      	sub	sp, #112	; 0x70
 80018c6:	ab1d      	add	r3, sp, #116	; 0x74
 80018c8:	9002      	str	r0, [sp, #8]
 80018ca:	9006      	str	r0, [sp, #24]
 80018cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <siprintf+0x38>)
 80018d2:	9107      	str	r1, [sp, #28]
 80018d4:	9104      	str	r1, [sp, #16]
 80018d6:	4909      	ldr	r1, [pc, #36]	; (80018fc <siprintf+0x3c>)
 80018d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80018dc:	9105      	str	r1, [sp, #20]
 80018de:	6800      	ldr	r0, [r0, #0]
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	a902      	add	r1, sp, #8
 80018e4:	f000 f98a 	bl	8001bfc <_svfiprintf_r>
 80018e8:	9b02      	ldr	r3, [sp, #8]
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	b01c      	add	sp, #112	; 0x70
 80018f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80018f4:	b003      	add	sp, #12
 80018f6:	4770      	bx	lr
 80018f8:	2000005c 	.word	0x2000005c
 80018fc:	ffff0208 	.word	0xffff0208

08001900 <__errno>:
 8001900:	4b01      	ldr	r3, [pc, #4]	; (8001908 <__errno+0x8>)
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2000005c 	.word	0x2000005c

0800190c <__libc_init_array>:
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	4d0d      	ldr	r5, [pc, #52]	; (8001944 <__libc_init_array+0x38>)
 8001910:	4c0d      	ldr	r4, [pc, #52]	; (8001948 <__libc_init_array+0x3c>)
 8001912:	1b64      	subs	r4, r4, r5
 8001914:	10a4      	asrs	r4, r4, #2
 8001916:	2600      	movs	r6, #0
 8001918:	42a6      	cmp	r6, r4
 800191a:	d109      	bne.n	8001930 <__libc_init_array+0x24>
 800191c:	4d0b      	ldr	r5, [pc, #44]	; (800194c <__libc_init_array+0x40>)
 800191e:	4c0c      	ldr	r4, [pc, #48]	; (8001950 <__libc_init_array+0x44>)
 8001920:	f000 fc6a 	bl	80021f8 <_init>
 8001924:	1b64      	subs	r4, r4, r5
 8001926:	10a4      	asrs	r4, r4, #2
 8001928:	2600      	movs	r6, #0
 800192a:	42a6      	cmp	r6, r4
 800192c:	d105      	bne.n	800193a <__libc_init_array+0x2e>
 800192e:	bd70      	pop	{r4, r5, r6, pc}
 8001930:	f855 3b04 	ldr.w	r3, [r5], #4
 8001934:	4798      	blx	r3
 8001936:	3601      	adds	r6, #1
 8001938:	e7ee      	b.n	8001918 <__libc_init_array+0xc>
 800193a:	f855 3b04 	ldr.w	r3, [r5], #4
 800193e:	4798      	blx	r3
 8001940:	3601      	adds	r6, #1
 8001942:	e7f2      	b.n	800192a <__libc_init_array+0x1e>
 8001944:	08002334 	.word	0x08002334
 8001948:	08002334 	.word	0x08002334
 800194c:	08002334 	.word	0x08002334
 8001950:	08002338 	.word	0x08002338

08001954 <__retarget_lock_acquire_recursive>:
 8001954:	4770      	bx	lr

08001956 <__retarget_lock_release_recursive>:
 8001956:	4770      	bx	lr

08001958 <_free_r>:
 8001958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800195a:	2900      	cmp	r1, #0
 800195c:	d044      	beq.n	80019e8 <_free_r+0x90>
 800195e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001962:	9001      	str	r0, [sp, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f1a1 0404 	sub.w	r4, r1, #4
 800196a:	bfb8      	it	lt
 800196c:	18e4      	addlt	r4, r4, r3
 800196e:	f000 f8df 	bl	8001b30 <__malloc_lock>
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <_free_r+0x94>)
 8001974:	9801      	ldr	r0, [sp, #4]
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	b933      	cbnz	r3, 8001988 <_free_r+0x30>
 800197a:	6063      	str	r3, [r4, #4]
 800197c:	6014      	str	r4, [r2, #0]
 800197e:	b003      	add	sp, #12
 8001980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001984:	f000 b8da 	b.w	8001b3c <__malloc_unlock>
 8001988:	42a3      	cmp	r3, r4
 800198a:	d908      	bls.n	800199e <_free_r+0x46>
 800198c:	6825      	ldr	r5, [r4, #0]
 800198e:	1961      	adds	r1, r4, r5
 8001990:	428b      	cmp	r3, r1
 8001992:	bf01      	itttt	eq
 8001994:	6819      	ldreq	r1, [r3, #0]
 8001996:	685b      	ldreq	r3, [r3, #4]
 8001998:	1949      	addeq	r1, r1, r5
 800199a:	6021      	streq	r1, [r4, #0]
 800199c:	e7ed      	b.n	800197a <_free_r+0x22>
 800199e:	461a      	mov	r2, r3
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	b10b      	cbz	r3, 80019a8 <_free_r+0x50>
 80019a4:	42a3      	cmp	r3, r4
 80019a6:	d9fa      	bls.n	800199e <_free_r+0x46>
 80019a8:	6811      	ldr	r1, [r2, #0]
 80019aa:	1855      	adds	r5, r2, r1
 80019ac:	42a5      	cmp	r5, r4
 80019ae:	d10b      	bne.n	80019c8 <_free_r+0x70>
 80019b0:	6824      	ldr	r4, [r4, #0]
 80019b2:	4421      	add	r1, r4
 80019b4:	1854      	adds	r4, r2, r1
 80019b6:	42a3      	cmp	r3, r4
 80019b8:	6011      	str	r1, [r2, #0]
 80019ba:	d1e0      	bne.n	800197e <_free_r+0x26>
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	6053      	str	r3, [r2, #4]
 80019c2:	440c      	add	r4, r1
 80019c4:	6014      	str	r4, [r2, #0]
 80019c6:	e7da      	b.n	800197e <_free_r+0x26>
 80019c8:	d902      	bls.n	80019d0 <_free_r+0x78>
 80019ca:	230c      	movs	r3, #12
 80019cc:	6003      	str	r3, [r0, #0]
 80019ce:	e7d6      	b.n	800197e <_free_r+0x26>
 80019d0:	6825      	ldr	r5, [r4, #0]
 80019d2:	1961      	adds	r1, r4, r5
 80019d4:	428b      	cmp	r3, r1
 80019d6:	bf04      	itt	eq
 80019d8:	6819      	ldreq	r1, [r3, #0]
 80019da:	685b      	ldreq	r3, [r3, #4]
 80019dc:	6063      	str	r3, [r4, #4]
 80019de:	bf04      	itt	eq
 80019e0:	1949      	addeq	r1, r1, r5
 80019e2:	6021      	streq	r1, [r4, #0]
 80019e4:	6054      	str	r4, [r2, #4]
 80019e6:	e7ca      	b.n	800197e <_free_r+0x26>
 80019e8:	b003      	add	sp, #12
 80019ea:	bd30      	pop	{r4, r5, pc}
 80019ec:	20000444 	.word	0x20000444

080019f0 <sbrk_aligned>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	4e0e      	ldr	r6, [pc, #56]	; (8001a2c <sbrk_aligned+0x3c>)
 80019f4:	460c      	mov	r4, r1
 80019f6:	6831      	ldr	r1, [r6, #0]
 80019f8:	4605      	mov	r5, r0
 80019fa:	b911      	cbnz	r1, 8001a02 <sbrk_aligned+0x12>
 80019fc:	f000 fba6 	bl	800214c <_sbrk_r>
 8001a00:	6030      	str	r0, [r6, #0]
 8001a02:	4621      	mov	r1, r4
 8001a04:	4628      	mov	r0, r5
 8001a06:	f000 fba1 	bl	800214c <_sbrk_r>
 8001a0a:	1c43      	adds	r3, r0, #1
 8001a0c:	d00a      	beq.n	8001a24 <sbrk_aligned+0x34>
 8001a0e:	1cc4      	adds	r4, r0, #3
 8001a10:	f024 0403 	bic.w	r4, r4, #3
 8001a14:	42a0      	cmp	r0, r4
 8001a16:	d007      	beq.n	8001a28 <sbrk_aligned+0x38>
 8001a18:	1a21      	subs	r1, r4, r0
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f000 fb96 	bl	800214c <_sbrk_r>
 8001a20:	3001      	adds	r0, #1
 8001a22:	d101      	bne.n	8001a28 <sbrk_aligned+0x38>
 8001a24:	f04f 34ff 	mov.w	r4, #4294967295
 8001a28:	4620      	mov	r0, r4
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}
 8001a2c:	20000448 	.word	0x20000448

08001a30 <_malloc_r>:
 8001a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a34:	1ccd      	adds	r5, r1, #3
 8001a36:	f025 0503 	bic.w	r5, r5, #3
 8001a3a:	3508      	adds	r5, #8
 8001a3c:	2d0c      	cmp	r5, #12
 8001a3e:	bf38      	it	cc
 8001a40:	250c      	movcc	r5, #12
 8001a42:	2d00      	cmp	r5, #0
 8001a44:	4607      	mov	r7, r0
 8001a46:	db01      	blt.n	8001a4c <_malloc_r+0x1c>
 8001a48:	42a9      	cmp	r1, r5
 8001a4a:	d905      	bls.n	8001a58 <_malloc_r+0x28>
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	2600      	movs	r6, #0
 8001a52:	4630      	mov	r0, r6
 8001a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001b2c <_malloc_r+0xfc>
 8001a5c:	f000 f868 	bl	8001b30 <__malloc_lock>
 8001a60:	f8d8 3000 	ldr.w	r3, [r8]
 8001a64:	461c      	mov	r4, r3
 8001a66:	bb5c      	cbnz	r4, 8001ac0 <_malloc_r+0x90>
 8001a68:	4629      	mov	r1, r5
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	f7ff ffc0 	bl	80019f0 <sbrk_aligned>
 8001a70:	1c43      	adds	r3, r0, #1
 8001a72:	4604      	mov	r4, r0
 8001a74:	d155      	bne.n	8001b22 <_malloc_r+0xf2>
 8001a76:	f8d8 4000 	ldr.w	r4, [r8]
 8001a7a:	4626      	mov	r6, r4
 8001a7c:	2e00      	cmp	r6, #0
 8001a7e:	d145      	bne.n	8001b0c <_malloc_r+0xdc>
 8001a80:	2c00      	cmp	r4, #0
 8001a82:	d048      	beq.n	8001b16 <_malloc_r+0xe6>
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	4631      	mov	r1, r6
 8001a88:	4638      	mov	r0, r7
 8001a8a:	eb04 0903 	add.w	r9, r4, r3
 8001a8e:	f000 fb5d 	bl	800214c <_sbrk_r>
 8001a92:	4581      	cmp	r9, r0
 8001a94:	d13f      	bne.n	8001b16 <_malloc_r+0xe6>
 8001a96:	6821      	ldr	r1, [r4, #0]
 8001a98:	1a6d      	subs	r5, r5, r1
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	4638      	mov	r0, r7
 8001a9e:	f7ff ffa7 	bl	80019f0 <sbrk_aligned>
 8001aa2:	3001      	adds	r0, #1
 8001aa4:	d037      	beq.n	8001b16 <_malloc_r+0xe6>
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	442b      	add	r3, r5
 8001aaa:	6023      	str	r3, [r4, #0]
 8001aac:	f8d8 3000 	ldr.w	r3, [r8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d038      	beq.n	8001b26 <_malloc_r+0xf6>
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	42a2      	cmp	r2, r4
 8001ab8:	d12b      	bne.n	8001b12 <_malloc_r+0xe2>
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	e00f      	b.n	8001ae0 <_malloc_r+0xb0>
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	1b52      	subs	r2, r2, r5
 8001ac4:	d41f      	bmi.n	8001b06 <_malloc_r+0xd6>
 8001ac6:	2a0b      	cmp	r2, #11
 8001ac8:	d917      	bls.n	8001afa <_malloc_r+0xca>
 8001aca:	1961      	adds	r1, r4, r5
 8001acc:	42a3      	cmp	r3, r4
 8001ace:	6025      	str	r5, [r4, #0]
 8001ad0:	bf18      	it	ne
 8001ad2:	6059      	strne	r1, [r3, #4]
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	bf08      	it	eq
 8001ad8:	f8c8 1000 	streq.w	r1, [r8]
 8001adc:	5162      	str	r2, [r4, r5]
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	4638      	mov	r0, r7
 8001ae2:	f104 060b 	add.w	r6, r4, #11
 8001ae6:	f000 f829 	bl	8001b3c <__malloc_unlock>
 8001aea:	f026 0607 	bic.w	r6, r6, #7
 8001aee:	1d23      	adds	r3, r4, #4
 8001af0:	1af2      	subs	r2, r6, r3
 8001af2:	d0ae      	beq.n	8001a52 <_malloc_r+0x22>
 8001af4:	1b9b      	subs	r3, r3, r6
 8001af6:	50a3      	str	r3, [r4, r2]
 8001af8:	e7ab      	b.n	8001a52 <_malloc_r+0x22>
 8001afa:	42a3      	cmp	r3, r4
 8001afc:	6862      	ldr	r2, [r4, #4]
 8001afe:	d1dd      	bne.n	8001abc <_malloc_r+0x8c>
 8001b00:	f8c8 2000 	str.w	r2, [r8]
 8001b04:	e7ec      	b.n	8001ae0 <_malloc_r+0xb0>
 8001b06:	4623      	mov	r3, r4
 8001b08:	6864      	ldr	r4, [r4, #4]
 8001b0a:	e7ac      	b.n	8001a66 <_malloc_r+0x36>
 8001b0c:	4634      	mov	r4, r6
 8001b0e:	6876      	ldr	r6, [r6, #4]
 8001b10:	e7b4      	b.n	8001a7c <_malloc_r+0x4c>
 8001b12:	4613      	mov	r3, r2
 8001b14:	e7cc      	b.n	8001ab0 <_malloc_r+0x80>
 8001b16:	230c      	movs	r3, #12
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4638      	mov	r0, r7
 8001b1c:	f000 f80e 	bl	8001b3c <__malloc_unlock>
 8001b20:	e797      	b.n	8001a52 <_malloc_r+0x22>
 8001b22:	6025      	str	r5, [r4, #0]
 8001b24:	e7dc      	b.n	8001ae0 <_malloc_r+0xb0>
 8001b26:	605b      	str	r3, [r3, #4]
 8001b28:	deff      	udf	#255	; 0xff
 8001b2a:	bf00      	nop
 8001b2c:	20000444 	.word	0x20000444

08001b30 <__malloc_lock>:
 8001b30:	4801      	ldr	r0, [pc, #4]	; (8001b38 <__malloc_lock+0x8>)
 8001b32:	f7ff bf0f 	b.w	8001954 <__retarget_lock_acquire_recursive>
 8001b36:	bf00      	nop
 8001b38:	20000440 	.word	0x20000440

08001b3c <__malloc_unlock>:
 8001b3c:	4801      	ldr	r0, [pc, #4]	; (8001b44 <__malloc_unlock+0x8>)
 8001b3e:	f7ff bf0a 	b.w	8001956 <__retarget_lock_release_recursive>
 8001b42:	bf00      	nop
 8001b44:	20000440 	.word	0x20000440

08001b48 <__ssputs_r>:
 8001b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b4c:	688e      	ldr	r6, [r1, #8]
 8001b4e:	461f      	mov	r7, r3
 8001b50:	42be      	cmp	r6, r7
 8001b52:	680b      	ldr	r3, [r1, #0]
 8001b54:	4682      	mov	sl, r0
 8001b56:	460c      	mov	r4, r1
 8001b58:	4690      	mov	r8, r2
 8001b5a:	d82c      	bhi.n	8001bb6 <__ssputs_r+0x6e>
 8001b5c:	898a      	ldrh	r2, [r1, #12]
 8001b5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b62:	d026      	beq.n	8001bb2 <__ssputs_r+0x6a>
 8001b64:	6965      	ldr	r5, [r4, #20]
 8001b66:	6909      	ldr	r1, [r1, #16]
 8001b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b6c:	eba3 0901 	sub.w	r9, r3, r1
 8001b70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b74:	1c7b      	adds	r3, r7, #1
 8001b76:	444b      	add	r3, r9
 8001b78:	106d      	asrs	r5, r5, #1
 8001b7a:	429d      	cmp	r5, r3
 8001b7c:	bf38      	it	cc
 8001b7e:	461d      	movcc	r5, r3
 8001b80:	0553      	lsls	r3, r2, #21
 8001b82:	d527      	bpl.n	8001bd4 <__ssputs_r+0x8c>
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7ff ff53 	bl	8001a30 <_malloc_r>
 8001b8a:	4606      	mov	r6, r0
 8001b8c:	b360      	cbz	r0, 8001be8 <__ssputs_r+0xa0>
 8001b8e:	6921      	ldr	r1, [r4, #16]
 8001b90:	464a      	mov	r2, r9
 8001b92:	f000 faeb 	bl	800216c <memcpy>
 8001b96:	89a3      	ldrh	r3, [r4, #12]
 8001b98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	81a3      	strh	r3, [r4, #12]
 8001ba2:	6126      	str	r6, [r4, #16]
 8001ba4:	6165      	str	r5, [r4, #20]
 8001ba6:	444e      	add	r6, r9
 8001ba8:	eba5 0509 	sub.w	r5, r5, r9
 8001bac:	6026      	str	r6, [r4, #0]
 8001bae:	60a5      	str	r5, [r4, #8]
 8001bb0:	463e      	mov	r6, r7
 8001bb2:	42be      	cmp	r6, r7
 8001bb4:	d900      	bls.n	8001bb8 <__ssputs_r+0x70>
 8001bb6:	463e      	mov	r6, r7
 8001bb8:	6820      	ldr	r0, [r4, #0]
 8001bba:	4632      	mov	r2, r6
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	f000 faab 	bl	8002118 <memmove>
 8001bc2:	68a3      	ldr	r3, [r4, #8]
 8001bc4:	1b9b      	subs	r3, r3, r6
 8001bc6:	60a3      	str	r3, [r4, #8]
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	4433      	add	r3, r6
 8001bcc:	6023      	str	r3, [r4, #0]
 8001bce:	2000      	movs	r0, #0
 8001bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd4:	462a      	mov	r2, r5
 8001bd6:	f000 fad7 	bl	8002188 <_realloc_r>
 8001bda:	4606      	mov	r6, r0
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d1e0      	bne.n	8001ba2 <__ssputs_r+0x5a>
 8001be0:	6921      	ldr	r1, [r4, #16]
 8001be2:	4650      	mov	r0, sl
 8001be4:	f7ff feb8 	bl	8001958 <_free_r>
 8001be8:	230c      	movs	r3, #12
 8001bea:	f8ca 3000 	str.w	r3, [sl]
 8001bee:	89a3      	ldrh	r3, [r4, #12]
 8001bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf4:	81a3      	strh	r3, [r4, #12]
 8001bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfa:	e7e9      	b.n	8001bd0 <__ssputs_r+0x88>

08001bfc <_svfiprintf_r>:
 8001bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c00:	4698      	mov	r8, r3
 8001c02:	898b      	ldrh	r3, [r1, #12]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	b09d      	sub	sp, #116	; 0x74
 8001c08:	4607      	mov	r7, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	d50e      	bpl.n	8001c2e <_svfiprintf_r+0x32>
 8001c10:	690b      	ldr	r3, [r1, #16]
 8001c12:	b963      	cbnz	r3, 8001c2e <_svfiprintf_r+0x32>
 8001c14:	2140      	movs	r1, #64	; 0x40
 8001c16:	f7ff ff0b 	bl	8001a30 <_malloc_r>
 8001c1a:	6028      	str	r0, [r5, #0]
 8001c1c:	6128      	str	r0, [r5, #16]
 8001c1e:	b920      	cbnz	r0, 8001c2a <_svfiprintf_r+0x2e>
 8001c20:	230c      	movs	r3, #12
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	e0d0      	b.n	8001dcc <_svfiprintf_r+0x1d0>
 8001c2a:	2340      	movs	r3, #64	; 0x40
 8001c2c:	616b      	str	r3, [r5, #20]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9309      	str	r3, [sp, #36]	; 0x24
 8001c32:	2320      	movs	r3, #32
 8001c34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c3c:	2330      	movs	r3, #48	; 0x30
 8001c3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001de4 <_svfiprintf_r+0x1e8>
 8001c42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c46:	f04f 0901 	mov.w	r9, #1
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c52:	b10a      	cbz	r2, 8001c58 <_svfiprintf_r+0x5c>
 8001c54:	2a25      	cmp	r2, #37	; 0x25
 8001c56:	d1f9      	bne.n	8001c4c <_svfiprintf_r+0x50>
 8001c58:	ebba 0b04 	subs.w	fp, sl, r4
 8001c5c:	d00b      	beq.n	8001c76 <_svfiprintf_r+0x7a>
 8001c5e:	465b      	mov	r3, fp
 8001c60:	4622      	mov	r2, r4
 8001c62:	4629      	mov	r1, r5
 8001c64:	4638      	mov	r0, r7
 8001c66:	f7ff ff6f 	bl	8001b48 <__ssputs_r>
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	f000 80a9 	beq.w	8001dc2 <_svfiprintf_r+0x1c6>
 8001c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c72:	445a      	add	r2, fp
 8001c74:	9209      	str	r2, [sp, #36]	; 0x24
 8001c76:	f89a 3000 	ldrb.w	r3, [sl]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80a1 	beq.w	8001dc2 <_svfiprintf_r+0x1c6>
 8001c80:	2300      	movs	r3, #0
 8001c82:	f04f 32ff 	mov.w	r2, #4294967295
 8001c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c8a:	f10a 0a01 	add.w	sl, sl, #1
 8001c8e:	9304      	str	r3, [sp, #16]
 8001c90:	9307      	str	r3, [sp, #28]
 8001c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c96:	931a      	str	r3, [sp, #104]	; 0x68
 8001c98:	4654      	mov	r4, sl
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ca0:	4850      	ldr	r0, [pc, #320]	; (8001de4 <_svfiprintf_r+0x1e8>)
 8001ca2:	f7fe faa5 	bl	80001f0 <memchr>
 8001ca6:	9a04      	ldr	r2, [sp, #16]
 8001ca8:	b9d8      	cbnz	r0, 8001ce2 <_svfiprintf_r+0xe6>
 8001caa:	06d0      	lsls	r0, r2, #27
 8001cac:	bf44      	itt	mi
 8001cae:	2320      	movmi	r3, #32
 8001cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cb4:	0711      	lsls	r1, r2, #28
 8001cb6:	bf44      	itt	mi
 8001cb8:	232b      	movmi	r3, #43	; 0x2b
 8001cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8001cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8001cc4:	d015      	beq.n	8001cf2 <_svfiprintf_r+0xf6>
 8001cc6:	9a07      	ldr	r2, [sp, #28]
 8001cc8:	4654      	mov	r4, sl
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f04f 0c0a 	mov.w	ip, #10
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cd6:	3b30      	subs	r3, #48	; 0x30
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	d94d      	bls.n	8001d78 <_svfiprintf_r+0x17c>
 8001cdc:	b1b0      	cbz	r0, 8001d0c <_svfiprintf_r+0x110>
 8001cde:	9207      	str	r2, [sp, #28]
 8001ce0:	e014      	b.n	8001d0c <_svfiprintf_r+0x110>
 8001ce2:	eba0 0308 	sub.w	r3, r0, r8
 8001ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	9304      	str	r3, [sp, #16]
 8001cee:	46a2      	mov	sl, r4
 8001cf0:	e7d2      	b.n	8001c98 <_svfiprintf_r+0x9c>
 8001cf2:	9b03      	ldr	r3, [sp, #12]
 8001cf4:	1d19      	adds	r1, r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	9103      	str	r1, [sp, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bfbb      	ittet	lt
 8001cfe:	425b      	neglt	r3, r3
 8001d00:	f042 0202 	orrlt.w	r2, r2, #2
 8001d04:	9307      	strge	r3, [sp, #28]
 8001d06:	9307      	strlt	r3, [sp, #28]
 8001d08:	bfb8      	it	lt
 8001d0a:	9204      	strlt	r2, [sp, #16]
 8001d0c:	7823      	ldrb	r3, [r4, #0]
 8001d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d10:	d10c      	bne.n	8001d2c <_svfiprintf_r+0x130>
 8001d12:	7863      	ldrb	r3, [r4, #1]
 8001d14:	2b2a      	cmp	r3, #42	; 0x2a
 8001d16:	d134      	bne.n	8001d82 <_svfiprintf_r+0x186>
 8001d18:	9b03      	ldr	r3, [sp, #12]
 8001d1a:	1d1a      	adds	r2, r3, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	9203      	str	r2, [sp, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bfb8      	it	lt
 8001d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d28:	3402      	adds	r4, #2
 8001d2a:	9305      	str	r3, [sp, #20]
 8001d2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001df4 <_svfiprintf_r+0x1f8>
 8001d30:	7821      	ldrb	r1, [r4, #0]
 8001d32:	2203      	movs	r2, #3
 8001d34:	4650      	mov	r0, sl
 8001d36:	f7fe fa5b 	bl	80001f0 <memchr>
 8001d3a:	b138      	cbz	r0, 8001d4c <_svfiprintf_r+0x150>
 8001d3c:	9b04      	ldr	r3, [sp, #16]
 8001d3e:	eba0 000a 	sub.w	r0, r0, sl
 8001d42:	2240      	movs	r2, #64	; 0x40
 8001d44:	4082      	lsls	r2, r0
 8001d46:	4313      	orrs	r3, r2
 8001d48:	3401      	adds	r4, #1
 8001d4a:	9304      	str	r3, [sp, #16]
 8001d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d50:	4825      	ldr	r0, [pc, #148]	; (8001de8 <_svfiprintf_r+0x1ec>)
 8001d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d56:	2206      	movs	r2, #6
 8001d58:	f7fe fa4a 	bl	80001f0 <memchr>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d038      	beq.n	8001dd2 <_svfiprintf_r+0x1d6>
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <_svfiprintf_r+0x1f0>)
 8001d62:	bb1b      	cbnz	r3, 8001dac <_svfiprintf_r+0x1b0>
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	3307      	adds	r3, #7
 8001d68:	f023 0307 	bic.w	r3, r3, #7
 8001d6c:	3308      	adds	r3, #8
 8001d6e:	9303      	str	r3, [sp, #12]
 8001d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d72:	4433      	add	r3, r6
 8001d74:	9309      	str	r3, [sp, #36]	; 0x24
 8001d76:	e768      	b.n	8001c4a <_svfiprintf_r+0x4e>
 8001d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d7c:	460c      	mov	r4, r1
 8001d7e:	2001      	movs	r0, #1
 8001d80:	e7a6      	b.n	8001cd0 <_svfiprintf_r+0xd4>
 8001d82:	2300      	movs	r3, #0
 8001d84:	3401      	adds	r4, #1
 8001d86:	9305      	str	r3, [sp, #20]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 0c0a 	mov.w	ip, #10
 8001d8e:	4620      	mov	r0, r4
 8001d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d94:	3a30      	subs	r2, #48	; 0x30
 8001d96:	2a09      	cmp	r2, #9
 8001d98:	d903      	bls.n	8001da2 <_svfiprintf_r+0x1a6>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0c6      	beq.n	8001d2c <_svfiprintf_r+0x130>
 8001d9e:	9105      	str	r1, [sp, #20]
 8001da0:	e7c4      	b.n	8001d2c <_svfiprintf_r+0x130>
 8001da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8001da6:	4604      	mov	r4, r0
 8001da8:	2301      	movs	r3, #1
 8001daa:	e7f0      	b.n	8001d8e <_svfiprintf_r+0x192>
 8001dac:	ab03      	add	r3, sp, #12
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	462a      	mov	r2, r5
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <_svfiprintf_r+0x1f4>)
 8001db4:	a904      	add	r1, sp, #16
 8001db6:	4638      	mov	r0, r7
 8001db8:	f3af 8000 	nop.w
 8001dbc:	1c42      	adds	r2, r0, #1
 8001dbe:	4606      	mov	r6, r0
 8001dc0:	d1d6      	bne.n	8001d70 <_svfiprintf_r+0x174>
 8001dc2:	89ab      	ldrh	r3, [r5, #12]
 8001dc4:	065b      	lsls	r3, r3, #25
 8001dc6:	f53f af2d 	bmi.w	8001c24 <_svfiprintf_r+0x28>
 8001dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dcc:	b01d      	add	sp, #116	; 0x74
 8001dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dd2:	ab03      	add	r3, sp, #12
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	462a      	mov	r2, r5
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <_svfiprintf_r+0x1f4>)
 8001dda:	a904      	add	r1, sp, #16
 8001ddc:	4638      	mov	r0, r7
 8001dde:	f000 f879 	bl	8001ed4 <_printf_i>
 8001de2:	e7eb      	b.n	8001dbc <_svfiprintf_r+0x1c0>
 8001de4:	08002301 	.word	0x08002301
 8001de8:	0800230b 	.word	0x0800230b
 8001dec:	00000000 	.word	0x00000000
 8001df0:	08001b49 	.word	0x08001b49
 8001df4:	08002307 	.word	0x08002307

08001df8 <_printf_common>:
 8001df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dfc:	4616      	mov	r6, r2
 8001dfe:	4699      	mov	r9, r3
 8001e00:	688a      	ldr	r2, [r1, #8]
 8001e02:	690b      	ldr	r3, [r1, #16]
 8001e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	bfb8      	it	lt
 8001e0c:	4613      	movlt	r3, r2
 8001e0e:	6033      	str	r3, [r6, #0]
 8001e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e14:	4607      	mov	r7, r0
 8001e16:	460c      	mov	r4, r1
 8001e18:	b10a      	cbz	r2, 8001e1e <_printf_common+0x26>
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	6033      	str	r3, [r6, #0]
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	0699      	lsls	r1, r3, #26
 8001e22:	bf42      	ittt	mi
 8001e24:	6833      	ldrmi	r3, [r6, #0]
 8001e26:	3302      	addmi	r3, #2
 8001e28:	6033      	strmi	r3, [r6, #0]
 8001e2a:	6825      	ldr	r5, [r4, #0]
 8001e2c:	f015 0506 	ands.w	r5, r5, #6
 8001e30:	d106      	bne.n	8001e40 <_printf_common+0x48>
 8001e32:	f104 0a19 	add.w	sl, r4, #25
 8001e36:	68e3      	ldr	r3, [r4, #12]
 8001e38:	6832      	ldr	r2, [r6, #0]
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	42ab      	cmp	r3, r5
 8001e3e:	dc26      	bgt.n	8001e8e <_printf_common+0x96>
 8001e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e44:	1e13      	subs	r3, r2, #0
 8001e46:	6822      	ldr	r2, [r4, #0]
 8001e48:	bf18      	it	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	0692      	lsls	r2, r2, #26
 8001e4e:	d42b      	bmi.n	8001ea8 <_printf_common+0xb0>
 8001e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e54:	4649      	mov	r1, r9
 8001e56:	4638      	mov	r0, r7
 8001e58:	47c0      	blx	r8
 8001e5a:	3001      	adds	r0, #1
 8001e5c:	d01e      	beq.n	8001e9c <_printf_common+0xa4>
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	6922      	ldr	r2, [r4, #16]
 8001e62:	f003 0306 	and.w	r3, r3, #6
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf02      	ittt	eq
 8001e6a:	68e5      	ldreq	r5, [r4, #12]
 8001e6c:	6833      	ldreq	r3, [r6, #0]
 8001e6e:	1aed      	subeq	r5, r5, r3
 8001e70:	68a3      	ldr	r3, [r4, #8]
 8001e72:	bf0c      	ite	eq
 8001e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e78:	2500      	movne	r5, #0
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	bfc4      	itt	gt
 8001e7e:	1a9b      	subgt	r3, r3, r2
 8001e80:	18ed      	addgt	r5, r5, r3
 8001e82:	2600      	movs	r6, #0
 8001e84:	341a      	adds	r4, #26
 8001e86:	42b5      	cmp	r5, r6
 8001e88:	d11a      	bne.n	8001ec0 <_printf_common+0xc8>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	e008      	b.n	8001ea0 <_printf_common+0xa8>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4652      	mov	r2, sl
 8001e92:	4649      	mov	r1, r9
 8001e94:	4638      	mov	r0, r7
 8001e96:	47c0      	blx	r8
 8001e98:	3001      	adds	r0, #1
 8001e9a:	d103      	bne.n	8001ea4 <_printf_common+0xac>
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ea4:	3501      	adds	r5, #1
 8001ea6:	e7c6      	b.n	8001e36 <_printf_common+0x3e>
 8001ea8:	18e1      	adds	r1, r4, r3
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	2030      	movs	r0, #48	; 0x30
 8001eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001eb2:	4422      	add	r2, r4
 8001eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	e7c7      	b.n	8001e50 <_printf_common+0x58>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	47c0      	blx	r8
 8001eca:	3001      	adds	r0, #1
 8001ecc:	d0e6      	beq.n	8001e9c <_printf_common+0xa4>
 8001ece:	3601      	adds	r6, #1
 8001ed0:	e7d9      	b.n	8001e86 <_printf_common+0x8e>
	...

08001ed4 <_printf_i>:
 8001ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed8:	7e0f      	ldrb	r7, [r1, #24]
 8001eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001edc:	2f78      	cmp	r7, #120	; 0x78
 8001ede:	4691      	mov	r9, r2
 8001ee0:	4680      	mov	r8, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	469a      	mov	sl, r3
 8001ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001eea:	d807      	bhi.n	8001efc <_printf_i+0x28>
 8001eec:	2f62      	cmp	r7, #98	; 0x62
 8001eee:	d80a      	bhi.n	8001f06 <_printf_i+0x32>
 8001ef0:	2f00      	cmp	r7, #0
 8001ef2:	f000 80d4 	beq.w	800209e <_printf_i+0x1ca>
 8001ef6:	2f58      	cmp	r7, #88	; 0x58
 8001ef8:	f000 80c0 	beq.w	800207c <_printf_i+0x1a8>
 8001efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f04:	e03a      	b.n	8001f7c <_printf_i+0xa8>
 8001f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f0a:	2b15      	cmp	r3, #21
 8001f0c:	d8f6      	bhi.n	8001efc <_printf_i+0x28>
 8001f0e:	a101      	add	r1, pc, #4	; (adr r1, 8001f14 <_printf_i+0x40>)
 8001f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f14:	08001f6d 	.word	0x08001f6d
 8001f18:	08001f81 	.word	0x08001f81
 8001f1c:	08001efd 	.word	0x08001efd
 8001f20:	08001efd 	.word	0x08001efd
 8001f24:	08001efd 	.word	0x08001efd
 8001f28:	08001efd 	.word	0x08001efd
 8001f2c:	08001f81 	.word	0x08001f81
 8001f30:	08001efd 	.word	0x08001efd
 8001f34:	08001efd 	.word	0x08001efd
 8001f38:	08001efd 	.word	0x08001efd
 8001f3c:	08001efd 	.word	0x08001efd
 8001f40:	08002085 	.word	0x08002085
 8001f44:	08001fad 	.word	0x08001fad
 8001f48:	0800203f 	.word	0x0800203f
 8001f4c:	08001efd 	.word	0x08001efd
 8001f50:	08001efd 	.word	0x08001efd
 8001f54:	080020a7 	.word	0x080020a7
 8001f58:	08001efd 	.word	0x08001efd
 8001f5c:	08001fad 	.word	0x08001fad
 8001f60:	08001efd 	.word	0x08001efd
 8001f64:	08001efd 	.word	0x08001efd
 8001f68:	08002047 	.word	0x08002047
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	1d1a      	adds	r2, r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	602a      	str	r2, [r5, #0]
 8001f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e09f      	b.n	80020c0 <_printf_i+0x1ec>
 8001f80:	6820      	ldr	r0, [r4, #0]
 8001f82:	682b      	ldr	r3, [r5, #0]
 8001f84:	0607      	lsls	r7, r0, #24
 8001f86:	f103 0104 	add.w	r1, r3, #4
 8001f8a:	6029      	str	r1, [r5, #0]
 8001f8c:	d501      	bpl.n	8001f92 <_printf_i+0xbe>
 8001f8e:	681e      	ldr	r6, [r3, #0]
 8001f90:	e003      	b.n	8001f9a <_printf_i+0xc6>
 8001f92:	0646      	lsls	r6, r0, #25
 8001f94:	d5fb      	bpl.n	8001f8e <_printf_i+0xba>
 8001f96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001f9a:	2e00      	cmp	r6, #0
 8001f9c:	da03      	bge.n	8001fa6 <_printf_i+0xd2>
 8001f9e:	232d      	movs	r3, #45	; 0x2d
 8001fa0:	4276      	negs	r6, r6
 8001fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fa6:	485a      	ldr	r0, [pc, #360]	; (8002110 <_printf_i+0x23c>)
 8001fa8:	230a      	movs	r3, #10
 8001faa:	e012      	b.n	8001fd2 <_printf_i+0xfe>
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	6820      	ldr	r0, [r4, #0]
 8001fb0:	1d19      	adds	r1, r3, #4
 8001fb2:	6029      	str	r1, [r5, #0]
 8001fb4:	0605      	lsls	r5, r0, #24
 8001fb6:	d501      	bpl.n	8001fbc <_printf_i+0xe8>
 8001fb8:	681e      	ldr	r6, [r3, #0]
 8001fba:	e002      	b.n	8001fc2 <_printf_i+0xee>
 8001fbc:	0641      	lsls	r1, r0, #25
 8001fbe:	d5fb      	bpl.n	8001fb8 <_printf_i+0xe4>
 8001fc0:	881e      	ldrh	r6, [r3, #0]
 8001fc2:	4853      	ldr	r0, [pc, #332]	; (8002110 <_printf_i+0x23c>)
 8001fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2308      	moveq	r3, #8
 8001fca:	230a      	movne	r3, #10
 8001fcc:	2100      	movs	r1, #0
 8001fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fd2:	6865      	ldr	r5, [r4, #4]
 8001fd4:	60a5      	str	r5, [r4, #8]
 8001fd6:	2d00      	cmp	r5, #0
 8001fd8:	bfa2      	ittt	ge
 8001fda:	6821      	ldrge	r1, [r4, #0]
 8001fdc:	f021 0104 	bicge.w	r1, r1, #4
 8001fe0:	6021      	strge	r1, [r4, #0]
 8001fe2:	b90e      	cbnz	r6, 8001fe8 <_printf_i+0x114>
 8001fe4:	2d00      	cmp	r5, #0
 8001fe6:	d04b      	beq.n	8002080 <_printf_i+0x1ac>
 8001fe8:	4615      	mov	r5, r2
 8001fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8001fee:	fb03 6711 	mls	r7, r3, r1, r6
 8001ff2:	5dc7      	ldrb	r7, [r0, r7]
 8001ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ff8:	4637      	mov	r7, r6
 8001ffa:	42bb      	cmp	r3, r7
 8001ffc:	460e      	mov	r6, r1
 8001ffe:	d9f4      	bls.n	8001fea <_printf_i+0x116>
 8002000:	2b08      	cmp	r3, #8
 8002002:	d10b      	bne.n	800201c <_printf_i+0x148>
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	07de      	lsls	r6, r3, #31
 8002008:	d508      	bpl.n	800201c <_printf_i+0x148>
 800200a:	6923      	ldr	r3, [r4, #16]
 800200c:	6861      	ldr	r1, [r4, #4]
 800200e:	4299      	cmp	r1, r3
 8002010:	bfde      	ittt	le
 8002012:	2330      	movle	r3, #48	; 0x30
 8002014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800201c:	1b52      	subs	r2, r2, r5
 800201e:	6122      	str	r2, [r4, #16]
 8002020:	f8cd a000 	str.w	sl, [sp]
 8002024:	464b      	mov	r3, r9
 8002026:	aa03      	add	r2, sp, #12
 8002028:	4621      	mov	r1, r4
 800202a:	4640      	mov	r0, r8
 800202c:	f7ff fee4 	bl	8001df8 <_printf_common>
 8002030:	3001      	adds	r0, #1
 8002032:	d14a      	bne.n	80020ca <_printf_i+0x1f6>
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	b004      	add	sp, #16
 800203a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	4833      	ldr	r0, [pc, #204]	; (8002114 <_printf_i+0x240>)
 8002048:	2778      	movs	r7, #120	; 0x78
 800204a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	6829      	ldr	r1, [r5, #0]
 8002052:	061f      	lsls	r7, r3, #24
 8002054:	f851 6b04 	ldr.w	r6, [r1], #4
 8002058:	d402      	bmi.n	8002060 <_printf_i+0x18c>
 800205a:	065f      	lsls	r7, r3, #25
 800205c:	bf48      	it	mi
 800205e:	b2b6      	uxthmi	r6, r6
 8002060:	07df      	lsls	r7, r3, #31
 8002062:	bf48      	it	mi
 8002064:	f043 0320 	orrmi.w	r3, r3, #32
 8002068:	6029      	str	r1, [r5, #0]
 800206a:	bf48      	it	mi
 800206c:	6023      	strmi	r3, [r4, #0]
 800206e:	b91e      	cbnz	r6, 8002078 <_printf_i+0x1a4>
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	f023 0320 	bic.w	r3, r3, #32
 8002076:	6023      	str	r3, [r4, #0]
 8002078:	2310      	movs	r3, #16
 800207a:	e7a7      	b.n	8001fcc <_printf_i+0xf8>
 800207c:	4824      	ldr	r0, [pc, #144]	; (8002110 <_printf_i+0x23c>)
 800207e:	e7e4      	b.n	800204a <_printf_i+0x176>
 8002080:	4615      	mov	r5, r2
 8002082:	e7bd      	b.n	8002000 <_printf_i+0x12c>
 8002084:	682b      	ldr	r3, [r5, #0]
 8002086:	6826      	ldr	r6, [r4, #0]
 8002088:	6961      	ldr	r1, [r4, #20]
 800208a:	1d18      	adds	r0, r3, #4
 800208c:	6028      	str	r0, [r5, #0]
 800208e:	0635      	lsls	r5, r6, #24
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	d501      	bpl.n	8002098 <_printf_i+0x1c4>
 8002094:	6019      	str	r1, [r3, #0]
 8002096:	e002      	b.n	800209e <_printf_i+0x1ca>
 8002098:	0670      	lsls	r0, r6, #25
 800209a:	d5fb      	bpl.n	8002094 <_printf_i+0x1c0>
 800209c:	8019      	strh	r1, [r3, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	6123      	str	r3, [r4, #16]
 80020a2:	4615      	mov	r5, r2
 80020a4:	e7bc      	b.n	8002020 <_printf_i+0x14c>
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	1d1a      	adds	r2, r3, #4
 80020aa:	602a      	str	r2, [r5, #0]
 80020ac:	681d      	ldr	r5, [r3, #0]
 80020ae:	6862      	ldr	r2, [r4, #4]
 80020b0:	2100      	movs	r1, #0
 80020b2:	4628      	mov	r0, r5
 80020b4:	f7fe f89c 	bl	80001f0 <memchr>
 80020b8:	b108      	cbz	r0, 80020be <_printf_i+0x1ea>
 80020ba:	1b40      	subs	r0, r0, r5
 80020bc:	6060      	str	r0, [r4, #4]
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	6123      	str	r3, [r4, #16]
 80020c2:	2300      	movs	r3, #0
 80020c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020c8:	e7aa      	b.n	8002020 <_printf_i+0x14c>
 80020ca:	6923      	ldr	r3, [r4, #16]
 80020cc:	462a      	mov	r2, r5
 80020ce:	4649      	mov	r1, r9
 80020d0:	4640      	mov	r0, r8
 80020d2:	47d0      	blx	sl
 80020d4:	3001      	adds	r0, #1
 80020d6:	d0ad      	beq.n	8002034 <_printf_i+0x160>
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	079b      	lsls	r3, r3, #30
 80020dc:	d413      	bmi.n	8002106 <_printf_i+0x232>
 80020de:	68e0      	ldr	r0, [r4, #12]
 80020e0:	9b03      	ldr	r3, [sp, #12]
 80020e2:	4298      	cmp	r0, r3
 80020e4:	bfb8      	it	lt
 80020e6:	4618      	movlt	r0, r3
 80020e8:	e7a6      	b.n	8002038 <_printf_i+0x164>
 80020ea:	2301      	movs	r3, #1
 80020ec:	4632      	mov	r2, r6
 80020ee:	4649      	mov	r1, r9
 80020f0:	4640      	mov	r0, r8
 80020f2:	47d0      	blx	sl
 80020f4:	3001      	adds	r0, #1
 80020f6:	d09d      	beq.n	8002034 <_printf_i+0x160>
 80020f8:	3501      	adds	r5, #1
 80020fa:	68e3      	ldr	r3, [r4, #12]
 80020fc:	9903      	ldr	r1, [sp, #12]
 80020fe:	1a5b      	subs	r3, r3, r1
 8002100:	42ab      	cmp	r3, r5
 8002102:	dcf2      	bgt.n	80020ea <_printf_i+0x216>
 8002104:	e7eb      	b.n	80020de <_printf_i+0x20a>
 8002106:	2500      	movs	r5, #0
 8002108:	f104 0619 	add.w	r6, r4, #25
 800210c:	e7f5      	b.n	80020fa <_printf_i+0x226>
 800210e:	bf00      	nop
 8002110:	08002312 	.word	0x08002312
 8002114:	08002323 	.word	0x08002323

08002118 <memmove>:
 8002118:	4288      	cmp	r0, r1
 800211a:	b510      	push	{r4, lr}
 800211c:	eb01 0402 	add.w	r4, r1, r2
 8002120:	d902      	bls.n	8002128 <memmove+0x10>
 8002122:	4284      	cmp	r4, r0
 8002124:	4623      	mov	r3, r4
 8002126:	d807      	bhi.n	8002138 <memmove+0x20>
 8002128:	1e43      	subs	r3, r0, #1
 800212a:	42a1      	cmp	r1, r4
 800212c:	d008      	beq.n	8002140 <memmove+0x28>
 800212e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002136:	e7f8      	b.n	800212a <memmove+0x12>
 8002138:	4402      	add	r2, r0
 800213a:	4601      	mov	r1, r0
 800213c:	428a      	cmp	r2, r1
 800213e:	d100      	bne.n	8002142 <memmove+0x2a>
 8002140:	bd10      	pop	{r4, pc}
 8002142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800214a:	e7f7      	b.n	800213c <memmove+0x24>

0800214c <_sbrk_r>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	4d06      	ldr	r5, [pc, #24]	; (8002168 <_sbrk_r+0x1c>)
 8002150:	2300      	movs	r3, #0
 8002152:	4604      	mov	r4, r0
 8002154:	4608      	mov	r0, r1
 8002156:	602b      	str	r3, [r5, #0]
 8002158:	f7ff fb2c 	bl	80017b4 <_sbrk>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	d102      	bne.n	8002166 <_sbrk_r+0x1a>
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	b103      	cbz	r3, 8002166 <_sbrk_r+0x1a>
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	2000043c 	.word	0x2000043c

0800216c <memcpy>:
 800216c:	440a      	add	r2, r1
 800216e:	4291      	cmp	r1, r2
 8002170:	f100 33ff 	add.w	r3, r0, #4294967295
 8002174:	d100      	bne.n	8002178 <memcpy+0xc>
 8002176:	4770      	bx	lr
 8002178:	b510      	push	{r4, lr}
 800217a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800217e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002182:	4291      	cmp	r1, r2
 8002184:	d1f9      	bne.n	800217a <memcpy+0xe>
 8002186:	bd10      	pop	{r4, pc}

08002188 <_realloc_r>:
 8002188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800218c:	4680      	mov	r8, r0
 800218e:	4614      	mov	r4, r2
 8002190:	460e      	mov	r6, r1
 8002192:	b921      	cbnz	r1, 800219e <_realloc_r+0x16>
 8002194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002198:	4611      	mov	r1, r2
 800219a:	f7ff bc49 	b.w	8001a30 <_malloc_r>
 800219e:	b92a      	cbnz	r2, 80021ac <_realloc_r+0x24>
 80021a0:	f7ff fbda 	bl	8001958 <_free_r>
 80021a4:	4625      	mov	r5, r4
 80021a6:	4628      	mov	r0, r5
 80021a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021ac:	f000 f81b 	bl	80021e6 <_malloc_usable_size_r>
 80021b0:	4284      	cmp	r4, r0
 80021b2:	4607      	mov	r7, r0
 80021b4:	d802      	bhi.n	80021bc <_realloc_r+0x34>
 80021b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80021ba:	d812      	bhi.n	80021e2 <_realloc_r+0x5a>
 80021bc:	4621      	mov	r1, r4
 80021be:	4640      	mov	r0, r8
 80021c0:	f7ff fc36 	bl	8001a30 <_malloc_r>
 80021c4:	4605      	mov	r5, r0
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d0ed      	beq.n	80021a6 <_realloc_r+0x1e>
 80021ca:	42bc      	cmp	r4, r7
 80021cc:	4622      	mov	r2, r4
 80021ce:	4631      	mov	r1, r6
 80021d0:	bf28      	it	cs
 80021d2:	463a      	movcs	r2, r7
 80021d4:	f7ff ffca 	bl	800216c <memcpy>
 80021d8:	4631      	mov	r1, r6
 80021da:	4640      	mov	r0, r8
 80021dc:	f7ff fbbc 	bl	8001958 <_free_r>
 80021e0:	e7e1      	b.n	80021a6 <_realloc_r+0x1e>
 80021e2:	4635      	mov	r5, r6
 80021e4:	e7df      	b.n	80021a6 <_realloc_r+0x1e>

080021e6 <_malloc_usable_size_r>:
 80021e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ea:	1f18      	subs	r0, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bfbc      	itt	lt
 80021f0:	580b      	ldrlt	r3, [r1, r0]
 80021f2:	18c0      	addlt	r0, r0, r3
 80021f4:	4770      	bx	lr
	...

080021f8 <_init>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	bf00      	nop
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr

08002204 <_fini>:
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	bf00      	nop
 8002208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220a:	bc08      	pop	{r3}
 800220c:	469e      	mov	lr, r3
 800220e:	4770      	bx	lr
