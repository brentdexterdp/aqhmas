
HC8_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002d24  08002d24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d24  08002d24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000070  08002d9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08002d9c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003822  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ecb  00000000  00000000  00023905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003d0  00000000  00000000  000247d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b0  00000000  00000000  00024ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016349  00000000  00000000  00024e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000593b  00000000  00000000  0003b199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000862e6  00000000  00000000  00040ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000148c  00000000  00000000  000c6dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000be  00000000  00000000  000c8248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002bdc 	.word	0x08002bdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002bdc 	.word	0x08002bdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ESP8266_Init>:
#include "ESP8266.h"
#include <string.h>
#include <stdio.h>
#include <stdint.h>

void ESP8266_Init(char *ssid, char *password){
 8000290:	b580      	push	{r7, lr}
 8000292:	b09c      	sub	sp, #112	; 0x70
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]

	int ESP_response = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	66fb      	str	r3, [r7, #108]	; 0x6c
	char data_to_send[100];

	USART6_Text_Write("AT+RST\r\n");
 800029e:	483f      	ldr	r0, [pc, #252]	; (800039c <ESP8266_Init+0x10c>)
 80002a0:	f000 fb68 	bl	8000974 <USART6_Text_Write>
	Tim3_wait_for_timeout();
 80002a4:	f000 fa66 	bl	8000774 <Tim3_wait_for_timeout>
	delay_s(10);
 80002a8:	200a      	movs	r0, #10
 80002aa:	f000 f9cc 	bl	8000646 <delay_s>
//	while(!ESP_response){ESP_response = USART6_Wait_For("WIFI GOT IP\r\n", 1, 1);}
	Tim3_esp_not_stuck();
 80002ae:	f000 fa75 	bl	800079c <Tim3_esp_not_stuck>

	USART6_Text_Write("AT\r\n");
 80002b2:	483b      	ldr	r0, [pc, #236]	; (80003a0 <ESP8266_Init+0x110>)
 80002b4:	f000 fb5e 	bl	8000974 <USART6_Text_Write>
	ESP_response = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 80002bc:	f000 fa5a 	bl	8000774 <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 80002c0:	e005      	b.n	80002ce <ESP8266_Init+0x3e>
 80002c2:	2201      	movs	r2, #1
 80002c4:	2101      	movs	r1, #1
 80002c6:	4837      	ldr	r0, [pc, #220]	; (80003a4 <ESP8266_Init+0x114>)
 80002c8:	f000 fb94 	bl	80009f4 <USART6_Wait_For>
 80002cc:	66f8      	str	r0, [r7, #108]	; 0x6c
 80002ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d103      	bne.n	80002dc <ESP8266_Init+0x4c>
 80002d4:	4b34      	ldr	r3, [pc, #208]	; (80003a8 <ESP8266_Init+0x118>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f2      	beq.n	80002c2 <ESP8266_Init+0x32>
	Tim3_esp_not_stuck();
 80002dc:	f000 fa5e 	bl	800079c <Tim3_esp_not_stuck>
	printf("checkpoint\n");
 80002e0:	4832      	ldr	r0, [pc, #200]	; (80003ac <ESP8266_Init+0x11c>)
 80002e2:	f001 fd7f 	bl	8001de4 <puts>

	USART6_Text_Write("AT+CWMODE=1\r\n");
 80002e6:	4832      	ldr	r0, [pc, #200]	; (80003b0 <ESP8266_Init+0x120>)
 80002e8:	f000 fb44 	bl	8000974 <USART6_Text_Write>
	ESP_response = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 80002f0:	f000 fa40 	bl	8000774 <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 80002f4:	e005      	b.n	8000302 <ESP8266_Init+0x72>
 80002f6:	2201      	movs	r2, #1
 80002f8:	2101      	movs	r1, #1
 80002fa:	482a      	ldr	r0, [pc, #168]	; (80003a4 <ESP8266_Init+0x114>)
 80002fc:	f000 fb7a 	bl	80009f4 <USART6_Wait_For>
 8000300:	66f8      	str	r0, [r7, #108]	; 0x6c
 8000302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000304:	2b00      	cmp	r3, #0
 8000306:	d103      	bne.n	8000310 <ESP8266_Init+0x80>
 8000308:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <ESP8266_Init+0x118>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0f2      	beq.n	80002f6 <ESP8266_Init+0x66>
	Tim3_esp_not_stuck();
 8000310:	f000 fa44 	bl	800079c <Tim3_esp_not_stuck>
	printf("checkpoint\n");
 8000314:	4825      	ldr	r0, [pc, #148]	; (80003ac <ESP8266_Init+0x11c>)
 8000316:	f001 fd65 	bl	8001de4 <puts>

	sprintf(data_to_send, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 800031a:	f107 0008 	add.w	r0, r7, #8
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	4924      	ldr	r1, [pc, #144]	; (80003b4 <ESP8266_Init+0x124>)
 8000324:	f001 fd66 	bl	8001df4 <siprintf>
	USART6_Text_Write(data_to_send);
 8000328:	f107 0308 	add.w	r3, r7, #8
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fb21 	bl	8000974 <USART6_Text_Write>
	ESP_response = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 8000336:	f000 fa1d 	bl	8000774 <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 800033a:	e005      	b.n	8000348 <ESP8266_Init+0xb8>
 800033c:	2201      	movs	r2, #1
 800033e:	2101      	movs	r1, #1
 8000340:	4818      	ldr	r0, [pc, #96]	; (80003a4 <ESP8266_Init+0x114>)
 8000342:	f000 fb57 	bl	80009f4 <USART6_Wait_For>
 8000346:	66f8      	str	r0, [r7, #108]	; 0x6c
 8000348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800034a:	2b00      	cmp	r3, #0
 800034c:	d103      	bne.n	8000356 <ESP8266_Init+0xc6>
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <ESP8266_Init+0x118>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0f2      	beq.n	800033c <ESP8266_Init+0xac>
	Tim3_esp_not_stuck();
 8000356:	f000 fa21 	bl	800079c <Tim3_esp_not_stuck>
	printf("checkpoint\n");
 800035a:	4814      	ldr	r0, [pc, #80]	; (80003ac <ESP8266_Init+0x11c>)
 800035c:	f001 fd42 	bl	8001de4 <puts>

	USART6_Text_Write("AT+CIPMUX=0\r\n");
 8000360:	4815      	ldr	r0, [pc, #84]	; (80003b8 <ESP8266_Init+0x128>)
 8000362:	f000 fb07 	bl	8000974 <USART6_Text_Write>
	ESP_response = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	66fb      	str	r3, [r7, #108]	; 0x6c
	Tim3_wait_for_timeout();
 800036a:	f000 fa03 	bl	8000774 <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 1, 1);}
 800036e:	e005      	b.n	800037c <ESP8266_Init+0xec>
 8000370:	2201      	movs	r2, #1
 8000372:	2101      	movs	r1, #1
 8000374:	480b      	ldr	r0, [pc, #44]	; (80003a4 <ESP8266_Init+0x114>)
 8000376:	f000 fb3d 	bl	80009f4 <USART6_Wait_For>
 800037a:	66f8      	str	r0, [r7, #108]	; 0x6c
 800037c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800037e:	2b00      	cmp	r3, #0
 8000380:	d103      	bne.n	800038a <ESP8266_Init+0xfa>
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <ESP8266_Init+0x118>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0f2      	beq.n	8000370 <ESP8266_Init+0xe0>
	Tim3_esp_not_stuck();
 800038a:	f000 fa07 	bl	800079c <Tim3_esp_not_stuck>
	printf("checkpoint\n");
 800038e:	4807      	ldr	r0, [pc, #28]	; (80003ac <ESP8266_Init+0x11c>)
 8000390:	f001 fd28 	bl	8001de4 <puts>

}
 8000394:	bf00      	nop
 8000396:	3770      	adds	r7, #112	; 0x70
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	08002bf4 	.word	0x08002bf4
 80003a0:	08002c00 	.word	0x08002c00
 80003a4:	08002c08 	.word	0x08002c08
 80003a8:	200001dc 	.word	0x200001dc
 80003ac:	08002c10 	.word	0x08002c10
 80003b0:	08002c1c 	.word	0x08002c1c
 80003b4:	08002c2c 	.word	0x08002c2c
 80003b8:	08002c44 	.word	0x08002c44

080003bc <ESP8266_Send_Data>:

void ESP8266_Send_Data(char *writeAPIKey, int fieldNumber, int value){
 80003bc:	b580      	push	{r7, lr}
 80003be:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80003c2:	af02      	add	r7, sp, #8
 80003c4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80003c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80003cc:	6018      	str	r0, [r3, #0]
 80003ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80003d2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 80003d6:	6019      	str	r1, [r3, #0]
 80003d8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80003dc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80003e0:	601a      	str	r2, [r3, #0]

	int ESP_response = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	char data_to_send[300];
	char data_to_send_two[300];

	USART6_Text_Write("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 80003e8:	4847      	ldr	r0, [pc, #284]	; (8000508 <ESP8266_Send_Data+0x14c>)
 80003ea:	f000 fac3 	bl	8000974 <USART6_Text_Write>
	ESP_response = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80003f4:	f000 f9be 	bl	8000774 <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("OK\r\n", 0, 1);}
 80003f8:	e006      	b.n	8000408 <ESP8266_Send_Data+0x4c>
 80003fa:	2201      	movs	r2, #1
 80003fc:	2100      	movs	r1, #0
 80003fe:	4843      	ldr	r0, [pc, #268]	; (800050c <ESP8266_Send_Data+0x150>)
 8000400:	f000 faf8 	bl	80009f4 <USART6_Wait_For>
 8000404:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 8000408:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800040c:	2b00      	cmp	r3, #0
 800040e:	d103      	bne.n	8000418 <ESP8266_Send_Data+0x5c>
 8000410:	4b3f      	ldr	r3, [pc, #252]	; (8000510 <ESP8266_Send_Data+0x154>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f0      	beq.n	80003fa <ESP8266_Send_Data+0x3e>
	Tim3_esp_not_stuck();
 8000418:	f000 f9c0 	bl	800079c <Tim3_esp_not_stuck>

	sprintf(data_to_send, "GET /update?api_key=%s&field%d=%u\r\n", writeAPIKey, fieldNumber, value);
 800041c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8000420:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000424:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8000428:	f5a2 7219 	sub.w	r2, r2, #612	; 0x264
 800042c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8000430:	f507 711c 	add.w	r1, r7, #624	; 0x270
 8000434:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
 8000438:	6809      	ldr	r1, [r1, #0]
 800043a:	9100      	str	r1, [sp, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	6812      	ldr	r2, [r2, #0]
 8000440:	4934      	ldr	r1, [pc, #208]	; (8000514 <ESP8266_Send_Data+0x158>)
 8000442:	f001 fcd7 	bl	8001df4 <siprintf>

	sprintf(data_to_send_two, "AT+CIPSEND=%d\r\n", strlen(data_to_send));
 8000446:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fec8 	bl	80001e0 <strlen>
 8000450:	4602      	mov	r2, r0
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4930      	ldr	r1, [pc, #192]	; (8000518 <ESP8266_Send_Data+0x15c>)
 8000458:	4618      	mov	r0, r3
 800045a:	f001 fccb 	bl	8001df4 <siprintf>
	USART6_Text_Write(data_to_send_two);
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fa86 	bl	8000974 <USART6_Text_Write>
	ESP_response = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 800046e:	f000 f981 	bl	8000774 <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For(">", 0, 1);}
 8000472:	e006      	b.n	8000482 <ESP8266_Send_Data+0xc6>
 8000474:	2201      	movs	r2, #1
 8000476:	2100      	movs	r1, #0
 8000478:	4828      	ldr	r0, [pc, #160]	; (800051c <ESP8266_Send_Data+0x160>)
 800047a:	f000 fabb 	bl	80009f4 <USART6_Wait_For>
 800047e:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 8000482:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8000486:	2b00      	cmp	r3, #0
 8000488:	d103      	bne.n	8000492 <ESP8266_Send_Data+0xd6>
 800048a:	4b21      	ldr	r3, [pc, #132]	; (8000510 <ESP8266_Send_Data+0x154>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f0      	beq.n	8000474 <ESP8266_Send_Data+0xb8>
	Tim3_esp_not_stuck();
 8000492:	f000 f983 	bl	800079c <Tim3_esp_not_stuck>

	USART6_Text_Write(data_to_send);
 8000496:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fa6a 	bl	8000974 <USART6_Text_Write>
	ESP_response = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80004a6:	f000 f965 	bl	8000774 <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("SEND OK\r\n", 0, 0);}
 80004aa:	e006      	b.n	80004ba <ESP8266_Send_Data+0xfe>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	481b      	ldr	r0, [pc, #108]	; (8000520 <ESP8266_Send_Data+0x164>)
 80004b2:	f000 fa9f 	bl	80009f4 <USART6_Wait_For>
 80004b6:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 80004ba:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d103      	bne.n	80004ca <ESP8266_Send_Data+0x10e>
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <ESP8266_Send_Data+0x154>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f0      	beq.n	80004ac <ESP8266_Send_Data+0xf0>
	Tim3_esp_not_stuck();
 80004ca:	f000 f967 	bl	800079c <Tim3_esp_not_stuck>

	ESP_response = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	Tim3_wait_for_timeout();
 80004d4:	f000 f94e 	bl	8000774 <Tim3_wait_for_timeout>
	while(!ESP_response && !break_wait_for){ESP_response = USART6_Wait_For("CLOSED", 0, 1);}
 80004d8:	e006      	b.n	80004e8 <ESP8266_Send_Data+0x12c>
 80004da:	2201      	movs	r2, #1
 80004dc:	2100      	movs	r1, #0
 80004de:	4811      	ldr	r0, [pc, #68]	; (8000524 <ESP8266_Send_Data+0x168>)
 80004e0:	f000 fa88 	bl	80009f4 <USART6_Wait_For>
 80004e4:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
 80004e8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <ESP8266_Send_Data+0x13c>
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <ESP8266_Send_Data+0x154>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f0      	beq.n	80004da <ESP8266_Send_Data+0x11e>
	Tim3_esp_not_stuck();
 80004f8:	f000 f950 	bl	800079c <Tim3_esp_not_stuck>

}
 80004fc:	bf00      	nop
 80004fe:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	08002c54 	.word	0x08002c54
 800050c:	08002c08 	.word	0x08002c08
 8000510:	200001dc 	.word	0x200001dc
 8000514:	08002c80 	.word	0x08002c80
 8000518:	08002ca4 	.word	0x08002ca4
 800051c:	08002cb4 	.word	0x08002cb4
 8000520:	08002cb8 	.word	0x08002cb8
 8000524:	08002cc4 	.word	0x08002cc4

08000528 <Tim2_Init>:
 *      Author: ADMIN
 */

#include "TIM2.h"

void Tim2_Init(void){
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1<<0); // Enable clock for TIM2
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <Tim2_Init+0x6c>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a18      	ldr	r2, [pc, #96]	; (8000594 <Tim2_Init+0x6c>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 16-1; // Set PSC+1 = 16000
 8000538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053c:	220f      	movs	r2, #15
 800053e:	629a      	str	r2, [r3, #40]	; 0x28

	TIM2->ARR = 1; // Set timer to reset after CNT = 1 or 1 us
 8000540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000544:	2201      	movs	r2, #1
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->DIER |= (1<<0); // Enable timer interrupt generation
 8000548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	60d3      	str	r3, [r2, #12]

	NVIC->IP[28] = (5 << 4) & 0xff; // Set priority to 3
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <Tim2_Init+0x70>)
 800055a:	2250      	movs	r2, #80	; 0x50
 800055c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
	NVIC->ISER[0] = (1 << 28); // Enable interrupt
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <Tim2_Init+0x70>)
 8000562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000566:	601a      	str	r2, [r3, #0]
	TIM2->SR &= ~(1<<0);
 8000568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	6113      	str	r3, [r2, #16]

	TIM2->CR1 &= ~(1<<0); // Disable timer, for now
 8000578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000582:	f023 0301 	bic.w	r3, r3, #1
 8000586:	6013      	str	r3, [r2, #0]

}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	e000e100 	.word	0xe000e100

0800059c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

	done = 1;
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <TIM2_IRQHandler+0x34>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]

	TIM2->CR1 &= ~(1<<0);
 80005a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b0:	f023 0301 	bic.w	r3, r3, #1
 80005b4:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(1<<0); // Clear UIF update interrupt flag
 80005b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c0:	f023 0301 	bic.w	r3, r3, #1
 80005c4:	6113      	str	r3, [r2, #16]

}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200001cc 	.word	0x200001cc

080005d4 <delay_us>:

void delay_us(int us_delay){
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

	TIM2->ARR = us_delay;
 80005dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	62d3      	str	r3, [r2, #44]	; 0x2c
	done = 0;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <delay_us+0x40>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= (1<<0);
 80005ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6013      	str	r3, [r2, #0]

	while(!done){}
 80005fa:	bf00      	nop
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <delay_us+0x40>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0fb      	beq.n	80005fc <delay_us+0x28>

}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200001cc 	.word	0x200001cc

08000618 <delay_ms>:

void delay_ms(int ms_delay){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	for(int i=0; i<=ms_delay; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e006      	b.n	8000634 <delay_ms+0x1c>
		delay_us(1000);
 8000626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062a:	f7ff ffd3 	bl	80005d4 <delay_us>
	for(int i=0; i<=ms_delay; i++){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	ddf4      	ble.n	8000626 <delay_ms+0xe>
	}

}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <delay_s>:

void delay_s(int s_delay){
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]

	for(int i=0; i<=s_delay; i++){
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e006      	b.n	8000662 <delay_s+0x1c>
		delay_ms(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000658:	f7ff ffde 	bl	8000618 <delay_ms>
	for(int i=0; i<=s_delay; i++){
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	ddf4      	ble.n	8000654 <delay_s+0xe>
	}

}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000678:	f3bf 8f4f 	dsb	sy
}
 800067c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <__NVIC_SystemReset+0x24>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000686:	4904      	ldr	r1, [pc, #16]	; (8000698 <__NVIC_SystemReset+0x24>)
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_SystemReset+0x28>)
 800068a:	4313      	orrs	r3, r2
 800068c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800068e:	f3bf 8f4f 	dsb	sy
}
 8000692:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <__NVIC_SystemReset+0x20>
 8000698:	e000ed00 	.word	0xe000ed00
 800069c:	05fa0004 	.word	0x05fa0004

080006a0 <Tim3_Init>:

#include "TIM3.h"

void Tim3_Init(void){
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= (1<<1); // Enable clock for TIM3
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <Tim3_Init+0x60>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <Tim3_Init+0x60>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 62500-1; // Set PSC+1 = 16000
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <Tim3_Init+0x64>)
 80006b2:	f24f 4223 	movw	r2, #62499	; 0xf423
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->ARR = 16384; // Set timer to reset after CNT = 100
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <Tim3_Init+0x64>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= (1<<0); // Enable timer interrupt generation
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <Tim3_Init+0x64>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <Tim3_Init+0x64>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	60d3      	str	r3, [r2, #12]

	NVIC->IP[29] = (1 << 4) & 0xff; // Set priority to 1
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <Tim3_Init+0x68>)
 80006ce:	2210      	movs	r2, #16
 80006d0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
	NVIC->ISER[0] = (1 << 29); // Enable interrupt
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <Tim3_Init+0x68>)
 80006d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80006da:	601a      	str	r2, [r3, #0]

	TIM3->SR &= ~(1<<0);
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <Tim3_Init+0x64>)
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <Tim3_Init+0x64>)
 80006e2:	f023 0301 	bic.w	r3, r3, #1
 80006e6:	6113      	str	r3, [r2, #16]
	TIM3->CR1 &= ~(1<<0); // Disable timer, for now
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <Tim3_Init+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <Tim3_Init+0x64>)
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40000400 	.word	0x40000400
 8000708:	e000e100 	.word	0xe000e100

0800070c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

	checker_1++;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <TIM3_IRQHandler+0x54>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <TIM3_IRQHandler+0x54>)
 8000718:	6013      	str	r3, [r2, #0]

	while(1){

		if(Tim3_initializing){
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <TIM3_IRQHandler+0x58>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d009      	beq.n	8000736 <TIM3_IRQHandler+0x2a>
			Tim3_initializing = 0;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <TIM3_IRQHandler+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
			TIM3->SR &= ~(1<<0);
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <TIM3_IRQHandler+0x5c>)
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <TIM3_IRQHandler+0x5c>)
 800072e:	f023 0301 	bic.w	r3, r3, #1
 8000732:	6113      	str	r3, [r2, #16]
			break;
 8000734:	e011      	b.n	800075a <TIM3_IRQHandler+0x4e>
		} else {

			sys_stuck += 1;
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <TIM3_IRQHandler+0x60>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a0b      	ldr	r2, [pc, #44]	; (800076c <TIM3_IRQHandler+0x60>)
 800073e:	6013      	str	r3, [r2, #0]
			break_wait_for = 1;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <TIM3_IRQHandler+0x64>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
			TIM3->SR = 0;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <TIM3_IRQHandler+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]

			if (sys_stuck == 10){NVIC_SystemReset();}
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <TIM3_IRQHandler+0x60>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b0a      	cmp	r3, #10
 8000752:	d101      	bne.n	8000758 <TIM3_IRQHandler+0x4c>
 8000754:	f7ff ff8e 	bl	8000674 <__NVIC_SystemReset>

			break;
 8000758:	bf00      	nop

		}

	}

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200001bc 	.word	0x200001bc
 8000764:	20000000 	.word	0x20000000
 8000768:	40000400 	.word	0x40000400
 800076c:	200001d8 	.word	0x200001d8
 8000770:	200001dc 	.word	0x200001dc

08000774 <Tim3_wait_for_timeout>:

void Tim3_wait_for_timeout(){
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

	TIM3->ARR = 16384;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <Tim3_wait_for_timeout+0x24>)
 800077a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
//	Tim3_initializing = 1;
	TIM3->CR1 |= (1<<0);
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <Tim3_wait_for_timeout+0x24>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <Tim3_wait_for_timeout+0x24>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6013      	str	r3, [r2, #0]

}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40000400 	.word	0x40000400

0800079c <Tim3_esp_not_stuck>:

void Tim3_esp_not_stuck(){
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

	TIM3->CR1 &= ~(1<<0);
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <Tim3_esp_not_stuck+0x2c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <Tim3_esp_not_stuck+0x2c>)
 80007a6:	f023 0301 	bic.w	r3, r3, #1
 80007aa:	6013      	str	r3, [r2, #0]
	TIM3->SR &= ~(1<<0);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <Tim3_esp_not_stuck+0x2c>)
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <Tim3_esp_not_stuck+0x2c>)
 80007b2:	f023 0301 	bic.w	r3, r3, #1
 80007b6:	6113      	str	r3, [r2, #16]
	TIM3->CNT = 0;
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <Tim3_esp_not_stuck+0x2c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24

}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	40000400 	.word	0x40000400

080007cc <Usart6_Init>:
#include "Usart6.h"
#include <string.h>
#include <stdio.h>
#include <stdint.h>

void Usart6_Init(){
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1<<0);
 80007d0:	4b40      	ldr	r3, [pc, #256]	; (80008d4 <Usart6_Init+0x108>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	4a3f      	ldr	r2, [pc, #252]	; (80008d4 <Usart6_Init+0x108>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(1<<22);
 80007dc:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <Usart6_Init+0x10c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a3d      	ldr	r2, [pc, #244]	; (80008d8 <Usart6_Init+0x10c>)
 80007e2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80007e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<23);
 80007e8:	4b3b      	ldr	r3, [pc, #236]	; (80008d8 <Usart6_Init+0x10c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a3a      	ldr	r2, [pc, #232]	; (80008d8 <Usart6_Init+0x10c>)
 80007ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007f2:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(1<<24);
 80007f4:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <Usart6_Init+0x10c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a37      	ldr	r2, [pc, #220]	; (80008d8 <Usart6_Init+0x10c>)
 80007fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<25);
 8000800:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <Usart6_Init+0x10c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <Usart6_Init+0x10c>)
 8000806:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800080a:	6013      	str	r3, [r2, #0]
//	GPIOA->OSPEEDR |= (0b11 << 22);	// PA11(TX) high-speed mode

//	GPIOA->PUPDR &= ~(0b11 << 24); // PA12(RX) pulldown
//	GPIOA->PUPDR |=  (0b10 << 24);

	GPIOA->AFR[1] = (136<<12); // set both PA11 and PA12 to AFRH
 800080c:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <Usart6_Init+0x10c>)
 800080e:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 8000812:	625a      	str	r2, [r3, #36]	; 0x24

	RCC->APB2ENR |= (1<<5);	// Enable USART6 peripheral
 8000814:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <Usart6_Init+0x108>)
 8000816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000818:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <Usart6_Init+0x108>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2RSTR |= (1 << 5);	// Reset the whole peripheral
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <Usart6_Init+0x108>)
 8000822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000824:	4a2b      	ldr	r2, [pc, #172]	; (80008d4 <Usart6_Init+0x108>)
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~(1 << 5);
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <Usart6_Init+0x108>)
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000830:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <Usart6_Init+0x108>)
 8000832:	f023 0320 	bic.w	r3, r3, #32
 8000836:	6253      	str	r3, [r2, #36]	; 0x24

	USART6->CR1 &= ~(0b11 << 2); // disable USART6 RX and TX for now
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <Usart6_Init+0x110>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <Usart6_Init+0x110>)
 800083e:	f023 030c 	bic.w	r3, r3, #12
 8000842:	60d3      	str	r3, [r2, #12]
	USART6->CR1 |=  (1 << 13); // enable USART6
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <Usart6_Init+0x110>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	4a24      	ldr	r2, [pc, #144]	; (80008dc <Usart6_Init+0x110>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	60d3      	str	r3, [r2, #12]

	USART6->BRR &= ~(0x0000FFFF);
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <Usart6_Init+0x110>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	4a21      	ldr	r2, [pc, #132]	; (80008dc <Usart6_Init+0x110>)
 8000856:	0c1b      	lsrs	r3, r3, #16
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	6093      	str	r3, [r2, #8]
	USART6->BRR |= (0x0000008B);
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <Usart6_Init+0x110>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	4a1e      	ldr	r2, [pc, #120]	; (80008dc <Usart6_Init+0x110>)
 8000862:	f043 038b 	orr.w	r3, r3, #139	; 0x8b
 8000866:	6093      	str	r3, [r2, #8]

	USART6->CR1 &= ~(1 << 15);	// OVER8 = 0
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <Usart6_Init+0x110>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <Usart6_Init+0x110>)
 800086e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000872:	60d3      	str	r3, [r2, #12]
	USART6->CR2 &= ~(0b11 << 12);	// One (1) stop bit
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <Usart6_Init+0x110>)
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <Usart6_Init+0x110>)
 800087a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800087e:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 10);	// No parity
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <Usart6_Init+0x110>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	4a15      	ldr	r2, [pc, #84]	; (80008dc <Usart6_Init+0x110>)
 8000886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800088a:	60d3      	str	r3, [r2, #12]

	USART6->CR2 &= ~(1 << 11);
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <Usart6_Init+0x110>)
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <Usart6_Init+0x110>)
 8000892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000896:	6113      	str	r3, [r2, #16]
	USART6->CR1 &= ~(1 << 12);
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <Usart6_Init+0x110>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <Usart6_Init+0x110>)
 800089e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008a2:	60d3      	str	r3, [r2, #12]
	USART6->CR3 &= ~(0b11 << 8);
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <Usart6_Init+0x110>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <Usart6_Init+0x110>)
 80008aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008ae:	6153      	str	r3, [r2, #20]

	NVIC->IP[71] = (4 << 4) & 0xff; // Set priority to 2
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <Usart6_Init+0x114>)
 80008b2:	2240      	movs	r2, #64	; 0x40
 80008b4:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
	NVIC->ISER[2] = (1 << 7); // position 71, ISER 2, bit 7
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <Usart6_Init+0x114>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	609a      	str	r2, [r3, #8]

	USART6->CR1 |= (0b1011<<2);
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <Usart6_Init+0x110>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	4a06      	ldr	r2, [pc, #24]	; (80008dc <Usart6_Init+0x110>)
 80008c4:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80008c8:	60d3      	str	r3, [r2, #12]

}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40011400 	.word	0x40011400
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <USART6_IRQHandler>:

void USART6_IRQHandler(void){
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

	if(USART6->SR & 1<<5){
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <USART6_IRQHandler+0x44>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d013      	beq.n	800091c <USART6_IRQHandler+0x38>

		dataBuffer[dataIndex] = USART6->DR;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <USART6_IRQHandler+0x44>)
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <USART6_IRQHandler+0x48>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	b2d1      	uxtb	r1, r2
 80008fe:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <USART6_IRQHandler+0x4c>)
 8000900:	54d1      	strb	r1, [r2, r3]
		dataIndex += 1;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <USART6_IRQHandler+0x48>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a08      	ldr	r2, [pc, #32]	; (800092c <USART6_IRQHandler+0x48>)
 800090a:	6013      	str	r3, [r2, #0]

		if(dataIndex == 300){
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <USART6_IRQHandler+0x48>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000914:	d102      	bne.n	800091c <USART6_IRQHandler+0x38>
			dataIndex = 0;
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <USART6_IRQHandler+0x48>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
		}

	}

}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40011400 	.word	0x40011400
 800092c:	200001b8 	.word	0x200001b8
 8000930:	2000008c 	.word	0x2000008c

08000934 <USART6_Write>:
	while(!(USART6->SR & (1<<5))){}
	return USART6->DR;

}

void USART6_Write(char ch){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]

	while(!(USART6->SR & (1<<7)));
 800093e:	bf00      	nop
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <USART6_Write+0x3c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f9      	beq.n	8000940 <USART6_Write+0xc>
	USART6->DR = ch;
 800094c:	4a08      	ldr	r2, [pc, #32]	; (8000970 <USART6_Write+0x3c>)
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	6053      	str	r3, [r2, #4]
	while(!(USART6->SR & (1<<6)));
 8000952:	bf00      	nop
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <USART6_Write+0x3c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f9      	beq.n	8000954 <USART6_Write+0x20>

}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40011400 	.word	0x40011400

08000974 <USART6_Text_Write>:

void USART6_Text_Write(char *text){
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	int text_index = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
	int text_length = strlen(text);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff fc2d 	bl	80001e0 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	60bb      	str	r3, [r7, #8]

	while(text_index < text_length){
 800098a:	e009      	b.n	80009a0 <USART6_Text_Write+0x2c>
		USART6_Write(text[text_index]);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ffcd 	bl	8000934 <USART6_Write>
		text_index++;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
	while(text_index < text_length){
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf1      	blt.n	800098c <USART6_Text_Write+0x18>
	}

}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <USART6_Clear_Buffer>:

void USART6_Clear_Buffer(){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

	for(int i=0; i<300; i++){dataBuffer[i] = 0;}
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	e007      	b.n	80009d0 <USART6_Clear_Buffer+0x1c>
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <USART6_Clear_Buffer+0x38>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009d6:	dbf3      	blt.n	80009c0 <USART6_Clear_Buffer+0xc>
	dataIndex = 0;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <USART6_Clear_Buffer+0x3c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
	delay_ms(200);
 80009de:	20c8      	movs	r0, #200	; 0xc8
 80009e0:	f7ff fe1a 	bl	8000618 <delay_ms>

}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	200001b8 	.word	0x200001b8

080009f4 <USART6_Wait_For>:

int USART6_Wait_For(char *response, int delay_further, int clear_buffer){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]

	int dataBufferIndex = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
	int responseIndex = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
	int responseMatched = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

	while(response[responseIndex] != dataBuffer[dataBufferIndex]){dataBufferIndex++;}
 8000a0c:	e002      	b.n	8000a14 <USART6_Wait_For+0x20>
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	3301      	adds	r3, #1
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	492a      	ldr	r1, [pc, #168]	; (8000ac8 <USART6_Wait_For+0xd4>)
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	440b      	add	r3, r1
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d1f2      	bne.n	8000a0e <USART6_Wait_For+0x1a>

	while(dataBuffer[dataBufferIndex] != '\0'){
 8000a28:	e039      	b.n	8000a9e <USART6_Wait_For+0xaa>

		while(response[responseIndex] == dataBuffer[dataBufferIndex]){

			char_checker = dataBuffer[dataBufferIndex];
 8000a2a:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <USART6_Wait_For+0xd4>)
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <USART6_Wait_For+0xd8>)
 8000a34:	701a      	strb	r2, [r3, #0]
			char_checker_2 = response[responseIndex];
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <USART6_Wait_For+0xdc>)
 8000a40:	701a      	strb	r2, [r3, #0]
			delay_ms(200);
 8000a42:	20c8      	movs	r0, #200	; 0xc8
 8000a44:	f7ff fde8 	bl	8000618 <delay_ms>

			if(delay_further){delay_s(1);}
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <USART6_Wait_For+0x60>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff fdf9 	bl	8000646 <delay_s>

			responseIndex++;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	3301      	adds	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
			dataBufferIndex++;
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]

			if(dataBuffer[dataBufferIndex] == '\0' || response[responseIndex] == '\0'){
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <USART6_Wait_For+0xd4>)
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d005      	beq.n	8000a78 <USART6_Wait_For+0x84>
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <USART6_Wait_For+0x8a>

				responseMatched = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
				break;
 8000a7c:	e009      	b.n	8000a92 <USART6_Wait_For+0x9e>
		while(response[responseIndex] == dataBuffer[dataBufferIndex]){
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	4910      	ldr	r1, [pc, #64]	; (8000ac8 <USART6_Wait_For+0xd4>)
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	440b      	add	r3, r1
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d0cb      	beq.n	8000a2a <USART6_Wait_For+0x36>
			}

		}

		if(responseMatched){
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d109      	bne.n	8000aac <USART6_Wait_For+0xb8>
			break;
		} else{
			dataBufferIndex++;
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
	while(dataBuffer[dataBufferIndex] != '\0'){
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <USART6_Wait_For+0xd4>)
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1e9      	bne.n	8000a7e <USART6_Wait_For+0x8a>
 8000aaa:	e000      	b.n	8000aae <USART6_Wait_For+0xba>
			break;
 8000aac:	bf00      	nop
		}

	}

	if(responseMatched && clear_buffer){USART6_Clear_Buffer();}
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <USART6_Wait_For+0xca>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <USART6_Wait_For+0xca>
 8000aba:	f7ff ff7b 	bl	80009b4 <USART6_Clear_Buffer>

	return responseMatched;
 8000abe:	697b      	ldr	r3, [r7, #20]

}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	200001c0 	.word	0x200001c0
 8000ad0:	200001c1 	.word	0x200001c1

08000ad4 <main>:
void sevseg_init(void);
void sevseg_display(int input);
void alert(int alert);

int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
//	float ctr_period;
//	int ppm_value;
	//float time_elapsed;
	//int start_timer;

	capture = 0; // set to 1 if a capture occurs
 8000ad8:	4b76      	ldr	r3, [pc, #472]	; (8000cb4 <main+0x1e0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
	ctr_overflow = 0; // number of overflows
 8000ade:	4b76      	ldr	r3, [pc, #472]	; (8000cb8 <main+0x1e4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
	current_captured = 0; // copy current counter value
 8000ae4:	4b75      	ldr	r3, [pc, #468]	; (8000cbc <main+0x1e8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
	last_captured = 0;
 8000aea:	4b75      	ldr	r3, [pc, #468]	; (8000cc0 <main+0x1ec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
	first_edge_captured = 0; // set to 1 after first capture so second capture knows pulse can be measured
 8000af0:	4b74      	ldr	r3, [pc, #464]	; (8000cc4 <main+0x1f0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
	ctr_freq = SystemCoreClock / 250; // TIM1 counter frequency based on 84 MHz clock
 8000af6:	4b74      	ldr	r3, [pc, #464]	; (8000cc8 <main+0x1f4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a74      	ldr	r2, [pc, #464]	; (8000ccc <main+0x1f8>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	ee07 3a90 	vmov	s15, r3
 8000b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b0a:	4b71      	ldr	r3, [pc, #452]	; (8000cd0 <main+0x1fc>)
 8000b0c:	edc3 7a00 	vstr	s15, [r3]
	ctr_period = 1 / ctr_freq; // TIM1 counter period
 8000b10:	4b6f      	ldr	r3, [pc, #444]	; (8000cd0 <main+0x1fc>)
 8000b12:	ed93 7a00 	vldr	s14, [r3]
 8000b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b1e:	4b6d      	ldr	r3, [pc, #436]	; (8000cd4 <main+0x200>)
 8000b20:	edc3 7a00 	vstr	s15, [r3]

	Usart6_Init();
 8000b24:	f7ff fe52 	bl	80007cc <Usart6_Init>
	sevseg_init();
 8000b28:	f000 fa86 	bl	8001038 <sevseg_init>

	//printf("test print\n");

	Tim2_Init();
 8000b2c:	f7ff fcfc 	bl	8000528 <Tim2_Init>
	Tim3_Init();
 8000b30:	f7ff fdb6 	bl	80006a0 <Tim3_Init>

	checker_1 = 1997;
 8000b34:	4b68      	ldr	r3, [pc, #416]	; (8000cd8 <main+0x204>)
 8000b36:	f240 72cd 	movw	r2, #1997	; 0x7cd
 8000b3a:	601a      	str	r2, [r3, #0]
	delay_s(5);
 8000b3c:	2005      	movs	r0, #5
 8000b3e:	f7ff fd82 	bl	8000646 <delay_s>
	checker_1 = 2997;
 8000b42:	4b65      	ldr	r3, [pc, #404]	; (8000cd8 <main+0x204>)
 8000b44:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8000b48:	601a      	str	r2, [r3, #0]
	//ESP8266_Init("GlobeAtHome_2171B_2.4", "jZGtG7sZ");
//	ESP8266_Init("_WiFi@UPD", "");
//	ESP8266_Init("EEE192-429", "EEE192_Room429");
//	ESP8266_Init("iPhone (8)", "bl3ugh@93");
//	ESP8266_Init("PLDTHOMEFIBRXFGxc", "PLDTWIFIae7dL");
	ESP8266_Init("owo", "mamamopassword");
 8000b4a:	4964      	ldr	r1, [pc, #400]	; (8000cdc <main+0x208>)
 8000b4c:	4864      	ldr	r0, [pc, #400]	; (8000ce0 <main+0x20c>)
 8000b4e:	f7ff fb9f 	bl	8000290 <ESP8266_Init>

//	start_timer = 1;

	//checker_1 = 1995;

	GPIO_Init();
 8000b52:	f000 f8db 	bl	8000d0c <GPIO_Init>
	IC_Init();
 8000b56:	f000 f91b 	bl	8000d90 <IC_Init>
//	  if (start_timer == 1){
//		  Tim3_wait_for_timeout();
//		  start_timer = 0;
//	  }

	  break_wait_for = 0;
 8000b5a:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <main+0x210>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]

	  if(capture){
 8000b60:	4b54      	ldr	r3, [pc, #336]	; (8000cb4 <main+0x1e0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f8      	beq.n	8000b5a <main+0x86>
		  	  	str_current_captured = current_captured;
 8000b68:	4b54      	ldr	r3, [pc, #336]	; (8000cbc <main+0x1e8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a5e      	ldr	r2, [pc, #376]	; (8000ce8 <main+0x214>)
 8000b6e:	6013      	str	r3, [r2, #0]
	  			//current_captured = TIM1->CCR2;

	  			if (first_edge_captured == 0){ // first time capturing, set first_edge_captured to 1
 8000b70:	4b54      	ldr	r3, [pc, #336]	; (8000cc4 <main+0x1f0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d103      	bne.n	8000b80 <main+0xac>
	  				first_edge_captured = 1;
 8000b78:	4b52      	ldr	r3, [pc, #328]	; (8000cc4 <main+0x1f0>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e08d      	b.n	8000c9c <main+0x1c8>
	  			}
	  			else if (first_edge_captured == 1){ // first_edge_captured is 1 thus start recording frequency
 8000b80:	4b50      	ldr	r3, [pc, #320]	; (8000cc4 <main+0x1f0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	f040 8089 	bne.w	8000c9c <main+0x1c8>
	  				first_edge_captured = 0;
 8000b8a:	4b4e      	ldr	r3, [pc, #312]	; (8000cc4 <main+0x1f0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
	  				str_overflow = ctr_overflow;
 8000b90:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <main+0x1e4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a55      	ldr	r2, [pc, #340]	; (8000cec <main+0x218>)
 8000b96:	6013      	str	r3, [r2, #0]
	  				timespan = ctr_period * (str_current_captured - last_captured + (str_overflow*(1 + 65535))); // record the timespan between the two captures
 8000b98:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <main+0x214>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b48      	ldr	r3, [pc, #288]	; (8000cc0 <main+0x1ec>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1ad2      	subs	r2, r2, r3
 8000ba2:	4b52      	ldr	r3, [pc, #328]	; (8000cec <main+0x218>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	041b      	lsls	r3, r3, #16
 8000ba8:	4413      	add	r3, r2
 8000baa:	ee07 3a90 	vmov	s15, r3
 8000bae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <main+0x200>)
 8000bb4:	edd3 7a00 	vldr	s15, [r3]
 8000bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bbc:	4b4c      	ldr	r3, [pc, #304]	; (8000cf0 <main+0x21c>)
 8000bbe:	edc3 7a00 	vstr	s15, [r3]
	  				timespan_ms = timespan * 1000;
 8000bc2:	4b4b      	ldr	r3, [pc, #300]	; (8000cf0 <main+0x21c>)
 8000bc4:	edd3 7a00 	vldr	s15, [r3]
 8000bc8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000cf4 <main+0x220>
 8000bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd0:	4b49      	ldr	r3, [pc, #292]	; (8000cf8 <main+0x224>)
 8000bd2:	edc3 7a00 	vstr	s15, [r3]
	  				ppm_value = 5*(timespan_ms - 2);
 8000bd6:	4b48      	ldr	r3, [pc, #288]	; (8000cf8 <main+0x224>)
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000be0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf0:	ee17 2a90 	vmov	r2, s15
 8000bf4:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <main+0x228>)
 8000bf6:	601a      	str	r2, [r3, #0]
	  				if (first != 0){
 8000bf8:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <main+0x22c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d016      	beq.n	8000c2e <main+0x15a>
	  					first -= 1;
 8000c00:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <main+0x22c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	4a3e      	ldr	r2, [pc, #248]	; (8000d00 <main+0x22c>)
 8000c08:	6013      	str	r3, [r2, #0]
	  					checker_1 = ppm_value;
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <main+0x228>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <main+0x204>)
 8000c10:	6013      	str	r3, [r2, #0]
	  					//sevseg_data = 487;
	  					//alert(2);
	  					//ESP8266_Send_Data("IDM6L0ASEGKNYV0F", 1, 487);
	  					delay_s(20);
 8000c12:	2014      	movs	r0, #20
 8000c14:	f7ff fd17 	bl	8000646 <delay_s>
	  					//HAL_Delay(15);
	  					last_captured = str_current_captured;
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <main+0x214>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a28      	ldr	r2, [pc, #160]	; (8000cc0 <main+0x1ec>)
 8000c1e:	6013      	str	r3, [r2, #0]
	  					capture = 0;
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <main+0x1e0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
	  					ctr_overflow = 0;
 8000c26:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <main+0x1e4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
	  					continue;
 8000c2c:	e040      	b.n	8000cb0 <main+0x1dc>
	  				//printf("%d Counter\n", counter);
	  				//counter += 1;

	  				// time_elapsed = ((TIM3->CNT)*(TIM3->PSC))/SystemCoreClock;

	  				checker_1 = ppm_value;
 8000c2e:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <main+0x228>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <main+0x204>)
 8000c34:	6013      	str	r3, [r2, #0]
	  				sevseg_data = ppm_value;
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <main+0x228>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <main+0x230>)
 8000c3c:	6013      	str	r3, [r2, #0]
	  				if (ppm_value <= 1000){
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <main+0x228>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c46:	dc03      	bgt.n	8000c50 <main+0x17c>
	  					alert(2);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f000 fe41 	bl	80018d0 <alert>
 8000c4e:	e010      	b.n	8000c72 <main+0x19e>
	  				}
	  				else if ((ppm_value > 1000) && (ppm_value <= 4000)){
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <main+0x228>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c58:	dd08      	ble.n	8000c6c <main+0x198>
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <main+0x228>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c62:	dc03      	bgt.n	8000c6c <main+0x198>
	  					alert(1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 fe33 	bl	80018d0 <alert>
 8000c6a:	e002      	b.n	8000c72 <main+0x19e>
	  				}
	  				else{
	  					alert(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 fe2f 	bl	80018d0 <alert>
	  				}
	  				ESP8266_Send_Data("IDM6L0ASEGKNYV0F", 1, ppm_value);
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <main+0x228>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4823      	ldr	r0, [pc, #140]	; (8000d08 <main+0x234>)
 8000c7c:	f7ff fb9e 	bl	80003bc <ESP8266_Send_Data>
//	  				}
//	  				else if (counter == 2){
//	  					alert(2);
//	  					counter = 0;
//	  				}
	  				if (!break_wait_for) {delay_s(20);}
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <main+0x210>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <main+0x1ba>
 8000c88:	2014      	movs	r0, #20
 8000c8a:	f7ff fcdc 	bl	8000646 <delay_s>
	  					//counter = 0;

	  				//delay_s(15);
	  				//HAL_Delay(15);

	  				last_captured = str_current_captured;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <main+0x214>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <main+0x1ec>)
 8000c94:	6013      	str	r3, [r2, #0]
	  				IC_Init();
 8000c96:	f000 f87b 	bl	8000d90 <IC_Init>
	  				continue;
 8000c9a:	e009      	b.n	8000cb0 <main+0x1dc>

	  			}

	  			last_captured = str_current_captured;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <main+0x214>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <main+0x1ec>)
 8000ca2:	6013      	str	r3, [r2, #0]

	  			capture = 0;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <main+0x1e0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
	  			ctr_overflow = 0;
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <main+0x1e4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
	  break_wait_for = 0;
 8000cb0:	e753      	b.n	8000b5a <main+0x86>
 8000cb2:	bf00      	nop
 8000cb4:	200001c4 	.word	0x200001c4
 8000cb8:	200001c8 	.word	0x200001c8
 8000cbc:	200001e0 	.word	0x200001e0
 8000cc0:	200001e4 	.word	0x200001e4
 8000cc4:	200001f0 	.word	0x200001f0
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	10624dd3 	.word	0x10624dd3
 8000cd0:	200001f4 	.word	0x200001f4
 8000cd4:	200001f8 	.word	0x200001f8
 8000cd8:	200001bc 	.word	0x200001bc
 8000cdc:	08002ccc 	.word	0x08002ccc
 8000ce0:	08002cdc 	.word	0x08002cdc
 8000ce4:	200001dc 	.word	0x200001dc
 8000ce8:	20000204 	.word	0x20000204
 8000cec:	20000200 	.word	0x20000200
 8000cf0:	200001e8 	.word	0x200001e8
 8000cf4:	447a0000 	.word	0x447a0000
 8000cf8:	200001ec 	.word	0x200001ec
 8000cfc:	200001fc 	.word	0x200001fc
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004
 8000d08:	08002ce0 	.word	0x08002ce0

08000d0c <GPIO_Init>:

  }

}

void GPIO_Init(void){
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1 << 0); // enable GPIOA peripheral clock
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <GPIO_Init+0x7c>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <GPIO_Init+0x7c>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30

	// insert bit configuration for PA9

	// set PA9 to alternate function mode
	GPIOA->MODER |= (1 << 19);
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <GPIO_Init+0x80>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <GPIO_Init+0x80>)
 8000d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d26:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 18);
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <GPIO_Init+0x80>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <GPIO_Init+0x80>)
 8000d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d32:	6013      	str	r3, [r2, #0]

	// use AF01 for PA9
	GPIOA->AFR[1] &= ~(1 << 7);
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <GPIO_Init+0x80>)
 8000d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <GPIO_Init+0x80>)
 8000d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d3e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1 << 6);
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <GPIO_Init+0x80>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <GPIO_Init+0x80>)
 8000d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d4a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~(1 << 5);
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <GPIO_Init+0x80>)
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <GPIO_Init+0x80>)
 8000d52:	f023 0320 	bic.w	r3, r3, #32
 8000d56:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (1 << 4);
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <GPIO_Init+0x80>)
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <GPIO_Init+0x80>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6253      	str	r3, [r2, #36]	; 0x24

	// set as no pull-up, pull-down
	GPIOA->PUPDR &= ~(1 << 19);
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <GPIO_Init+0x80>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <GPIO_Init+0x80>)
 8000d6a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000d6e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1 << 18);
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <GPIO_Init+0x80>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <GPIO_Init+0x80>)
 8000d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <IC_Init>:

void IC_Init(void){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

	capture = 0;
 8000d94:	4b59      	ldr	r3, [pc, #356]	; (8000efc <IC_Init+0x16c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
	ctr_overflow = 0;
 8000d9a:	4b59      	ldr	r3, [pc, #356]	; (8000f00 <IC_Init+0x170>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
	read_positive = 1;
 8000da0:	4b58      	ldr	r3, [pc, #352]	; (8000f04 <IC_Init+0x174>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]

	RCC->APB2RSTR |= (1 << 0);
 8000da6:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <IC_Init+0x178>)
 8000da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000daa:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <IC_Init+0x178>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~(1 << 0);
 8000db2:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <IC_Init+0x178>)
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	4a54      	ldr	r2, [pc, #336]	; (8000f08 <IC_Init+0x178>)
 8000db8:	f023 0301 	bic.w	r3, r3, #1
 8000dbc:	6253      	str	r3, [r2, #36]	; 0x24

	// insert code here to enable clock of TIM1
	RCC->APB2ENR |= (1 << 0);
 8000dbe:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <IC_Init+0x178>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <IC_Init+0x178>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44

	// insert code here to set counter in edge - aligned mode
	TIM1->CR1 &= ~(1 << 6);
 8000dca:	4b50      	ldr	r3, [pc, #320]	; (8000f0c <IC_Init+0x17c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <IC_Init+0x17c>)
 8000dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dd4:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(1 << 5);
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	; (8000f0c <IC_Init+0x17c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <IC_Init+0x17c>)
 8000ddc:	f023 0320 	bic.w	r3, r3, #32
 8000de0:	6013      	str	r3, [r2, #0]

	// insert code here to set counting direction as up - counting
	TIM1->CR1 &= ~(1 << 4);
 8000de2:	4b4a      	ldr	r3, [pc, #296]	; (8000f0c <IC_Init+0x17c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a49      	ldr	r2, [pc, #292]	; (8000f0c <IC_Init+0x17c>)
 8000de8:	f023 0310 	bic.w	r3, r3, #16
 8000dec:	6013      	str	r3, [r2, #0]

	TIM1->PSC = 249; // set clock prescaler
 8000dee:	4b47      	ldr	r3, [pc, #284]	; (8000f0c <IC_Init+0x17c>)
 8000df0:	22f9      	movs	r2, #249	; 0xf9
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 0xFFFF; // set ARR to max
 8000df4:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <IC_Init+0x17c>)
 8000df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c

	// insert code here to set direction of channel ’n’ as input
	// Used channel 2 due to PA9 AF01 being TIM1_CH2
	TIM1->CCMR1 &= ~(1 << 9);
 8000dfc:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <IC_Init+0x17c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a42      	ldr	r2, [pc, #264]	; (8000f0c <IC_Init+0x17c>)
 8000e02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e06:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1 << 8);
 8000e08:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <IC_Init+0x17c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <IC_Init+0x17c>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6193      	str	r3, [r2, #24]

	// insert code here to program the input filter as follows :
	// set sampling frequency to timer clock frequency
	// set input filter duration to N = 4
	// bits 15 to 12 for the IC2F bits, 0010 to satisfy above requirements
	TIM1->CCMR1 &= ~(1 << 15);
 8000e14:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <IC_Init+0x17c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a3c      	ldr	r2, [pc, #240]	; (8000f0c <IC_Init+0x17c>)
 8000e1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e1e:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 &= ~(1 << 14);
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <IC_Init+0x17c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a39      	ldr	r2, [pc, #228]	; (8000f0c <IC_Init+0x17c>)
 8000e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e2a:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1 << 13);
 8000e2c:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <IC_Init+0x17c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a36      	ldr	r2, [pc, #216]	; (8000f0c <IC_Init+0x17c>)
 8000e32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e36:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 &= ~(1 << 12);
 8000e38:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <IC_Init+0x17c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <IC_Init+0x17c>)
 8000e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e42:	6193      	str	r3, [r2, #24]

	// insert code here to program the input prescaler as follows :
	// no prescaler to capture each transition
	// set IC2PSC bits to 00
	TIM1->CCMR1 &= ~(1 << 11);
 8000e44:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <IC_Init+0x17c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <IC_Init+0x17c>)
 8000e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e4e:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 &= ~(1 << 10);
 8000e50:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <IC_Init+0x17c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a2d      	ldr	r2, [pc, #180]	; (8000f0c <IC_Init+0x17c>)
 8000e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e5a:	6193      	str	r3, [r2, #24]
	// use 11 for non-inverted / rising edge
	//TIM1->CCER |= (1 << 5);
	//TIM1->CCER |= (1 << 7);

	// insert code here to enable capture for channel ’n’
	TIM1->CCER |= (1 << 4);
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <IC_Init+0x17c>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	4a2a      	ldr	r2, [pc, #168]	; (8000f0c <IC_Init+0x17c>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	6213      	str	r3, [r2, #32]

	TIM1->EGR |= (1 << 0); // generate an update
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <IC_Init+0x17c>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <IC_Init+0x17c>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6153      	str	r3, [r2, #20]
	TIM1->CR1 |= (1 << 0); // enable counter
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <IC_Init+0x17c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a24      	ldr	r2, [pc, #144]	; (8000f0c <IC_Init+0x17c>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]
	TIM1->DIER |= (1 << 2); // enable interrupt for timer 1
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <IC_Init+0x17c>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <IC_Init+0x17c>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	60d3      	str	r3, [r2, #12]
	TIM1->DIER |= (1 << 0); // enable update interrupt
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <IC_Init+0x17c>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <IC_Init+0x17c>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	60d3      	str	r3, [r2, #12]
	TIM1->SR &= ~(1 << 2); // clear CCIF
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <IC_Init+0x17c>)
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <IC_Init+0x17c>)
 8000e9e:	f023 0304 	bic.w	r3, r3, #4
 8000ea2:	6113      	str	r3, [r2, #16]
	TIM1->SR &= ~(1 << 0); // clear UIF
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <IC_Init+0x17c>)
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <IC_Init+0x17c>)
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	6113      	str	r3, [r2, #16]

	// set interrupt priority
	NVIC->IP[TIM1_CC_IRQn] = (2 << 4);
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <IC_Init+0x180>)
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
	NVIC->IP[TIM1_UP_TIM10_IRQn] = (3 << 4);
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <IC_Init+0x180>)
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319

	// enable interrupt
	NVIC->ISER[TIM1_CC_IRQn >> 5] |= (1 << (TIM1_CC_IRQn % 32));
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <IC_Init+0x180>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <IC_Init+0x180>)
 8000ec6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000eca:	6013      	str	r3, [r2, #0]
	NVIC->ISER[TIM1_UP_TIM10_IRQn >> 5] |= (1 << (TIM1_UP_TIM10_IRQn % 32));
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <IC_Init+0x180>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <IC_Init+0x180>)
 8000ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed6:	6013      	str	r3, [r2, #0]

	TIM1->CCER &= ~(1 << 7);
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <IC_Init+0x17c>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <IC_Init+0x17c>)
 8000ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ee2:	6213      	str	r3, [r2, #32]
	TIM1->CCER &= ~(1 << 5);
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <IC_Init+0x17c>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <IC_Init+0x17c>)
 8000eea:	f023 0320 	bic.w	r3, r3, #32
 8000eee:	6213      	str	r3, [r2, #32]

}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200001c4 	.word	0x200001c4
 8000f00:	200001c8 	.word	0x200001c8
 8000f04:	200001d0 	.word	0x200001d0
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void){
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

	if(TIM1->SR & (1 << 2)){
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <TIM1_CC_IRQHandler+0x64>)
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <TIM1_CC_IRQHandler+0x58>
		capture = 1;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <TIM1_CC_IRQHandler+0x68>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
		current_captured = TIM1->CCR2;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <TIM1_CC_IRQHandler+0x64>)
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <TIM1_CC_IRQHandler+0x6c>)
 8000f30:	6013      	str	r3, [r2, #0]
		TIM1->SR &= ~(1 << 2); // clear CCIF
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <TIM1_CC_IRQHandler+0x64>)
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <TIM1_CC_IRQHandler+0x64>)
 8000f38:	f023 0304 	bic.w	r3, r3, #4
 8000f3c:	6113      	str	r3, [r2, #16]
		if (read_positive == 1){
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <TIM1_CC_IRQHandler+0x70>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d109      	bne.n	8000f5a <TIM1_CC_IRQHandler+0x46>
			read_positive = 0;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <TIM1_CC_IRQHandler+0x70>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
			TIM1->CCER |= (1 << 5);
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <TIM1_CC_IRQHandler+0x64>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <TIM1_CC_IRQHandler+0x64>)
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	6213      	str	r3, [r2, #32]
		else{
			read_positive = 1;
			TIM1->CCER &= ~(1 << 5);
		}
	}
}
 8000f58:	e008      	b.n	8000f6c <TIM1_CC_IRQHandler+0x58>
			read_positive = 1;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <TIM1_CC_IRQHandler+0x70>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
			TIM1->CCER &= ~(1 << 5);
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <TIM1_CC_IRQHandler+0x64>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <TIM1_CC_IRQHandler+0x64>)
 8000f66:	f023 0320 	bic.w	r3, r3, #32
 8000f6a:	6213      	str	r3, [r2, #32]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	200001c4 	.word	0x200001c4
 8000f80:	200001e0 	.word	0x200001e0
 8000f84:	200001d0 	.word	0x200001d0

08000f88 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	if(TIM1->SR & (1 << 0)){
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00a      	beq.n	8000fae <TIM1_UP_TIM10_IRQHandler+0x26>
		ctr_overflow++;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <TIM1_UP_TIM10_IRQHandler+0x34>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <TIM1_UP_TIM10_IRQHandler+0x34>)
 8000fa0:	6013      	str	r3, [r2, #0]
		TIM1->SR &= ~(1 << 0); // clear UIF
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6113      	str	r3, [r2, #16]
	}
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40010000 	.word	0x40010000
 8000fbc:	200001c8 	.word	0x200001c8

08000fc0 <TIM4_Init>:



void TIM4_Init(void){
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<2); // Enable clock for TIM4
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <TIM4_Init+0x6c>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a18      	ldr	r2, [pc, #96]	; (800102c <TIM4_Init+0x6c>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->PSC = 1600-1; // Set PSC+1 = 160000
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <TIM4_Init+0x70>)
 8000fd2:	f240 623f 	movw	r2, #1599	; 0x63f
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 4; // Set timer to reset after CNT = 100
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <TIM4_Init+0x70>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->DIER |= (1<<0); // Enable timer interrupt generation
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <TIM4_Init+0x70>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <TIM4_Init+0x70>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	60d3      	str	r3, [r2, #12]
	NVIC->IP[TIM4_IRQn] = (6 << 4); // Set priority to 2
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <TIM4_Init+0x74>)
 8000fec:	2260      	movs	r2, #96	; 0x60
 8000fee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
	NVIC->ISER[TIM4_IRQn >> 5] |= (1 << (TIM4_IRQn % 32)); // Enable interrupt
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <TIM4_Init+0x74>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <TIM4_Init+0x74>)
 8000ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ffc:	6013      	str	r3, [r2, #0]
	TIM4->SR &= ~(1<<0);
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <TIM4_Init+0x70>)
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <TIM4_Init+0x70>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6113      	str	r3, [r2, #16]
	TIM4->EGR |= (1<<0);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <TIM4_Init+0x70>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <TIM4_Init+0x70>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6153      	str	r3, [r2, #20]
	TIM4->CR1 |= (1<<0); // enable timer
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <TIM4_Init+0x70>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <TIM4_Init+0x70>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800
 8001030:	40000800 	.word	0x40000800
 8001034:	e000e100 	.word	0xe000e100

08001038 <sevseg_init>:

void sevseg_init(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	TIM4_Init();
 800103c:	f7ff ffc0 	bl	8000fc0 <TIM4_Init>
	RCC->AHB1ENR |= (1<<0);
 8001040:	4b98      	ldr	r3, [pc, #608]	; (80012a4 <sevseg_init+0x26c>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	4a97      	ldr	r2, [pc, #604]	; (80012a4 <sevseg_init+0x26c>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<1);
 800104c:	4b95      	ldr	r3, [pc, #596]	; (80012a4 <sevseg_init+0x26c>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4a94      	ldr	r2, [pc, #592]	; (80012a4 <sevseg_init+0x26c>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1<<2);
 8001058:	4b92      	ldr	r3, [pc, #584]	; (80012a4 <sevseg_init+0x26c>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a91      	ldr	r2, [pc, #580]	; (80012a4 <sevseg_init+0x26c>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6313      	str	r3, [r2, #48]	; 0x30
	//PA0 1st digit
	GPIOA->MODER &= ~(1<<1);
 8001064:	4b90      	ldr	r3, [pc, #576]	; (80012a8 <sevseg_init+0x270>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a8f      	ldr	r2, [pc, #572]	; (80012a8 <sevseg_init+0x270>)
 800106a:	f023 0302 	bic.w	r3, r3, #2
 800106e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<0);
 8001070:	4b8d      	ldr	r3, [pc, #564]	; (80012a8 <sevseg_init+0x270>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a8c      	ldr	r2, [pc, #560]	; (80012a8 <sevseg_init+0x270>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<0);
 800107c:	4b8a      	ldr	r3, [pc, #552]	; (80012a8 <sevseg_init+0x270>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a89      	ldr	r2, [pc, #548]	; (80012a8 <sevseg_init+0x270>)
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1<<0);
 8001088:	4b87      	ldr	r3, [pc, #540]	; (80012a8 <sevseg_init+0x270>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	4a86      	ldr	r2, [pc, #536]	; (80012a8 <sevseg_init+0x270>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6153      	str	r3, [r2, #20]
	// PB5 2nd digit
	GPIOB->MODER &= ~(1<<11);
 8001094:	4b85      	ldr	r3, [pc, #532]	; (80012ac <sevseg_init+0x274>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a84      	ldr	r2, [pc, #528]	; (80012ac <sevseg_init+0x274>)
 800109a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800109e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<10);
 80010a0:	4b82      	ldr	r3, [pc, #520]	; (80012ac <sevseg_init+0x274>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a81      	ldr	r2, [pc, #516]	; (80012ac <sevseg_init+0x274>)
 80010a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010aa:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<5);
 80010ac:	4b7f      	ldr	r3, [pc, #508]	; (80012ac <sevseg_init+0x274>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a7e      	ldr	r2, [pc, #504]	; (80012ac <sevseg_init+0x274>)
 80010b2:	f023 0320 	bic.w	r3, r3, #32
 80010b6:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= (1<<5);
 80010b8:	4b7c      	ldr	r3, [pc, #496]	; (80012ac <sevseg_init+0x274>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	4a7b      	ldr	r2, [pc, #492]	; (80012ac <sevseg_init+0x274>)
 80010be:	f043 0320 	orr.w	r3, r3, #32
 80010c2:	6153      	str	r3, [r2, #20]
	//PB4 3rd digit
	GPIOB->MODER &= ~(1<<9);
 80010c4:	4b79      	ldr	r3, [pc, #484]	; (80012ac <sevseg_init+0x274>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a78      	ldr	r2, [pc, #480]	; (80012ac <sevseg_init+0x274>)
 80010ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<8);
 80010d0:	4b76      	ldr	r3, [pc, #472]	; (80012ac <sevseg_init+0x274>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a75      	ldr	r2, [pc, #468]	; (80012ac <sevseg_init+0x274>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<4);
 80010dc:	4b73      	ldr	r3, [pc, #460]	; (80012ac <sevseg_init+0x274>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a72      	ldr	r2, [pc, #456]	; (80012ac <sevseg_init+0x274>)
 80010e2:	f023 0310 	bic.w	r3, r3, #16
 80010e6:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= (1<<4);
 80010e8:	4b70      	ldr	r3, [pc, #448]	; (80012ac <sevseg_init+0x274>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a6f      	ldr	r2, [pc, #444]	; (80012ac <sevseg_init+0x274>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	6153      	str	r3, [r2, #20]
	// PA1 4th digit
	GPIOA->MODER &= ~(1<<3);
 80010f4:	4b6c      	ldr	r3, [pc, #432]	; (80012a8 <sevseg_init+0x270>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a6b      	ldr	r2, [pc, #428]	; (80012a8 <sevseg_init+0x270>)
 80010fa:	f023 0308 	bic.w	r3, r3, #8
 80010fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<2);
 8001100:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <sevseg_init+0x270>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <sevseg_init+0x270>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<1);
 800110c:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <sevseg_init+0x270>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a65      	ldr	r2, [pc, #404]	; (80012a8 <sevseg_init+0x270>)
 8001112:	f023 0302 	bic.w	r3, r3, #2
 8001116:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= (1<<1);
 8001118:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <sevseg_init+0x270>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	4a62      	ldr	r2, [pc, #392]	; (80012a8 <sevseg_init+0x270>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	6153      	str	r3, [r2, #20]
	// PB3 a
	GPIOB->MODER &= ~(1<<7);
 8001124:	4b61      	ldr	r3, [pc, #388]	; (80012ac <sevseg_init+0x274>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a60      	ldr	r2, [pc, #384]	; (80012ac <sevseg_init+0x274>)
 800112a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800112e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<6);
 8001130:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <sevseg_init+0x274>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a5d      	ldr	r2, [pc, #372]	; (80012ac <sevseg_init+0x274>)
 8001136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<3);
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <sevseg_init+0x274>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a5a      	ldr	r2, [pc, #360]	; (80012ac <sevseg_init+0x274>)
 8001142:	f023 0308 	bic.w	r3, r3, #8
 8001146:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<3);
 8001148:	4b58      	ldr	r3, [pc, #352]	; (80012ac <sevseg_init+0x274>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	4a57      	ldr	r2, [pc, #348]	; (80012ac <sevseg_init+0x274>)
 800114e:	f023 0308 	bic.w	r3, r3, #8
 8001152:	6153      	str	r3, [r2, #20]
	// PA8 b
	GPIOA->MODER &= ~(1<<17);
 8001154:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <sevseg_init+0x270>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a53      	ldr	r2, [pc, #332]	; (80012a8 <sevseg_init+0x270>)
 800115a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800115e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<16);
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <sevseg_init+0x270>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a50      	ldr	r2, [pc, #320]	; (80012a8 <sevseg_init+0x270>)
 8001166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<8);
 800116c:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <sevseg_init+0x270>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4a4d      	ldr	r2, [pc, #308]	; (80012a8 <sevseg_init+0x270>)
 8001172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001176:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~(1<<8);
 8001178:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <sevseg_init+0x270>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	4a4a      	ldr	r2, [pc, #296]	; (80012a8 <sevseg_init+0x270>)
 800117e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001182:	6153      	str	r3, [r2, #20]
	// PC0 c
	GPIOC->MODER &= ~(1<<1);
 8001184:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <sevseg_init+0x278>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a49      	ldr	r2, [pc, #292]	; (80012b0 <sevseg_init+0x278>)
 800118a:	f023 0302 	bic.w	r3, r3, #2
 800118e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<0);
 8001190:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <sevseg_init+0x278>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a46      	ldr	r2, [pc, #280]	; (80012b0 <sevseg_init+0x278>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<0);
 800119c:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <sevseg_init+0x278>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a43      	ldr	r2, [pc, #268]	; (80012b0 <sevseg_init+0x278>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<0);
 80011a8:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <sevseg_init+0x278>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	4a40      	ldr	r2, [pc, #256]	; (80012b0 <sevseg_init+0x278>)
 80011ae:	f023 0301 	bic.w	r3, r3, #1
 80011b2:	6153      	str	r3, [r2, #20]
	// PC1 d
	GPIOC->MODER &= ~(1<<3);
 80011b4:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <sevseg_init+0x278>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a3d      	ldr	r2, [pc, #244]	; (80012b0 <sevseg_init+0x278>)
 80011ba:	f023 0308 	bic.w	r3, r3, #8
 80011be:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<2);
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <sevseg_init+0x278>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a3a      	ldr	r2, [pc, #232]	; (80012b0 <sevseg_init+0x278>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<1);
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <sevseg_init+0x278>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <sevseg_init+0x278>)
 80011d2:	f023 0302 	bic.w	r3, r3, #2
 80011d6:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<1);
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <sevseg_init+0x278>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	4a34      	ldr	r2, [pc, #208]	; (80012b0 <sevseg_init+0x278>)
 80011de:	f023 0302 	bic.w	r3, r3, #2
 80011e2:	6153      	str	r3, [r2, #20]
	// PB0 e
	GPIOB->MODER &= ~(1<<1);
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <sevseg_init+0x274>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a30      	ldr	r2, [pc, #192]	; (80012ac <sevseg_init+0x274>)
 80011ea:	f023 0302 	bic.w	r3, r3, #2
 80011ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<0);
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <sevseg_init+0x274>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <sevseg_init+0x274>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<0);
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <sevseg_init+0x274>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <sevseg_init+0x274>)
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<0);
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <sevseg_init+0x274>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	4a27      	ldr	r2, [pc, #156]	; (80012ac <sevseg_init+0x274>)
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6153      	str	r3, [r2, #20]
	// PB10 f
	GPIOB->MODER &= ~(1<<21);
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <sevseg_init+0x274>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a24      	ldr	r2, [pc, #144]	; (80012ac <sevseg_init+0x274>)
 800121a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800121e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<20);
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <sevseg_init+0x274>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a21      	ldr	r2, [pc, #132]	; (80012ac <sevseg_init+0x274>)
 8001226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800122a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<10);
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <sevseg_init+0x274>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <sevseg_init+0x274>)
 8001232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001236:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<10);
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <sevseg_init+0x274>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <sevseg_init+0x274>)
 800123e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001242:	6153      	str	r3, [r2, #20]
	// PA4 g
	GPIOA->MODER &= ~(1<<9);
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <sevseg_init+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <sevseg_init+0x270>)
 800124a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800124e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<8);
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <sevseg_init+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <sevseg_init+0x270>)
 8001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<4);
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <sevseg_init+0x270>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <sevseg_init+0x270>)
 8001262:	f023 0310 	bic.w	r3, r3, #16
 8001266:	6053      	str	r3, [r2, #4]
	GPIOA->ODR &= ~(1<<4);
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <sevseg_init+0x270>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <sevseg_init+0x270>)
 800126e:	f023 0310 	bic.w	r3, r3, #16
 8001272:	6153      	str	r3, [r2, #20]
	//PC9 red
	GPIOC->MODER &= ~(1<<19);
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <sevseg_init+0x278>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <sevseg_init+0x278>)
 800127a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800127e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1<<18);
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <sevseg_init+0x278>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <sevseg_init+0x278>)
 8001286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~(1<<1);
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <sevseg_init+0x278>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <sevseg_init+0x278>)
 8001292:	f023 0302 	bic.w	r3, r3, #2
 8001296:	6053      	str	r3, [r2, #4]
	GPIOC->ODR &= ~(1<<9);
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <sevseg_init+0x278>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <sevseg_init+0x278>)
 800129e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012a2:	e007      	b.n	80012b4 <sevseg_init+0x27c>
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	6153      	str	r3, [r2, #20]
	//PB8 yellow
	GPIOB->MODER &= ~(1<<17);
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <sevseg_init+0x2e4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <sevseg_init+0x2e4>)
 80012bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012c0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<16);
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <sevseg_init+0x2e4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <sevseg_init+0x2e4>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<1);
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <sevseg_init+0x2e4>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <sevseg_init+0x2e4>)
 80012d4:	f023 0302 	bic.w	r3, r3, #2
 80012d8:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<8);
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <sevseg_init+0x2e4>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <sevseg_init+0x2e4>)
 80012e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e4:	6153      	str	r3, [r2, #20]
	//PB9 green
	GPIOB->MODER &= ~(1<<19);
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <sevseg_init+0x2e4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a0c      	ldr	r2, [pc, #48]	; (800131c <sevseg_init+0x2e4>)
 80012ec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80012f0:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1<<18);
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <sevseg_init+0x2e4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <sevseg_init+0x2e4>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &= ~(1<<1);
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <sevseg_init+0x2e4>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <sevseg_init+0x2e4>)
 8001304:	f023 0302 	bic.w	r3, r3, #2
 8001308:	6053      	str	r3, [r2, #4]
	GPIOB->ODR &= ~(1<<9);
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <sevseg_init+0x2e4>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a03      	ldr	r2, [pc, #12]	; (800131c <sevseg_init+0x2e4>)
 8001310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001314:	6153      	str	r3, [r2, #20]
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40020400 	.word	0x40020400

08001320 <sevseg_display>:

void sevseg_display(int input){
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if (input > 9999){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f242 720f 	movw	r2, #9999	; 0x270f
 800132e:	4293      	cmp	r3, r2
 8001330:	dd03      	ble.n	800133a <sevseg_display+0x1a>
		input = 9999;
 8001332:	f242 730f 	movw	r3, #9999	; 0x270f
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	e004      	b.n	8001344 <sevseg_display+0x24>
	}else if (input < 0){
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	da01      	bge.n	8001344 <sevseg_display+0x24>
		input = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
	}
	int thou = (input / 1000) % 10;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4aa0      	ldr	r2, [pc, #640]	; (80015c8 <sevseg_display+0x2a8>)
 8001348:	fb82 1203 	smull	r1, r2, r2, r3
 800134c:	1192      	asrs	r2, r2, #6
 800134e:	17db      	asrs	r3, r3, #31
 8001350:	1ad2      	subs	r2, r2, r3
 8001352:	4b9e      	ldr	r3, [pc, #632]	; (80015cc <sevseg_display+0x2ac>)
 8001354:	fb83 1302 	smull	r1, r3, r3, r2
 8001358:	1099      	asrs	r1, r3, #2
 800135a:	17d3      	asrs	r3, r2, #31
 800135c:	1ac9      	subs	r1, r1, r3
 800135e:	460b      	mov	r3, r1
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
	int hund = (input / 100) % 10;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a98      	ldr	r2, [pc, #608]	; (80015d0 <sevseg_display+0x2b0>)
 800136e:	fb82 1203 	smull	r1, r2, r2, r3
 8001372:	1152      	asrs	r2, r2, #5
 8001374:	17db      	asrs	r3, r3, #31
 8001376:	1ad2      	subs	r2, r2, r3
 8001378:	4b94      	ldr	r3, [pc, #592]	; (80015cc <sevseg_display+0x2ac>)
 800137a:	fb83 1302 	smull	r1, r3, r3, r2
 800137e:	1099      	asrs	r1, r3, #2
 8001380:	17d3      	asrs	r3, r2, #31
 8001382:	1ac9      	subs	r1, r1, r3
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	613b      	str	r3, [r7, #16]
	int tens = (input / 10) % 10;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a8e      	ldr	r2, [pc, #568]	; (80015cc <sevseg_display+0x2ac>)
 8001394:	fb82 1203 	smull	r1, r2, r2, r3
 8001398:	1092      	asrs	r2, r2, #2
 800139a:	17db      	asrs	r3, r3, #31
 800139c:	1ad2      	subs	r2, r2, r3
 800139e:	4b8b      	ldr	r3, [pc, #556]	; (80015cc <sevseg_display+0x2ac>)
 80013a0:	fb83 1302 	smull	r1, r3, r3, r2
 80013a4:	1099      	asrs	r1, r3, #2
 80013a6:	17d3      	asrs	r3, r2, #31
 80013a8:	1ac9      	subs	r1, r1, r3
 80013aa:	460b      	mov	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	60fb      	str	r3, [r7, #12]
	int ones = (input / 1) % 10;
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4b84      	ldr	r3, [pc, #528]	; (80015cc <sevseg_display+0x2ac>)
 80013ba:	fb83 1302 	smull	r1, r3, r3, r2
 80013be:	1099      	asrs	r1, r3, #2
 80013c0:	17d3      	asrs	r3, r2, #31
 80013c2:	1ac9      	subs	r1, r1, r3
 80013c4:	460b      	mov	r3, r1
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	60bb      	str	r3, [r7, #8]

		int digit = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
		switch (sevsegnum) {
 80013d4:	4b7f      	ldr	r3, [pc, #508]	; (80015d4 <sevseg_display+0x2b4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	f200 8083 	bhi.w	80014e4 <sevseg_display+0x1c4>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <sevseg_display+0xc4>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	080013f5 	.word	0x080013f5
 80013e8:	08001431 	.word	0x08001431
 80013ec:	0800146d 	.word	0x0800146d
 80013f0:	080014a9 	.word	0x080014a9
		case 0:
			digit = thou;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR &= ~(1<<0); //1
 80013f8:	4b77      	ldr	r3, [pc, #476]	; (80015d8 <sevseg_display+0x2b8>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	4a76      	ldr	r2, [pc, #472]	; (80015d8 <sevseg_display+0x2b8>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 8001404:	4b75      	ldr	r3, [pc, #468]	; (80015dc <sevseg_display+0x2bc>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	4a74      	ldr	r2, [pc, #464]	; (80015dc <sevseg_display+0x2bc>)
 800140a:	f043 0320 	orr.w	r3, r3, #32
 800140e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 8001410:	4b72      	ldr	r3, [pc, #456]	; (80015dc <sevseg_display+0x2bc>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	4a71      	ldr	r2, [pc, #452]	; (80015dc <sevseg_display+0x2bc>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 800141c:	4b6e      	ldr	r3, [pc, #440]	; (80015d8 <sevseg_display+0x2b8>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	4a6d      	ldr	r2, [pc, #436]	; (80015d8 <sevseg_display+0x2b8>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	6153      	str	r3, [r2, #20]
			sevsegnum = 3;
 8001428:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <sevseg_display+0x2b4>)
 800142a:	2203      	movs	r2, #3
 800142c:	601a      	str	r2, [r3, #0]
		break;
 800142e:	e059      	b.n	80014e4 <sevseg_display+0x1c4>

		case 1:
			digit = hund;
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 8001434:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <sevseg_display+0x2b8>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	4a67      	ldr	r2, [pc, #412]	; (80015d8 <sevseg_display+0x2b8>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<5); //2
 8001440:	4b66      	ldr	r3, [pc, #408]	; (80015dc <sevseg_display+0x2bc>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	4a65      	ldr	r2, [pc, #404]	; (80015dc <sevseg_display+0x2bc>)
 8001446:	f023 0320 	bic.w	r3, r3, #32
 800144a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 800144c:	4b63      	ldr	r3, [pc, #396]	; (80015dc <sevseg_display+0x2bc>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	4a62      	ldr	r2, [pc, #392]	; (80015dc <sevseg_display+0x2bc>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 8001458:	4b5f      	ldr	r3, [pc, #380]	; (80015d8 <sevseg_display+0x2b8>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	4a5e      	ldr	r2, [pc, #376]	; (80015d8 <sevseg_display+0x2b8>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	6153      	str	r3, [r2, #20]
			sevsegnum = 0;
 8001464:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <sevseg_display+0x2b4>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
		break;
 800146a:	e03b      	b.n	80014e4 <sevseg_display+0x1c4>

		case 2:
			digit = tens;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <sevseg_display+0x2b8>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <sevseg_display+0x2b8>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 800147c:	4b57      	ldr	r3, [pc, #348]	; (80015dc <sevseg_display+0x2bc>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4a56      	ldr	r2, [pc, #344]	; (80015dc <sevseg_display+0x2bc>)
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<4); //3
 8001488:	4b54      	ldr	r3, [pc, #336]	; (80015dc <sevseg_display+0x2bc>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a53      	ldr	r2, [pc, #332]	; (80015dc <sevseg_display+0x2bc>)
 800148e:	f023 0310 	bic.w	r3, r3, #16
 8001492:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<1); //4
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <sevseg_display+0x2b8>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <sevseg_display+0x2b8>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	6153      	str	r3, [r2, #20]
			sevsegnum = 1;
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <sevseg_display+0x2b4>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
		break;
 80014a6:	e01d      	b.n	80014e4 <sevseg_display+0x1c4>

		case 3:
			digit = ones;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	61fb      	str	r3, [r7, #28]
			GPIOA->ODR |= (1<<0); //1
 80014ac:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <sevseg_display+0x2b8>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <sevseg_display+0x2b8>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<5); //2
 80014b8:	4b48      	ldr	r3, [pc, #288]	; (80015dc <sevseg_display+0x2bc>)
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	4a47      	ldr	r2, [pc, #284]	; (80015dc <sevseg_display+0x2bc>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<4); //3
 80014c4:	4b45      	ldr	r3, [pc, #276]	; (80015dc <sevseg_display+0x2bc>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	4a44      	ldr	r2, [pc, #272]	; (80015dc <sevseg_display+0x2bc>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<1); //4
 80014d0:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <sevseg_display+0x2b8>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <sevseg_display+0x2b8>)
 80014d6:	f023 0302 	bic.w	r3, r3, #2
 80014da:	6153      	str	r3, [r2, #20]
			sevsegnum = 2;
 80014dc:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <sevseg_display+0x2b4>)
 80014de:	2202      	movs	r2, #2
 80014e0:	601a      	str	r2, [r3, #0]
		break;
 80014e2:	bf00      	nop
		}
		switch(digit) {
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b09      	cmp	r3, #9
 80014e8:	f200 81db 	bhi.w	80018a2 <sevseg_display+0x582>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <sevseg_display+0x1d4>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	0800151d 	.word	0x0800151d
 80014f8:	08001573 	.word	0x08001573
 80014fc:	080015e5 	.word	0x080015e5
 8001500:	0800163b 	.word	0x0800163b
 8001504:	08001691 	.word	0x08001691
 8001508:	080016e7 	.word	0x080016e7
 800150c:	0800173d 	.word	0x0800173d
 8001510:	08001793 	.word	0x08001793
 8001514:	080017e9 	.word	0x080017e9
 8001518:	0800184d 	.word	0x0800184d
		case 0: //abcdef
			GPIOB->ODR |= (1<<3); //a
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <sevseg_display+0x2bc>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	4a2e      	ldr	r2, [pc, #184]	; (80015dc <sevseg_display+0x2bc>)
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <sevseg_display+0x2b8>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <sevseg_display+0x2b8>)
 800152e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001532:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001534:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <sevseg_display+0x2c0>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <sevseg_display+0x2c0>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <sevseg_display+0x2c0>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <sevseg_display+0x2c0>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <sevseg_display+0x2bc>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <sevseg_display+0x2bc>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <sevseg_display+0x2bc>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <sevseg_display+0x2bc>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <sevseg_display+0x2b8>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <sevseg_display+0x2b8>)
 800156a:	f023 0310 	bic.w	r3, r3, #16
 800156e:	6153      	str	r3, [r2, #20]
		break;
 8001570:	e197      	b.n	80018a2 <sevseg_display+0x582>

		case 1:
			GPIOB->ODR &= ~(1<<3); //a
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <sevseg_display+0x2bc>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a19      	ldr	r2, [pc, #100]	; (80015dc <sevseg_display+0x2bc>)
 8001578:	f023 0308 	bic.w	r3, r3, #8
 800157c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <sevseg_display+0x2b8>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <sevseg_display+0x2b8>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <sevseg_display+0x2c0>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <sevseg_display+0x2c0>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <sevseg_display+0x2c0>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <sevseg_display+0x2c0>)
 800159c:	f023 0302 	bic.w	r3, r3, #2
 80015a0:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <sevseg_display+0x2bc>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <sevseg_display+0x2bc>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <sevseg_display+0x2bc>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <sevseg_display+0x2bc>)
 80015b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015b8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <sevseg_display+0x2b8>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <sevseg_display+0x2b8>)
 80015c0:	f023 0310 	bic.w	r3, r3, #16
 80015c4:	6153      	str	r3, [r2, #20]
		break;
 80015c6:	e16c      	b.n	80018a2 <sevseg_display+0x582>
 80015c8:	10624dd3 	.word	0x10624dd3
 80015cc:	66666667 	.word	0x66666667
 80015d0:	51eb851f 	.word	0x51eb851f
 80015d4:	200001d4 	.word	0x200001d4
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800

		case 2:
			GPIOB->ODR |= (1<<3); //a
 80015e4:	4b96      	ldr	r3, [pc, #600]	; (8001840 <sevseg_display+0x520>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	4a95      	ldr	r2, [pc, #596]	; (8001840 <sevseg_display+0x520>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 80015f0:	4b94      	ldr	r3, [pc, #592]	; (8001844 <sevseg_display+0x524>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a93      	ldr	r2, [pc, #588]	; (8001844 <sevseg_display+0x524>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<0); //c
 80015fc:	4b92      	ldr	r3, [pc, #584]	; (8001848 <sevseg_display+0x528>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	4a91      	ldr	r2, [pc, #580]	; (8001848 <sevseg_display+0x528>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8001608:	4b8f      	ldr	r3, [pc, #572]	; (8001848 <sevseg_display+0x528>)
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	4a8e      	ldr	r2, [pc, #568]	; (8001848 <sevseg_display+0x528>)
 800160e:	f043 0302 	orr.w	r3, r3, #2
 8001612:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 8001614:	4b8a      	ldr	r3, [pc, #552]	; (8001840 <sevseg_display+0x520>)
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	4a89      	ldr	r2, [pc, #548]	; (8001840 <sevseg_display+0x520>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 8001620:	4b87      	ldr	r3, [pc, #540]	; (8001840 <sevseg_display+0x520>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	4a86      	ldr	r2, [pc, #536]	; (8001840 <sevseg_display+0x520>)
 8001626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800162a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 800162c:	4b85      	ldr	r3, [pc, #532]	; (8001844 <sevseg_display+0x524>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	4a84      	ldr	r2, [pc, #528]	; (8001844 <sevseg_display+0x524>)
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	6153      	str	r3, [r2, #20]
		break;
 8001638:	e133      	b.n	80018a2 <sevseg_display+0x582>

		case 3:
			GPIOB->ODR |= (1<<3); //a
 800163a:	4b81      	ldr	r3, [pc, #516]	; (8001840 <sevseg_display+0x520>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a80      	ldr	r2, [pc, #512]	; (8001840 <sevseg_display+0x520>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8001646:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <sevseg_display+0x524>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a7e      	ldr	r2, [pc, #504]	; (8001844 <sevseg_display+0x524>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001652:	4b7d      	ldr	r3, [pc, #500]	; (8001848 <sevseg_display+0x528>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a7c      	ldr	r2, [pc, #496]	; (8001848 <sevseg_display+0x528>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 800165e:	4b7a      	ldr	r3, [pc, #488]	; (8001848 <sevseg_display+0x528>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a79      	ldr	r2, [pc, #484]	; (8001848 <sevseg_display+0x528>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 800166a:	4b75      	ldr	r3, [pc, #468]	; (8001840 <sevseg_display+0x520>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a74      	ldr	r2, [pc, #464]	; (8001840 <sevseg_display+0x520>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 8001676:	4b72      	ldr	r3, [pc, #456]	; (8001840 <sevseg_display+0x520>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a71      	ldr	r2, [pc, #452]	; (8001840 <sevseg_display+0x520>)
 800167c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001680:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8001682:	4b70      	ldr	r3, [pc, #448]	; (8001844 <sevseg_display+0x524>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	4a6f      	ldr	r2, [pc, #444]	; (8001844 <sevseg_display+0x524>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6153      	str	r3, [r2, #20]
		break;
 800168e:	e108      	b.n	80018a2 <sevseg_display+0x582>

		case 4:
			GPIOB->ODR &= ~(1<<3); //a
 8001690:	4b6b      	ldr	r3, [pc, #428]	; (8001840 <sevseg_display+0x520>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	4a6a      	ldr	r2, [pc, #424]	; (8001840 <sevseg_display+0x520>)
 8001696:	f023 0308 	bic.w	r3, r3, #8
 800169a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 800169c:	4b69      	ldr	r3, [pc, #420]	; (8001844 <sevseg_display+0x524>)
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	4a68      	ldr	r2, [pc, #416]	; (8001844 <sevseg_display+0x524>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 80016a8:	4b67      	ldr	r3, [pc, #412]	; (8001848 <sevseg_display+0x528>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	4a66      	ldr	r2, [pc, #408]	; (8001848 <sevseg_display+0x528>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 80016b4:	4b64      	ldr	r3, [pc, #400]	; (8001848 <sevseg_display+0x528>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	4a63      	ldr	r2, [pc, #396]	; (8001848 <sevseg_display+0x528>)
 80016ba:	f023 0302 	bic.w	r3, r3, #2
 80016be:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80016c0:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <sevseg_display+0x520>)
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <sevseg_display+0x520>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 80016cc:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <sevseg_display+0x520>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	4a5b      	ldr	r2, [pc, #364]	; (8001840 <sevseg_display+0x520>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d6:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 80016d8:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <sevseg_display+0x524>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	4a59      	ldr	r2, [pc, #356]	; (8001844 <sevseg_display+0x524>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6153      	str	r3, [r2, #20]
		break;
 80016e4:	e0dd      	b.n	80018a2 <sevseg_display+0x582>

		case 5:
			GPIOB->ODR |= (1<<3); //a
 80016e6:	4b56      	ldr	r3, [pc, #344]	; (8001840 <sevseg_display+0x520>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4a55      	ldr	r2, [pc, #340]	; (8001840 <sevseg_display+0x520>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<8); //b
 80016f2:	4b54      	ldr	r3, [pc, #336]	; (8001844 <sevseg_display+0x524>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a53      	ldr	r2, [pc, #332]	; (8001844 <sevseg_display+0x524>)
 80016f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016fc:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 80016fe:	4b52      	ldr	r3, [pc, #328]	; (8001848 <sevseg_display+0x528>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	4a51      	ldr	r2, [pc, #324]	; (8001848 <sevseg_display+0x528>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 800170a:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <sevseg_display+0x528>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <sevseg_display+0x528>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 8001716:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <sevseg_display+0x520>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	4a49      	ldr	r2, [pc, #292]	; (8001840 <sevseg_display+0x520>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <sevseg_display+0x520>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4a46      	ldr	r2, [pc, #280]	; (8001840 <sevseg_display+0x520>)
 8001728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 800172e:	4b45      	ldr	r3, [pc, #276]	; (8001844 <sevseg_display+0x524>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	4a44      	ldr	r2, [pc, #272]	; (8001844 <sevseg_display+0x524>)
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	6153      	str	r3, [r2, #20]
		break;
 800173a:	e0b2      	b.n	80018a2 <sevseg_display+0x582>

		case 6:
			GPIOB->ODR |= (1<<3); //a
 800173c:	4b40      	ldr	r3, [pc, #256]	; (8001840 <sevseg_display+0x520>)
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	4a3f      	ldr	r2, [pc, #252]	; (8001840 <sevseg_display+0x520>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<8); //b
 8001748:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <sevseg_display+0x524>)
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <sevseg_display+0x524>)
 800174e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001752:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001754:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <sevseg_display+0x528>)
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <sevseg_display+0x528>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <sevseg_display+0x528>)
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	4a38      	ldr	r2, [pc, #224]	; (8001848 <sevseg_display+0x528>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 800176c:	4b34      	ldr	r3, [pc, #208]	; (8001840 <sevseg_display+0x520>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	4a33      	ldr	r2, [pc, #204]	; (8001840 <sevseg_display+0x520>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <sevseg_display+0x520>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	4a30      	ldr	r2, [pc, #192]	; (8001840 <sevseg_display+0x520>)
 800177e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001782:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8001784:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <sevseg_display+0x524>)
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	4a2e      	ldr	r2, [pc, #184]	; (8001844 <sevseg_display+0x524>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	6153      	str	r3, [r2, #20]
		break;
 8001790:	e087      	b.n	80018a2 <sevseg_display+0x582>

		case 7:
			GPIOB->ODR |= (1<<3); //a
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <sevseg_display+0x520>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	4a2a      	ldr	r2, [pc, #168]	; (8001840 <sevseg_display+0x520>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 800179e:	4b29      	ldr	r3, [pc, #164]	; (8001844 <sevseg_display+0x524>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	4a28      	ldr	r2, [pc, #160]	; (8001844 <sevseg_display+0x524>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 80017aa:	4b27      	ldr	r3, [pc, #156]	; (8001848 <sevseg_display+0x528>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	4a26      	ldr	r2, [pc, #152]	; (8001848 <sevseg_display+0x528>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~(1<<1); //d
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <sevseg_display+0x528>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	4a23      	ldr	r2, [pc, #140]	; (8001848 <sevseg_display+0x528>)
 80017bc:	f023 0302 	bic.w	r3, r3, #2
 80017c0:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <sevseg_display+0x520>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <sevseg_display+0x520>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<10); //f
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <sevseg_display+0x520>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4a1b      	ldr	r2, [pc, #108]	; (8001840 <sevseg_display+0x520>)
 80017d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017d8:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<4); //g
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <sevseg_display+0x524>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4a19      	ldr	r2, [pc, #100]	; (8001844 <sevseg_display+0x524>)
 80017e0:	f023 0310 	bic.w	r3, r3, #16
 80017e4:	6153      	str	r3, [r2, #20]
		break;
 80017e6:	e05c      	b.n	80018a2 <sevseg_display+0x582>

		case 8:
			GPIOB->ODR |= (1<<3); //a
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <sevseg_display+0x520>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <sevseg_display+0x520>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <sevseg_display+0x524>)
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <sevseg_display+0x524>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <sevseg_display+0x528>)
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <sevseg_display+0x528>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <sevseg_display+0x528>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <sevseg_display+0x528>)
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //e
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <sevseg_display+0x520>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <sevseg_display+0x520>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <sevseg_display+0x520>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <sevseg_display+0x520>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <sevseg_display+0x524>)
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <sevseg_display+0x524>)
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	6153      	str	r3, [r2, #20]
		break;
 800183c:	e031      	b.n	80018a2 <sevseg_display+0x582>
 800183e:	bf00      	nop
 8001840:	40020400 	.word	0x40020400
 8001844:	40020000 	.word	0x40020000
 8001848:	40020800 	.word	0x40020800

		case 9:
			GPIOB->ODR |= (1<<3); //a
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <sevseg_display+0x5a4>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <sevseg_display+0x5a4>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<8); //b
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <sevseg_display+0x5a8>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <sevseg_display+0x5a8>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<0); //c
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <sevseg_display+0x5ac>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	4a18      	ldr	r2, [pc, #96]	; (80018cc <sevseg_display+0x5ac>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6153      	str	r3, [r2, #20]
			GPIOC->ODR |= (1<<1); //d
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <sevseg_display+0x5ac>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	4a15      	ldr	r2, [pc, #84]	; (80018cc <sevseg_display+0x5ac>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //e
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <sevseg_display+0x5a4>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <sevseg_display+0x5a4>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<10); //f
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <sevseg_display+0x5a4>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <sevseg_display+0x5a4>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<4); //g
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <sevseg_display+0x5a8>)
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <sevseg_display+0x5a8>)
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	6153      	str	r3, [r2, #20]
		break;
 80018a0:	bf00      	nop
		}
		for (int j=0; j<1000; j++){
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e002      	b.n	80018ae <sevseg_display+0x58e>
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	3301      	adds	r3, #1
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b4:	dbf8      	blt.n	80018a8 <sevseg_display+0x588>

	//GPIOA->ODR |= (1<<0); //1
	//GPIOB->ODR |= (1<<4); //2
	//GPIOB->ODR |= (1<<5); //3
	//GPIOC->ODR |= (1<<0); //4
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3724      	adds	r7, #36	; 0x24
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020800 	.word	0x40020800

080018d0 <alert>:

void alert(int alert){
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	// 0 for green, 1 for yellow, 2 for red
	switch (alert){
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d02f      	beq.n	800193e <alert+0x6e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	dc3f      	bgt.n	8001964 <alert+0x94>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <alert+0x22>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d013      	beq.n	8001918 <alert+0x48>
		GPIOC->ODR |= (1<<9);
		GPIOB->ODR &= ~(1<<8);
		GPIOB->ODR &= ~(1<<9);
		break;
	}
}
 80018f0:	e038      	b.n	8001964 <alert+0x94>
		GPIOC->ODR &= ~(1<<9);
 80018f2:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <alert+0xa0>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <alert+0xa0>)
 80018f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018fc:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<8);
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <alert+0xa4>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <alert+0xa4>)
 8001904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001908:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= (1<<9);
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <alert+0xa4>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4a19      	ldr	r2, [pc, #100]	; (8001974 <alert+0xa4>)
 8001910:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001914:	6153      	str	r3, [r2, #20]
		break;
 8001916:	e025      	b.n	8001964 <alert+0x94>
		GPIOC->ODR &= ~(1<<9);
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <alert+0xa0>)
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <alert+0xa0>)
 800191e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001922:	6153      	str	r3, [r2, #20]
		GPIOB->ODR |= (1<<8);
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <alert+0xa4>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <alert+0xa4>)
 800192a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192e:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <alert+0xa4>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <alert+0xa4>)
 8001936:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800193a:	6153      	str	r3, [r2, #20]
		break;
 800193c:	e012      	b.n	8001964 <alert+0x94>
		GPIOC->ODR |= (1<<9);
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <alert+0xa0>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <alert+0xa0>)
 8001944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001948:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<8);
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <alert+0xa4>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <alert+0xa4>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<9);
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <alert+0xa4>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	4a06      	ldr	r2, [pc, #24]	; (8001974 <alert+0xa4>)
 800195c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001960:	6153      	str	r3, [r2, #20]
		break;
 8001962:	bf00      	nop
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40020800 	.word	0x40020800
 8001974:	40020400 	.word	0x40020400

08001978 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	sevseg_display(sevseg_data);
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <TIM4_IRQHandler+0x20>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fccd 	bl	8001320 <sevseg_display>
	TIM4->SR &= ~(1<<0); // Clear UIF update interrupt flag
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <TIM4_IRQHandler+0x24>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <TIM4_IRQHandler+0x24>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	6113      	str	r3, [r2, #16]
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000004 	.word	0x20000004
 800199c:	40000800 	.word	0x40000800

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <MemManage_Handler+0x4>

080019b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler+0x4>

080019be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f000 f8e2 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	e00a      	b.n	8001a1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a06:	f3af 8000 	nop.w
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	b2ca      	uxtb	r2, r1
 8001a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf0      	blt.n	8001a06 <_read+0x12>
  }

  return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e009      	b.n	8001a54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf1      	blt.n	8001a40 <_write+0x12>
  }
  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_close>:

int _close(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_isatty>:

int _isatty(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f000 fabe 	bl	8002080 <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20020000 	.word	0x20020000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	20000208 	.word	0x20000208
 8001b38:	20000360 	.word	0x20000360

08001b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b66:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b7c:	4c0b      	ldr	r4, [pc, #44]	; (8001bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b8a:	f7ff ffd7 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f000 fa7d 	bl	800208c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b92:	f7fe ff9f 	bl	8000ad4 <main>
  bx  lr    
 8001b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ba4:	08002d2c 	.word	0x08002d2c
  ldr r2, =_sbss
 8001ba8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bac:	2000035c 	.word	0x2000035c

08001bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC_IRQHandler>
	...

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000010 	.word	0x20000010
 8001bd8:	2000020c 	.word	0x2000020c

08001bdc <std>:
 8001bdc:	2300      	movs	r3, #0
 8001bde:	b510      	push	{r4, lr}
 8001be0:	4604      	mov	r4, r0
 8001be2:	e9c0 3300 	strd	r3, r3, [r0]
 8001be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bea:	6083      	str	r3, [r0, #8]
 8001bec:	8181      	strh	r1, [r0, #12]
 8001bee:	6643      	str	r3, [r0, #100]	; 0x64
 8001bf0:	81c2      	strh	r2, [r0, #14]
 8001bf2:	6183      	str	r3, [r0, #24]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	305c      	adds	r0, #92	; 0x5c
 8001bfa:	f000 f9f3 	bl	8001fe4 <memset>
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <std+0x38>)
 8001c00:	6263      	str	r3, [r4, #36]	; 0x24
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <std+0x3c>)
 8001c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <std+0x40>)
 8001c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <std+0x44>)
 8001c0c:	6224      	str	r4, [r4, #32]
 8001c0e:	6323      	str	r3, [r4, #48]	; 0x30
 8001c10:	bd10      	pop	{r4, pc}
 8001c12:	bf00      	nop
 8001c14:	08001e35 	.word	0x08001e35
 8001c18:	08001e57 	.word	0x08001e57
 8001c1c:	08001e8f 	.word	0x08001e8f
 8001c20:	08001eb3 	.word	0x08001eb3

08001c24 <stdio_exit_handler>:
 8001c24:	4a02      	ldr	r2, [pc, #8]	; (8001c30 <stdio_exit_handler+0xc>)
 8001c26:	4903      	ldr	r1, [pc, #12]	; (8001c34 <stdio_exit_handler+0x10>)
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <stdio_exit_handler+0x14>)
 8001c2a:	f000 b869 	b.w	8001d00 <_fwalk_sglue>
 8001c2e:	bf00      	nop
 8001c30:	20000014 	.word	0x20000014
 8001c34:	080029a5 	.word	0x080029a5
 8001c38:	20000020 	.word	0x20000020

08001c3c <cleanup_stdio>:
 8001c3c:	6841      	ldr	r1, [r0, #4]
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <cleanup_stdio+0x34>)
 8001c40:	4299      	cmp	r1, r3
 8001c42:	b510      	push	{r4, lr}
 8001c44:	4604      	mov	r4, r0
 8001c46:	d001      	beq.n	8001c4c <cleanup_stdio+0x10>
 8001c48:	f000 feac 	bl	80029a4 <_fflush_r>
 8001c4c:	68a1      	ldr	r1, [r4, #8]
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <cleanup_stdio+0x38>)
 8001c50:	4299      	cmp	r1, r3
 8001c52:	d002      	beq.n	8001c5a <cleanup_stdio+0x1e>
 8001c54:	4620      	mov	r0, r4
 8001c56:	f000 fea5 	bl	80029a4 <_fflush_r>
 8001c5a:	68e1      	ldr	r1, [r4, #12]
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <cleanup_stdio+0x3c>)
 8001c5e:	4299      	cmp	r1, r3
 8001c60:	d004      	beq.n	8001c6c <cleanup_stdio+0x30>
 8001c62:	4620      	mov	r0, r4
 8001c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c68:	f000 be9c 	b.w	80029a4 <_fflush_r>
 8001c6c:	bd10      	pop	{r4, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000210 	.word	0x20000210
 8001c74:	20000278 	.word	0x20000278
 8001c78:	200002e0 	.word	0x200002e0

08001c7c <global_stdio_init.part.0>:
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <global_stdio_init.part.0+0x30>)
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <global_stdio_init.part.0+0x34>)
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <global_stdio_init.part.0+0x38>)
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4620      	mov	r0, r4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	f7ff ffa6 	bl	8001bdc <std>
 8001c90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001c94:	2201      	movs	r2, #1
 8001c96:	2109      	movs	r1, #9
 8001c98:	f7ff ffa0 	bl	8001bdc <std>
 8001c9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ca6:	2112      	movs	r1, #18
 8001ca8:	f7ff bf98 	b.w	8001bdc <std>
 8001cac:	20000348 	.word	0x20000348
 8001cb0:	20000210 	.word	0x20000210
 8001cb4:	08001c25 	.word	0x08001c25

08001cb8 <__sfp_lock_acquire>:
 8001cb8:	4801      	ldr	r0, [pc, #4]	; (8001cc0 <__sfp_lock_acquire+0x8>)
 8001cba:	f000 ba0b 	b.w	80020d4 <__retarget_lock_acquire_recursive>
 8001cbe:	bf00      	nop
 8001cc0:	20000351 	.word	0x20000351

08001cc4 <__sfp_lock_release>:
 8001cc4:	4801      	ldr	r0, [pc, #4]	; (8001ccc <__sfp_lock_release+0x8>)
 8001cc6:	f000 ba06 	b.w	80020d6 <__retarget_lock_release_recursive>
 8001cca:	bf00      	nop
 8001ccc:	20000351 	.word	0x20000351

08001cd0 <__sinit>:
 8001cd0:	b510      	push	{r4, lr}
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	f7ff fff0 	bl	8001cb8 <__sfp_lock_acquire>
 8001cd8:	6a23      	ldr	r3, [r4, #32]
 8001cda:	b11b      	cbz	r3, 8001ce4 <__sinit+0x14>
 8001cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ce0:	f7ff bff0 	b.w	8001cc4 <__sfp_lock_release>
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__sinit+0x28>)
 8001ce6:	6223      	str	r3, [r4, #32]
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__sinit+0x2c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f5      	bne.n	8001cdc <__sinit+0xc>
 8001cf0:	f7ff ffc4 	bl	8001c7c <global_stdio_init.part.0>
 8001cf4:	e7f2      	b.n	8001cdc <__sinit+0xc>
 8001cf6:	bf00      	nop
 8001cf8:	08001c3d 	.word	0x08001c3d
 8001cfc:	20000348 	.word	0x20000348

08001d00 <_fwalk_sglue>:
 8001d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d04:	4607      	mov	r7, r0
 8001d06:	4688      	mov	r8, r1
 8001d08:	4614      	mov	r4, r2
 8001d0a:	2600      	movs	r6, #0
 8001d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d10:	f1b9 0901 	subs.w	r9, r9, #1
 8001d14:	d505      	bpl.n	8001d22 <_fwalk_sglue+0x22>
 8001d16:	6824      	ldr	r4, [r4, #0]
 8001d18:	2c00      	cmp	r4, #0
 8001d1a:	d1f7      	bne.n	8001d0c <_fwalk_sglue+0xc>
 8001d1c:	4630      	mov	r0, r6
 8001d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d22:	89ab      	ldrh	r3, [r5, #12]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d907      	bls.n	8001d38 <_fwalk_sglue+0x38>
 8001d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	d003      	beq.n	8001d38 <_fwalk_sglue+0x38>
 8001d30:	4629      	mov	r1, r5
 8001d32:	4638      	mov	r0, r7
 8001d34:	47c0      	blx	r8
 8001d36:	4306      	orrs	r6, r0
 8001d38:	3568      	adds	r5, #104	; 0x68
 8001d3a:	e7e9      	b.n	8001d10 <_fwalk_sglue+0x10>

08001d3c <_puts_r>:
 8001d3c:	6a03      	ldr	r3, [r0, #32]
 8001d3e:	b570      	push	{r4, r5, r6, lr}
 8001d40:	6884      	ldr	r4, [r0, #8]
 8001d42:	4605      	mov	r5, r0
 8001d44:	460e      	mov	r6, r1
 8001d46:	b90b      	cbnz	r3, 8001d4c <_puts_r+0x10>
 8001d48:	f7ff ffc2 	bl	8001cd0 <__sinit>
 8001d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d4e:	07db      	lsls	r3, r3, #31
 8001d50:	d405      	bmi.n	8001d5e <_puts_r+0x22>
 8001d52:	89a3      	ldrh	r3, [r4, #12]
 8001d54:	0598      	lsls	r0, r3, #22
 8001d56:	d402      	bmi.n	8001d5e <_puts_r+0x22>
 8001d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d5a:	f000 f9bb 	bl	80020d4 <__retarget_lock_acquire_recursive>
 8001d5e:	89a3      	ldrh	r3, [r4, #12]
 8001d60:	0719      	lsls	r1, r3, #28
 8001d62:	d513      	bpl.n	8001d8c <_puts_r+0x50>
 8001d64:	6923      	ldr	r3, [r4, #16]
 8001d66:	b18b      	cbz	r3, 8001d8c <_puts_r+0x50>
 8001d68:	3e01      	subs	r6, #1
 8001d6a:	68a3      	ldr	r3, [r4, #8]
 8001d6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60a3      	str	r3, [r4, #8]
 8001d74:	b9e9      	cbnz	r1, 8001db2 <_puts_r+0x76>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da2e      	bge.n	8001dd8 <_puts_r+0x9c>
 8001d7a:	4622      	mov	r2, r4
 8001d7c:	210a      	movs	r1, #10
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f000 f89b 	bl	8001eba <__swbuf_r>
 8001d84:	3001      	adds	r0, #1
 8001d86:	d007      	beq.n	8001d98 <_puts_r+0x5c>
 8001d88:	250a      	movs	r5, #10
 8001d8a:	e007      	b.n	8001d9c <_puts_r+0x60>
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f000 f8d0 	bl	8001f34 <__swsetup_r>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d0e7      	beq.n	8001d68 <_puts_r+0x2c>
 8001d98:	f04f 35ff 	mov.w	r5, #4294967295
 8001d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d9e:	07da      	lsls	r2, r3, #31
 8001da0:	d405      	bmi.n	8001dae <_puts_r+0x72>
 8001da2:	89a3      	ldrh	r3, [r4, #12]
 8001da4:	059b      	lsls	r3, r3, #22
 8001da6:	d402      	bmi.n	8001dae <_puts_r+0x72>
 8001da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001daa:	f000 f994 	bl	80020d6 <__retarget_lock_release_recursive>
 8001dae:	4628      	mov	r0, r5
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da04      	bge.n	8001dc0 <_puts_r+0x84>
 8001db6:	69a2      	ldr	r2, [r4, #24]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dc06      	bgt.n	8001dca <_puts_r+0x8e>
 8001dbc:	290a      	cmp	r1, #10
 8001dbe:	d004      	beq.n	8001dca <_puts_r+0x8e>
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	6022      	str	r2, [r4, #0]
 8001dc6:	7019      	strb	r1, [r3, #0]
 8001dc8:	e7cf      	b.n	8001d6a <_puts_r+0x2e>
 8001dca:	4622      	mov	r2, r4
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f000 f874 	bl	8001eba <__swbuf_r>
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	d1c9      	bne.n	8001d6a <_puts_r+0x2e>
 8001dd6:	e7df      	b.n	8001d98 <_puts_r+0x5c>
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	250a      	movs	r5, #10
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	6022      	str	r2, [r4, #0]
 8001de0:	701d      	strb	r5, [r3, #0]
 8001de2:	e7db      	b.n	8001d9c <_puts_r+0x60>

08001de4 <puts>:
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <puts+0xc>)
 8001de6:	4601      	mov	r1, r0
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	f7ff bfa7 	b.w	8001d3c <_puts_r>
 8001dee:	bf00      	nop
 8001df0:	2000006c 	.word	0x2000006c

08001df4 <siprintf>:
 8001df4:	b40e      	push	{r1, r2, r3}
 8001df6:	b500      	push	{lr}
 8001df8:	b09c      	sub	sp, #112	; 0x70
 8001dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8001dfc:	9002      	str	r0, [sp, #8]
 8001dfe:	9006      	str	r0, [sp, #24]
 8001e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e04:	4809      	ldr	r0, [pc, #36]	; (8001e2c <siprintf+0x38>)
 8001e06:	9107      	str	r1, [sp, #28]
 8001e08:	9104      	str	r1, [sp, #16]
 8001e0a:	4909      	ldr	r1, [pc, #36]	; (8001e30 <siprintf+0x3c>)
 8001e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e10:	9105      	str	r1, [sp, #20]
 8001e12:	6800      	ldr	r0, [r0, #0]
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	a902      	add	r1, sp, #8
 8001e18:	f000 fab0 	bl	800237c <_svfiprintf_r>
 8001e1c:	9b02      	ldr	r3, [sp, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	b01c      	add	sp, #112	; 0x70
 8001e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e28:	b003      	add	sp, #12
 8001e2a:	4770      	bx	lr
 8001e2c:	2000006c 	.word	0x2000006c
 8001e30:	ffff0208 	.word	0xffff0208

08001e34 <__sread>:
 8001e34:	b510      	push	{r4, lr}
 8001e36:	460c      	mov	r4, r1
 8001e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e3c:	f000 f8fc 	bl	8002038 <_read_r>
 8001e40:	2800      	cmp	r0, #0
 8001e42:	bfab      	itete	ge
 8001e44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e46:	89a3      	ldrhlt	r3, [r4, #12]
 8001e48:	181b      	addge	r3, r3, r0
 8001e4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e4e:	bfac      	ite	ge
 8001e50:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e52:	81a3      	strhlt	r3, [r4, #12]
 8001e54:	bd10      	pop	{r4, pc}

08001e56 <__swrite>:
 8001e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e5a:	461f      	mov	r7, r3
 8001e5c:	898b      	ldrh	r3, [r1, #12]
 8001e5e:	05db      	lsls	r3, r3, #23
 8001e60:	4605      	mov	r5, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	4616      	mov	r6, r2
 8001e66:	d505      	bpl.n	8001e74 <__swrite+0x1e>
 8001e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f000 f8d0 	bl	8002014 <_lseek_r>
 8001e74:	89a3      	ldrh	r3, [r4, #12]
 8001e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e7e:	81a3      	strh	r3, [r4, #12]
 8001e80:	4632      	mov	r2, r6
 8001e82:	463b      	mov	r3, r7
 8001e84:	4628      	mov	r0, r5
 8001e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8a:	f000 b8e7 	b.w	800205c <_write_r>

08001e8e <__sseek>:
 8001e8e:	b510      	push	{r4, lr}
 8001e90:	460c      	mov	r4, r1
 8001e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e96:	f000 f8bd 	bl	8002014 <_lseek_r>
 8001e9a:	1c43      	adds	r3, r0, #1
 8001e9c:	89a3      	ldrh	r3, [r4, #12]
 8001e9e:	bf15      	itete	ne
 8001ea0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001eaa:	81a3      	strheq	r3, [r4, #12]
 8001eac:	bf18      	it	ne
 8001eae:	81a3      	strhne	r3, [r4, #12]
 8001eb0:	bd10      	pop	{r4, pc}

08001eb2 <__sclose>:
 8001eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eb6:	f000 b89d 	b.w	8001ff4 <_close_r>

08001eba <__swbuf_r>:
 8001eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebc:	460e      	mov	r6, r1
 8001ebe:	4614      	mov	r4, r2
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	b118      	cbz	r0, 8001ecc <__swbuf_r+0x12>
 8001ec4:	6a03      	ldr	r3, [r0, #32]
 8001ec6:	b90b      	cbnz	r3, 8001ecc <__swbuf_r+0x12>
 8001ec8:	f7ff ff02 	bl	8001cd0 <__sinit>
 8001ecc:	69a3      	ldr	r3, [r4, #24]
 8001ece:	60a3      	str	r3, [r4, #8]
 8001ed0:	89a3      	ldrh	r3, [r4, #12]
 8001ed2:	071a      	lsls	r2, r3, #28
 8001ed4:	d525      	bpl.n	8001f22 <__swbuf_r+0x68>
 8001ed6:	6923      	ldr	r3, [r4, #16]
 8001ed8:	b31b      	cbz	r3, 8001f22 <__swbuf_r+0x68>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	6922      	ldr	r2, [r4, #16]
 8001ede:	1a98      	subs	r0, r3, r2
 8001ee0:	6963      	ldr	r3, [r4, #20]
 8001ee2:	b2f6      	uxtb	r6, r6
 8001ee4:	4283      	cmp	r3, r0
 8001ee6:	4637      	mov	r7, r6
 8001ee8:	dc04      	bgt.n	8001ef4 <__swbuf_r+0x3a>
 8001eea:	4621      	mov	r1, r4
 8001eec:	4628      	mov	r0, r5
 8001eee:	f000 fd59 	bl	80029a4 <_fflush_r>
 8001ef2:	b9e0      	cbnz	r0, 8001f2e <__swbuf_r+0x74>
 8001ef4:	68a3      	ldr	r3, [r4, #8]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60a3      	str	r3, [r4, #8]
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	6022      	str	r2, [r4, #0]
 8001f00:	701e      	strb	r6, [r3, #0]
 8001f02:	6962      	ldr	r2, [r4, #20]
 8001f04:	1c43      	adds	r3, r0, #1
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d004      	beq.n	8001f14 <__swbuf_r+0x5a>
 8001f0a:	89a3      	ldrh	r3, [r4, #12]
 8001f0c:	07db      	lsls	r3, r3, #31
 8001f0e:	d506      	bpl.n	8001f1e <__swbuf_r+0x64>
 8001f10:	2e0a      	cmp	r6, #10
 8001f12:	d104      	bne.n	8001f1e <__swbuf_r+0x64>
 8001f14:	4621      	mov	r1, r4
 8001f16:	4628      	mov	r0, r5
 8001f18:	f000 fd44 	bl	80029a4 <_fflush_r>
 8001f1c:	b938      	cbnz	r0, 8001f2e <__swbuf_r+0x74>
 8001f1e:	4638      	mov	r0, r7
 8001f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f22:	4621      	mov	r1, r4
 8001f24:	4628      	mov	r0, r5
 8001f26:	f000 f805 	bl	8001f34 <__swsetup_r>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d0d5      	beq.n	8001eda <__swbuf_r+0x20>
 8001f2e:	f04f 37ff 	mov.w	r7, #4294967295
 8001f32:	e7f4      	b.n	8001f1e <__swbuf_r+0x64>

08001f34 <__swsetup_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <__swsetup_r+0xac>)
 8001f38:	4605      	mov	r5, r0
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	b118      	cbz	r0, 8001f48 <__swsetup_r+0x14>
 8001f40:	6a03      	ldr	r3, [r0, #32]
 8001f42:	b90b      	cbnz	r3, 8001f48 <__swsetup_r+0x14>
 8001f44:	f7ff fec4 	bl	8001cd0 <__sinit>
 8001f48:	89a3      	ldrh	r3, [r4, #12]
 8001f4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f4e:	0718      	lsls	r0, r3, #28
 8001f50:	d422      	bmi.n	8001f98 <__swsetup_r+0x64>
 8001f52:	06d9      	lsls	r1, r3, #27
 8001f54:	d407      	bmi.n	8001f66 <__swsetup_r+0x32>
 8001f56:	2309      	movs	r3, #9
 8001f58:	602b      	str	r3, [r5, #0]
 8001f5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001f5e:	81a3      	strh	r3, [r4, #12]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	e034      	b.n	8001fd0 <__swsetup_r+0x9c>
 8001f66:	0758      	lsls	r0, r3, #29
 8001f68:	d512      	bpl.n	8001f90 <__swsetup_r+0x5c>
 8001f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f6c:	b141      	cbz	r1, 8001f80 <__swsetup_r+0x4c>
 8001f6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f72:	4299      	cmp	r1, r3
 8001f74:	d002      	beq.n	8001f7c <__swsetup_r+0x48>
 8001f76:	4628      	mov	r0, r5
 8001f78:	f000 f8ae 	bl	80020d8 <_free_r>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6363      	str	r3, [r4, #52]	; 0x34
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f86:	81a3      	strh	r3, [r4, #12]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6063      	str	r3, [r4, #4]
 8001f8c:	6923      	ldr	r3, [r4, #16]
 8001f8e:	6023      	str	r3, [r4, #0]
 8001f90:	89a3      	ldrh	r3, [r4, #12]
 8001f92:	f043 0308 	orr.w	r3, r3, #8
 8001f96:	81a3      	strh	r3, [r4, #12]
 8001f98:	6923      	ldr	r3, [r4, #16]
 8001f9a:	b94b      	cbnz	r3, 8001fb0 <__swsetup_r+0x7c>
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa6:	d003      	beq.n	8001fb0 <__swsetup_r+0x7c>
 8001fa8:	4621      	mov	r1, r4
 8001faa:	4628      	mov	r0, r5
 8001fac:	f000 fd48 	bl	8002a40 <__smakebuf_r>
 8001fb0:	89a0      	ldrh	r0, [r4, #12]
 8001fb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fb6:	f010 0301 	ands.w	r3, r0, #1
 8001fba:	d00a      	beq.n	8001fd2 <__swsetup_r+0x9e>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60a3      	str	r3, [r4, #8]
 8001fc0:	6963      	ldr	r3, [r4, #20]
 8001fc2:	425b      	negs	r3, r3
 8001fc4:	61a3      	str	r3, [r4, #24]
 8001fc6:	6923      	ldr	r3, [r4, #16]
 8001fc8:	b943      	cbnz	r3, 8001fdc <__swsetup_r+0xa8>
 8001fca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001fce:	d1c4      	bne.n	8001f5a <__swsetup_r+0x26>
 8001fd0:	bd38      	pop	{r3, r4, r5, pc}
 8001fd2:	0781      	lsls	r1, r0, #30
 8001fd4:	bf58      	it	pl
 8001fd6:	6963      	ldrpl	r3, [r4, #20]
 8001fd8:	60a3      	str	r3, [r4, #8]
 8001fda:	e7f4      	b.n	8001fc6 <__swsetup_r+0x92>
 8001fdc:	2000      	movs	r0, #0
 8001fde:	e7f7      	b.n	8001fd0 <__swsetup_r+0x9c>
 8001fe0:	2000006c 	.word	0x2000006c

08001fe4 <memset>:
 8001fe4:	4402      	add	r2, r0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d100      	bne.n	8001fee <memset+0xa>
 8001fec:	4770      	bx	lr
 8001fee:	f803 1b01 	strb.w	r1, [r3], #1
 8001ff2:	e7f9      	b.n	8001fe8 <memset+0x4>

08001ff4 <_close_r>:
 8001ff4:	b538      	push	{r3, r4, r5, lr}
 8001ff6:	4d06      	ldr	r5, [pc, #24]	; (8002010 <_close_r+0x1c>)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	602b      	str	r3, [r5, #0]
 8002000:	f7ff fd31 	bl	8001a66 <_close>
 8002004:	1c43      	adds	r3, r0, #1
 8002006:	d102      	bne.n	800200e <_close_r+0x1a>
 8002008:	682b      	ldr	r3, [r5, #0]
 800200a:	b103      	cbz	r3, 800200e <_close_r+0x1a>
 800200c:	6023      	str	r3, [r4, #0]
 800200e:	bd38      	pop	{r3, r4, r5, pc}
 8002010:	2000034c 	.word	0x2000034c

08002014 <_lseek_r>:
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	4d07      	ldr	r5, [pc, #28]	; (8002034 <_lseek_r+0x20>)
 8002018:	4604      	mov	r4, r0
 800201a:	4608      	mov	r0, r1
 800201c:	4611      	mov	r1, r2
 800201e:	2200      	movs	r2, #0
 8002020:	602a      	str	r2, [r5, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	f7ff fd46 	bl	8001ab4 <_lseek>
 8002028:	1c43      	adds	r3, r0, #1
 800202a:	d102      	bne.n	8002032 <_lseek_r+0x1e>
 800202c:	682b      	ldr	r3, [r5, #0]
 800202e:	b103      	cbz	r3, 8002032 <_lseek_r+0x1e>
 8002030:	6023      	str	r3, [r4, #0]
 8002032:	bd38      	pop	{r3, r4, r5, pc}
 8002034:	2000034c 	.word	0x2000034c

08002038 <_read_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4d07      	ldr	r5, [pc, #28]	; (8002058 <_read_r+0x20>)
 800203c:	4604      	mov	r4, r0
 800203e:	4608      	mov	r0, r1
 8002040:	4611      	mov	r1, r2
 8002042:	2200      	movs	r2, #0
 8002044:	602a      	str	r2, [r5, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	f7ff fcd4 	bl	80019f4 <_read>
 800204c:	1c43      	adds	r3, r0, #1
 800204e:	d102      	bne.n	8002056 <_read_r+0x1e>
 8002050:	682b      	ldr	r3, [r5, #0]
 8002052:	b103      	cbz	r3, 8002056 <_read_r+0x1e>
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	bd38      	pop	{r3, r4, r5, pc}
 8002058:	2000034c 	.word	0x2000034c

0800205c <_write_r>:
 800205c:	b538      	push	{r3, r4, r5, lr}
 800205e:	4d07      	ldr	r5, [pc, #28]	; (800207c <_write_r+0x20>)
 8002060:	4604      	mov	r4, r0
 8002062:	4608      	mov	r0, r1
 8002064:	4611      	mov	r1, r2
 8002066:	2200      	movs	r2, #0
 8002068:	602a      	str	r2, [r5, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	f7ff fcdf 	bl	8001a2e <_write>
 8002070:	1c43      	adds	r3, r0, #1
 8002072:	d102      	bne.n	800207a <_write_r+0x1e>
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	b103      	cbz	r3, 800207a <_write_r+0x1e>
 8002078:	6023      	str	r3, [r4, #0]
 800207a:	bd38      	pop	{r3, r4, r5, pc}
 800207c:	2000034c 	.word	0x2000034c

08002080 <__errno>:
 8002080:	4b01      	ldr	r3, [pc, #4]	; (8002088 <__errno+0x8>)
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	2000006c 	.word	0x2000006c

0800208c <__libc_init_array>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	4d0d      	ldr	r5, [pc, #52]	; (80020c4 <__libc_init_array+0x38>)
 8002090:	4c0d      	ldr	r4, [pc, #52]	; (80020c8 <__libc_init_array+0x3c>)
 8002092:	1b64      	subs	r4, r4, r5
 8002094:	10a4      	asrs	r4, r4, #2
 8002096:	2600      	movs	r6, #0
 8002098:	42a6      	cmp	r6, r4
 800209a:	d109      	bne.n	80020b0 <__libc_init_array+0x24>
 800209c:	4d0b      	ldr	r5, [pc, #44]	; (80020cc <__libc_init_array+0x40>)
 800209e:	4c0c      	ldr	r4, [pc, #48]	; (80020d0 <__libc_init_array+0x44>)
 80020a0:	f000 fd9c 	bl	8002bdc <_init>
 80020a4:	1b64      	subs	r4, r4, r5
 80020a6:	10a4      	asrs	r4, r4, #2
 80020a8:	2600      	movs	r6, #0
 80020aa:	42a6      	cmp	r6, r4
 80020ac:	d105      	bne.n	80020ba <__libc_init_array+0x2e>
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b4:	4798      	blx	r3
 80020b6:	3601      	adds	r6, #1
 80020b8:	e7ee      	b.n	8002098 <__libc_init_array+0xc>
 80020ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80020be:	4798      	blx	r3
 80020c0:	3601      	adds	r6, #1
 80020c2:	e7f2      	b.n	80020aa <__libc_init_array+0x1e>
 80020c4:	08002d24 	.word	0x08002d24
 80020c8:	08002d24 	.word	0x08002d24
 80020cc:	08002d24 	.word	0x08002d24
 80020d0:	08002d28 	.word	0x08002d28

080020d4 <__retarget_lock_acquire_recursive>:
 80020d4:	4770      	bx	lr

080020d6 <__retarget_lock_release_recursive>:
 80020d6:	4770      	bx	lr

080020d8 <_free_r>:
 80020d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020da:	2900      	cmp	r1, #0
 80020dc:	d044      	beq.n	8002168 <_free_r+0x90>
 80020de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020e2:	9001      	str	r0, [sp, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f1a1 0404 	sub.w	r4, r1, #4
 80020ea:	bfb8      	it	lt
 80020ec:	18e4      	addlt	r4, r4, r3
 80020ee:	f000 f8df 	bl	80022b0 <__malloc_lock>
 80020f2:	4a1e      	ldr	r2, [pc, #120]	; (800216c <_free_r+0x94>)
 80020f4:	9801      	ldr	r0, [sp, #4]
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	b933      	cbnz	r3, 8002108 <_free_r+0x30>
 80020fa:	6063      	str	r3, [r4, #4]
 80020fc:	6014      	str	r4, [r2, #0]
 80020fe:	b003      	add	sp, #12
 8002100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002104:	f000 b8da 	b.w	80022bc <__malloc_unlock>
 8002108:	42a3      	cmp	r3, r4
 800210a:	d908      	bls.n	800211e <_free_r+0x46>
 800210c:	6825      	ldr	r5, [r4, #0]
 800210e:	1961      	adds	r1, r4, r5
 8002110:	428b      	cmp	r3, r1
 8002112:	bf01      	itttt	eq
 8002114:	6819      	ldreq	r1, [r3, #0]
 8002116:	685b      	ldreq	r3, [r3, #4]
 8002118:	1949      	addeq	r1, r1, r5
 800211a:	6021      	streq	r1, [r4, #0]
 800211c:	e7ed      	b.n	80020fa <_free_r+0x22>
 800211e:	461a      	mov	r2, r3
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	b10b      	cbz	r3, 8002128 <_free_r+0x50>
 8002124:	42a3      	cmp	r3, r4
 8002126:	d9fa      	bls.n	800211e <_free_r+0x46>
 8002128:	6811      	ldr	r1, [r2, #0]
 800212a:	1855      	adds	r5, r2, r1
 800212c:	42a5      	cmp	r5, r4
 800212e:	d10b      	bne.n	8002148 <_free_r+0x70>
 8002130:	6824      	ldr	r4, [r4, #0]
 8002132:	4421      	add	r1, r4
 8002134:	1854      	adds	r4, r2, r1
 8002136:	42a3      	cmp	r3, r4
 8002138:	6011      	str	r1, [r2, #0]
 800213a:	d1e0      	bne.n	80020fe <_free_r+0x26>
 800213c:	681c      	ldr	r4, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	6053      	str	r3, [r2, #4]
 8002142:	440c      	add	r4, r1
 8002144:	6014      	str	r4, [r2, #0]
 8002146:	e7da      	b.n	80020fe <_free_r+0x26>
 8002148:	d902      	bls.n	8002150 <_free_r+0x78>
 800214a:	230c      	movs	r3, #12
 800214c:	6003      	str	r3, [r0, #0]
 800214e:	e7d6      	b.n	80020fe <_free_r+0x26>
 8002150:	6825      	ldr	r5, [r4, #0]
 8002152:	1961      	adds	r1, r4, r5
 8002154:	428b      	cmp	r3, r1
 8002156:	bf04      	itt	eq
 8002158:	6819      	ldreq	r1, [r3, #0]
 800215a:	685b      	ldreq	r3, [r3, #4]
 800215c:	6063      	str	r3, [r4, #4]
 800215e:	bf04      	itt	eq
 8002160:	1949      	addeq	r1, r1, r5
 8002162:	6021      	streq	r1, [r4, #0]
 8002164:	6054      	str	r4, [r2, #4]
 8002166:	e7ca      	b.n	80020fe <_free_r+0x26>
 8002168:	b003      	add	sp, #12
 800216a:	bd30      	pop	{r4, r5, pc}
 800216c:	20000354 	.word	0x20000354

08002170 <sbrk_aligned>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4e0e      	ldr	r6, [pc, #56]	; (80021ac <sbrk_aligned+0x3c>)
 8002174:	460c      	mov	r4, r1
 8002176:	6831      	ldr	r1, [r6, #0]
 8002178:	4605      	mov	r5, r0
 800217a:	b911      	cbnz	r1, 8002182 <sbrk_aligned+0x12>
 800217c:	f000 fcd8 	bl	8002b30 <_sbrk_r>
 8002180:	6030      	str	r0, [r6, #0]
 8002182:	4621      	mov	r1, r4
 8002184:	4628      	mov	r0, r5
 8002186:	f000 fcd3 	bl	8002b30 <_sbrk_r>
 800218a:	1c43      	adds	r3, r0, #1
 800218c:	d00a      	beq.n	80021a4 <sbrk_aligned+0x34>
 800218e:	1cc4      	adds	r4, r0, #3
 8002190:	f024 0403 	bic.w	r4, r4, #3
 8002194:	42a0      	cmp	r0, r4
 8002196:	d007      	beq.n	80021a8 <sbrk_aligned+0x38>
 8002198:	1a21      	subs	r1, r4, r0
 800219a:	4628      	mov	r0, r5
 800219c:	f000 fcc8 	bl	8002b30 <_sbrk_r>
 80021a0:	3001      	adds	r0, #1
 80021a2:	d101      	bne.n	80021a8 <sbrk_aligned+0x38>
 80021a4:	f04f 34ff 	mov.w	r4, #4294967295
 80021a8:	4620      	mov	r0, r4
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	20000358 	.word	0x20000358

080021b0 <_malloc_r>:
 80021b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021b4:	1ccd      	adds	r5, r1, #3
 80021b6:	f025 0503 	bic.w	r5, r5, #3
 80021ba:	3508      	adds	r5, #8
 80021bc:	2d0c      	cmp	r5, #12
 80021be:	bf38      	it	cc
 80021c0:	250c      	movcc	r5, #12
 80021c2:	2d00      	cmp	r5, #0
 80021c4:	4607      	mov	r7, r0
 80021c6:	db01      	blt.n	80021cc <_malloc_r+0x1c>
 80021c8:	42a9      	cmp	r1, r5
 80021ca:	d905      	bls.n	80021d8 <_malloc_r+0x28>
 80021cc:	230c      	movs	r3, #12
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	2600      	movs	r6, #0
 80021d2:	4630      	mov	r0, r6
 80021d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022ac <_malloc_r+0xfc>
 80021dc:	f000 f868 	bl	80022b0 <__malloc_lock>
 80021e0:	f8d8 3000 	ldr.w	r3, [r8]
 80021e4:	461c      	mov	r4, r3
 80021e6:	bb5c      	cbnz	r4, 8002240 <_malloc_r+0x90>
 80021e8:	4629      	mov	r1, r5
 80021ea:	4638      	mov	r0, r7
 80021ec:	f7ff ffc0 	bl	8002170 <sbrk_aligned>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	4604      	mov	r4, r0
 80021f4:	d155      	bne.n	80022a2 <_malloc_r+0xf2>
 80021f6:	f8d8 4000 	ldr.w	r4, [r8]
 80021fa:	4626      	mov	r6, r4
 80021fc:	2e00      	cmp	r6, #0
 80021fe:	d145      	bne.n	800228c <_malloc_r+0xdc>
 8002200:	2c00      	cmp	r4, #0
 8002202:	d048      	beq.n	8002296 <_malloc_r+0xe6>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	4631      	mov	r1, r6
 8002208:	4638      	mov	r0, r7
 800220a:	eb04 0903 	add.w	r9, r4, r3
 800220e:	f000 fc8f 	bl	8002b30 <_sbrk_r>
 8002212:	4581      	cmp	r9, r0
 8002214:	d13f      	bne.n	8002296 <_malloc_r+0xe6>
 8002216:	6821      	ldr	r1, [r4, #0]
 8002218:	1a6d      	subs	r5, r5, r1
 800221a:	4629      	mov	r1, r5
 800221c:	4638      	mov	r0, r7
 800221e:	f7ff ffa7 	bl	8002170 <sbrk_aligned>
 8002222:	3001      	adds	r0, #1
 8002224:	d037      	beq.n	8002296 <_malloc_r+0xe6>
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	442b      	add	r3, r5
 800222a:	6023      	str	r3, [r4, #0]
 800222c:	f8d8 3000 	ldr.w	r3, [r8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d038      	beq.n	80022a6 <_malloc_r+0xf6>
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	42a2      	cmp	r2, r4
 8002238:	d12b      	bne.n	8002292 <_malloc_r+0xe2>
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	e00f      	b.n	8002260 <_malloc_r+0xb0>
 8002240:	6822      	ldr	r2, [r4, #0]
 8002242:	1b52      	subs	r2, r2, r5
 8002244:	d41f      	bmi.n	8002286 <_malloc_r+0xd6>
 8002246:	2a0b      	cmp	r2, #11
 8002248:	d917      	bls.n	800227a <_malloc_r+0xca>
 800224a:	1961      	adds	r1, r4, r5
 800224c:	42a3      	cmp	r3, r4
 800224e:	6025      	str	r5, [r4, #0]
 8002250:	bf18      	it	ne
 8002252:	6059      	strne	r1, [r3, #4]
 8002254:	6863      	ldr	r3, [r4, #4]
 8002256:	bf08      	it	eq
 8002258:	f8c8 1000 	streq.w	r1, [r8]
 800225c:	5162      	str	r2, [r4, r5]
 800225e:	604b      	str	r3, [r1, #4]
 8002260:	4638      	mov	r0, r7
 8002262:	f104 060b 	add.w	r6, r4, #11
 8002266:	f000 f829 	bl	80022bc <__malloc_unlock>
 800226a:	f026 0607 	bic.w	r6, r6, #7
 800226e:	1d23      	adds	r3, r4, #4
 8002270:	1af2      	subs	r2, r6, r3
 8002272:	d0ae      	beq.n	80021d2 <_malloc_r+0x22>
 8002274:	1b9b      	subs	r3, r3, r6
 8002276:	50a3      	str	r3, [r4, r2]
 8002278:	e7ab      	b.n	80021d2 <_malloc_r+0x22>
 800227a:	42a3      	cmp	r3, r4
 800227c:	6862      	ldr	r2, [r4, #4]
 800227e:	d1dd      	bne.n	800223c <_malloc_r+0x8c>
 8002280:	f8c8 2000 	str.w	r2, [r8]
 8002284:	e7ec      	b.n	8002260 <_malloc_r+0xb0>
 8002286:	4623      	mov	r3, r4
 8002288:	6864      	ldr	r4, [r4, #4]
 800228a:	e7ac      	b.n	80021e6 <_malloc_r+0x36>
 800228c:	4634      	mov	r4, r6
 800228e:	6876      	ldr	r6, [r6, #4]
 8002290:	e7b4      	b.n	80021fc <_malloc_r+0x4c>
 8002292:	4613      	mov	r3, r2
 8002294:	e7cc      	b.n	8002230 <_malloc_r+0x80>
 8002296:	230c      	movs	r3, #12
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4638      	mov	r0, r7
 800229c:	f000 f80e 	bl	80022bc <__malloc_unlock>
 80022a0:	e797      	b.n	80021d2 <_malloc_r+0x22>
 80022a2:	6025      	str	r5, [r4, #0]
 80022a4:	e7dc      	b.n	8002260 <_malloc_r+0xb0>
 80022a6:	605b      	str	r3, [r3, #4]
 80022a8:	deff      	udf	#255	; 0xff
 80022aa:	bf00      	nop
 80022ac:	20000354 	.word	0x20000354

080022b0 <__malloc_lock>:
 80022b0:	4801      	ldr	r0, [pc, #4]	; (80022b8 <__malloc_lock+0x8>)
 80022b2:	f7ff bf0f 	b.w	80020d4 <__retarget_lock_acquire_recursive>
 80022b6:	bf00      	nop
 80022b8:	20000350 	.word	0x20000350

080022bc <__malloc_unlock>:
 80022bc:	4801      	ldr	r0, [pc, #4]	; (80022c4 <__malloc_unlock+0x8>)
 80022be:	f7ff bf0a 	b.w	80020d6 <__retarget_lock_release_recursive>
 80022c2:	bf00      	nop
 80022c4:	20000350 	.word	0x20000350

080022c8 <__ssputs_r>:
 80022c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022cc:	688e      	ldr	r6, [r1, #8]
 80022ce:	461f      	mov	r7, r3
 80022d0:	42be      	cmp	r6, r7
 80022d2:	680b      	ldr	r3, [r1, #0]
 80022d4:	4682      	mov	sl, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	4690      	mov	r8, r2
 80022da:	d82c      	bhi.n	8002336 <__ssputs_r+0x6e>
 80022dc:	898a      	ldrh	r2, [r1, #12]
 80022de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022e2:	d026      	beq.n	8002332 <__ssputs_r+0x6a>
 80022e4:	6965      	ldr	r5, [r4, #20]
 80022e6:	6909      	ldr	r1, [r1, #16]
 80022e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022ec:	eba3 0901 	sub.w	r9, r3, r1
 80022f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022f4:	1c7b      	adds	r3, r7, #1
 80022f6:	444b      	add	r3, r9
 80022f8:	106d      	asrs	r5, r5, #1
 80022fa:	429d      	cmp	r5, r3
 80022fc:	bf38      	it	cc
 80022fe:	461d      	movcc	r5, r3
 8002300:	0553      	lsls	r3, r2, #21
 8002302:	d527      	bpl.n	8002354 <__ssputs_r+0x8c>
 8002304:	4629      	mov	r1, r5
 8002306:	f7ff ff53 	bl	80021b0 <_malloc_r>
 800230a:	4606      	mov	r6, r0
 800230c:	b360      	cbz	r0, 8002368 <__ssputs_r+0xa0>
 800230e:	6921      	ldr	r1, [r4, #16]
 8002310:	464a      	mov	r2, r9
 8002312:	f000 fc1d 	bl	8002b50 <memcpy>
 8002316:	89a3      	ldrh	r3, [r4, #12]
 8002318:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800231c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002320:	81a3      	strh	r3, [r4, #12]
 8002322:	6126      	str	r6, [r4, #16]
 8002324:	6165      	str	r5, [r4, #20]
 8002326:	444e      	add	r6, r9
 8002328:	eba5 0509 	sub.w	r5, r5, r9
 800232c:	6026      	str	r6, [r4, #0]
 800232e:	60a5      	str	r5, [r4, #8]
 8002330:	463e      	mov	r6, r7
 8002332:	42be      	cmp	r6, r7
 8002334:	d900      	bls.n	8002338 <__ssputs_r+0x70>
 8002336:	463e      	mov	r6, r7
 8002338:	6820      	ldr	r0, [r4, #0]
 800233a:	4632      	mov	r2, r6
 800233c:	4641      	mov	r1, r8
 800233e:	f000 fbbb 	bl	8002ab8 <memmove>
 8002342:	68a3      	ldr	r3, [r4, #8]
 8002344:	1b9b      	subs	r3, r3, r6
 8002346:	60a3      	str	r3, [r4, #8]
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	4433      	add	r3, r6
 800234c:	6023      	str	r3, [r4, #0]
 800234e:	2000      	movs	r0, #0
 8002350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002354:	462a      	mov	r2, r5
 8002356:	f000 fc09 	bl	8002b6c <_realloc_r>
 800235a:	4606      	mov	r6, r0
 800235c:	2800      	cmp	r0, #0
 800235e:	d1e0      	bne.n	8002322 <__ssputs_r+0x5a>
 8002360:	6921      	ldr	r1, [r4, #16]
 8002362:	4650      	mov	r0, sl
 8002364:	f7ff feb8 	bl	80020d8 <_free_r>
 8002368:	230c      	movs	r3, #12
 800236a:	f8ca 3000 	str.w	r3, [sl]
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002374:	81a3      	strh	r3, [r4, #12]
 8002376:	f04f 30ff 	mov.w	r0, #4294967295
 800237a:	e7e9      	b.n	8002350 <__ssputs_r+0x88>

0800237c <_svfiprintf_r>:
 800237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002380:	4698      	mov	r8, r3
 8002382:	898b      	ldrh	r3, [r1, #12]
 8002384:	061b      	lsls	r3, r3, #24
 8002386:	b09d      	sub	sp, #116	; 0x74
 8002388:	4607      	mov	r7, r0
 800238a:	460d      	mov	r5, r1
 800238c:	4614      	mov	r4, r2
 800238e:	d50e      	bpl.n	80023ae <_svfiprintf_r+0x32>
 8002390:	690b      	ldr	r3, [r1, #16]
 8002392:	b963      	cbnz	r3, 80023ae <_svfiprintf_r+0x32>
 8002394:	2140      	movs	r1, #64	; 0x40
 8002396:	f7ff ff0b 	bl	80021b0 <_malloc_r>
 800239a:	6028      	str	r0, [r5, #0]
 800239c:	6128      	str	r0, [r5, #16]
 800239e:	b920      	cbnz	r0, 80023aa <_svfiprintf_r+0x2e>
 80023a0:	230c      	movs	r3, #12
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	e0d0      	b.n	800254c <_svfiprintf_r+0x1d0>
 80023aa:	2340      	movs	r3, #64	; 0x40
 80023ac:	616b      	str	r3, [r5, #20]
 80023ae:	2300      	movs	r3, #0
 80023b0:	9309      	str	r3, [sp, #36]	; 0x24
 80023b2:	2320      	movs	r3, #32
 80023b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80023bc:	2330      	movs	r3, #48	; 0x30
 80023be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002564 <_svfiprintf_r+0x1e8>
 80023c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023c6:	f04f 0901 	mov.w	r9, #1
 80023ca:	4623      	mov	r3, r4
 80023cc:	469a      	mov	sl, r3
 80023ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023d2:	b10a      	cbz	r2, 80023d8 <_svfiprintf_r+0x5c>
 80023d4:	2a25      	cmp	r2, #37	; 0x25
 80023d6:	d1f9      	bne.n	80023cc <_svfiprintf_r+0x50>
 80023d8:	ebba 0b04 	subs.w	fp, sl, r4
 80023dc:	d00b      	beq.n	80023f6 <_svfiprintf_r+0x7a>
 80023de:	465b      	mov	r3, fp
 80023e0:	4622      	mov	r2, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	4638      	mov	r0, r7
 80023e6:	f7ff ff6f 	bl	80022c8 <__ssputs_r>
 80023ea:	3001      	adds	r0, #1
 80023ec:	f000 80a9 	beq.w	8002542 <_svfiprintf_r+0x1c6>
 80023f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023f2:	445a      	add	r2, fp
 80023f4:	9209      	str	r2, [sp, #36]	; 0x24
 80023f6:	f89a 3000 	ldrb.w	r3, [sl]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80a1 	beq.w	8002542 <_svfiprintf_r+0x1c6>
 8002400:	2300      	movs	r3, #0
 8002402:	f04f 32ff 	mov.w	r2, #4294967295
 8002406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800240a:	f10a 0a01 	add.w	sl, sl, #1
 800240e:	9304      	str	r3, [sp, #16]
 8002410:	9307      	str	r3, [sp, #28]
 8002412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002416:	931a      	str	r3, [sp, #104]	; 0x68
 8002418:	4654      	mov	r4, sl
 800241a:	2205      	movs	r2, #5
 800241c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002420:	4850      	ldr	r0, [pc, #320]	; (8002564 <_svfiprintf_r+0x1e8>)
 8002422:	f7fd fee5 	bl	80001f0 <memchr>
 8002426:	9a04      	ldr	r2, [sp, #16]
 8002428:	b9d8      	cbnz	r0, 8002462 <_svfiprintf_r+0xe6>
 800242a:	06d0      	lsls	r0, r2, #27
 800242c:	bf44      	itt	mi
 800242e:	2320      	movmi	r3, #32
 8002430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002434:	0711      	lsls	r1, r2, #28
 8002436:	bf44      	itt	mi
 8002438:	232b      	movmi	r3, #43	; 0x2b
 800243a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800243e:	f89a 3000 	ldrb.w	r3, [sl]
 8002442:	2b2a      	cmp	r3, #42	; 0x2a
 8002444:	d015      	beq.n	8002472 <_svfiprintf_r+0xf6>
 8002446:	9a07      	ldr	r2, [sp, #28]
 8002448:	4654      	mov	r4, sl
 800244a:	2000      	movs	r0, #0
 800244c:	f04f 0c0a 	mov.w	ip, #10
 8002450:	4621      	mov	r1, r4
 8002452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002456:	3b30      	subs	r3, #48	; 0x30
 8002458:	2b09      	cmp	r3, #9
 800245a:	d94d      	bls.n	80024f8 <_svfiprintf_r+0x17c>
 800245c:	b1b0      	cbz	r0, 800248c <_svfiprintf_r+0x110>
 800245e:	9207      	str	r2, [sp, #28]
 8002460:	e014      	b.n	800248c <_svfiprintf_r+0x110>
 8002462:	eba0 0308 	sub.w	r3, r0, r8
 8002466:	fa09 f303 	lsl.w	r3, r9, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	46a2      	mov	sl, r4
 8002470:	e7d2      	b.n	8002418 <_svfiprintf_r+0x9c>
 8002472:	9b03      	ldr	r3, [sp, #12]
 8002474:	1d19      	adds	r1, r3, #4
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	9103      	str	r1, [sp, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	bfbb      	ittet	lt
 800247e:	425b      	neglt	r3, r3
 8002480:	f042 0202 	orrlt.w	r2, r2, #2
 8002484:	9307      	strge	r3, [sp, #28]
 8002486:	9307      	strlt	r3, [sp, #28]
 8002488:	bfb8      	it	lt
 800248a:	9204      	strlt	r2, [sp, #16]
 800248c:	7823      	ldrb	r3, [r4, #0]
 800248e:	2b2e      	cmp	r3, #46	; 0x2e
 8002490:	d10c      	bne.n	80024ac <_svfiprintf_r+0x130>
 8002492:	7863      	ldrb	r3, [r4, #1]
 8002494:	2b2a      	cmp	r3, #42	; 0x2a
 8002496:	d134      	bne.n	8002502 <_svfiprintf_r+0x186>
 8002498:	9b03      	ldr	r3, [sp, #12]
 800249a:	1d1a      	adds	r2, r3, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	9203      	str	r2, [sp, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bfb8      	it	lt
 80024a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80024a8:	3402      	adds	r4, #2
 80024aa:	9305      	str	r3, [sp, #20]
 80024ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002574 <_svfiprintf_r+0x1f8>
 80024b0:	7821      	ldrb	r1, [r4, #0]
 80024b2:	2203      	movs	r2, #3
 80024b4:	4650      	mov	r0, sl
 80024b6:	f7fd fe9b 	bl	80001f0 <memchr>
 80024ba:	b138      	cbz	r0, 80024cc <_svfiprintf_r+0x150>
 80024bc:	9b04      	ldr	r3, [sp, #16]
 80024be:	eba0 000a 	sub.w	r0, r0, sl
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	4082      	lsls	r2, r0
 80024c6:	4313      	orrs	r3, r2
 80024c8:	3401      	adds	r4, #1
 80024ca:	9304      	str	r3, [sp, #16]
 80024cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024d0:	4825      	ldr	r0, [pc, #148]	; (8002568 <_svfiprintf_r+0x1ec>)
 80024d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024d6:	2206      	movs	r2, #6
 80024d8:	f7fd fe8a 	bl	80001f0 <memchr>
 80024dc:	2800      	cmp	r0, #0
 80024de:	d038      	beq.n	8002552 <_svfiprintf_r+0x1d6>
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <_svfiprintf_r+0x1f0>)
 80024e2:	bb1b      	cbnz	r3, 800252c <_svfiprintf_r+0x1b0>
 80024e4:	9b03      	ldr	r3, [sp, #12]
 80024e6:	3307      	adds	r3, #7
 80024e8:	f023 0307 	bic.w	r3, r3, #7
 80024ec:	3308      	adds	r3, #8
 80024ee:	9303      	str	r3, [sp, #12]
 80024f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024f2:	4433      	add	r3, r6
 80024f4:	9309      	str	r3, [sp, #36]	; 0x24
 80024f6:	e768      	b.n	80023ca <_svfiprintf_r+0x4e>
 80024f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80024fc:	460c      	mov	r4, r1
 80024fe:	2001      	movs	r0, #1
 8002500:	e7a6      	b.n	8002450 <_svfiprintf_r+0xd4>
 8002502:	2300      	movs	r3, #0
 8002504:	3401      	adds	r4, #1
 8002506:	9305      	str	r3, [sp, #20]
 8002508:	4619      	mov	r1, r3
 800250a:	f04f 0c0a 	mov.w	ip, #10
 800250e:	4620      	mov	r0, r4
 8002510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002514:	3a30      	subs	r2, #48	; 0x30
 8002516:	2a09      	cmp	r2, #9
 8002518:	d903      	bls.n	8002522 <_svfiprintf_r+0x1a6>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0c6      	beq.n	80024ac <_svfiprintf_r+0x130>
 800251e:	9105      	str	r1, [sp, #20]
 8002520:	e7c4      	b.n	80024ac <_svfiprintf_r+0x130>
 8002522:	fb0c 2101 	mla	r1, ip, r1, r2
 8002526:	4604      	mov	r4, r0
 8002528:	2301      	movs	r3, #1
 800252a:	e7f0      	b.n	800250e <_svfiprintf_r+0x192>
 800252c:	ab03      	add	r3, sp, #12
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	462a      	mov	r2, r5
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <_svfiprintf_r+0x1f4>)
 8002534:	a904      	add	r1, sp, #16
 8002536:	4638      	mov	r0, r7
 8002538:	f3af 8000 	nop.w
 800253c:	1c42      	adds	r2, r0, #1
 800253e:	4606      	mov	r6, r0
 8002540:	d1d6      	bne.n	80024f0 <_svfiprintf_r+0x174>
 8002542:	89ab      	ldrh	r3, [r5, #12]
 8002544:	065b      	lsls	r3, r3, #25
 8002546:	f53f af2d 	bmi.w	80023a4 <_svfiprintf_r+0x28>
 800254a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800254c:	b01d      	add	sp, #116	; 0x74
 800254e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002552:	ab03      	add	r3, sp, #12
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	462a      	mov	r2, r5
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <_svfiprintf_r+0x1f4>)
 800255a:	a904      	add	r1, sp, #16
 800255c:	4638      	mov	r0, r7
 800255e:	f000 f879 	bl	8002654 <_printf_i>
 8002562:	e7eb      	b.n	800253c <_svfiprintf_r+0x1c0>
 8002564:	08002cf1 	.word	0x08002cf1
 8002568:	08002cfb 	.word	0x08002cfb
 800256c:	00000000 	.word	0x00000000
 8002570:	080022c9 	.word	0x080022c9
 8002574:	08002cf7 	.word	0x08002cf7

08002578 <_printf_common>:
 8002578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800257c:	4616      	mov	r6, r2
 800257e:	4699      	mov	r9, r3
 8002580:	688a      	ldr	r2, [r1, #8]
 8002582:	690b      	ldr	r3, [r1, #16]
 8002584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002588:	4293      	cmp	r3, r2
 800258a:	bfb8      	it	lt
 800258c:	4613      	movlt	r3, r2
 800258e:	6033      	str	r3, [r6, #0]
 8002590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002594:	4607      	mov	r7, r0
 8002596:	460c      	mov	r4, r1
 8002598:	b10a      	cbz	r2, 800259e <_printf_common+0x26>
 800259a:	3301      	adds	r3, #1
 800259c:	6033      	str	r3, [r6, #0]
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	0699      	lsls	r1, r3, #26
 80025a2:	bf42      	ittt	mi
 80025a4:	6833      	ldrmi	r3, [r6, #0]
 80025a6:	3302      	addmi	r3, #2
 80025a8:	6033      	strmi	r3, [r6, #0]
 80025aa:	6825      	ldr	r5, [r4, #0]
 80025ac:	f015 0506 	ands.w	r5, r5, #6
 80025b0:	d106      	bne.n	80025c0 <_printf_common+0x48>
 80025b2:	f104 0a19 	add.w	sl, r4, #25
 80025b6:	68e3      	ldr	r3, [r4, #12]
 80025b8:	6832      	ldr	r2, [r6, #0]
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	42ab      	cmp	r3, r5
 80025be:	dc26      	bgt.n	800260e <_printf_common+0x96>
 80025c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025c4:	1e13      	subs	r3, r2, #0
 80025c6:	6822      	ldr	r2, [r4, #0]
 80025c8:	bf18      	it	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	0692      	lsls	r2, r2, #26
 80025ce:	d42b      	bmi.n	8002628 <_printf_common+0xb0>
 80025d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025d4:	4649      	mov	r1, r9
 80025d6:	4638      	mov	r0, r7
 80025d8:	47c0      	blx	r8
 80025da:	3001      	adds	r0, #1
 80025dc:	d01e      	beq.n	800261c <_printf_common+0xa4>
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	6922      	ldr	r2, [r4, #16]
 80025e2:	f003 0306 	and.w	r3, r3, #6
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf02      	ittt	eq
 80025ea:	68e5      	ldreq	r5, [r4, #12]
 80025ec:	6833      	ldreq	r3, [r6, #0]
 80025ee:	1aed      	subeq	r5, r5, r3
 80025f0:	68a3      	ldr	r3, [r4, #8]
 80025f2:	bf0c      	ite	eq
 80025f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025f8:	2500      	movne	r5, #0
 80025fa:	4293      	cmp	r3, r2
 80025fc:	bfc4      	itt	gt
 80025fe:	1a9b      	subgt	r3, r3, r2
 8002600:	18ed      	addgt	r5, r5, r3
 8002602:	2600      	movs	r6, #0
 8002604:	341a      	adds	r4, #26
 8002606:	42b5      	cmp	r5, r6
 8002608:	d11a      	bne.n	8002640 <_printf_common+0xc8>
 800260a:	2000      	movs	r0, #0
 800260c:	e008      	b.n	8002620 <_printf_common+0xa8>
 800260e:	2301      	movs	r3, #1
 8002610:	4652      	mov	r2, sl
 8002612:	4649      	mov	r1, r9
 8002614:	4638      	mov	r0, r7
 8002616:	47c0      	blx	r8
 8002618:	3001      	adds	r0, #1
 800261a:	d103      	bne.n	8002624 <_printf_common+0xac>
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002624:	3501      	adds	r5, #1
 8002626:	e7c6      	b.n	80025b6 <_printf_common+0x3e>
 8002628:	18e1      	adds	r1, r4, r3
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	2030      	movs	r0, #48	; 0x30
 800262e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002632:	4422      	add	r2, r4
 8002634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800263c:	3302      	adds	r3, #2
 800263e:	e7c7      	b.n	80025d0 <_printf_common+0x58>
 8002640:	2301      	movs	r3, #1
 8002642:	4622      	mov	r2, r4
 8002644:	4649      	mov	r1, r9
 8002646:	4638      	mov	r0, r7
 8002648:	47c0      	blx	r8
 800264a:	3001      	adds	r0, #1
 800264c:	d0e6      	beq.n	800261c <_printf_common+0xa4>
 800264e:	3601      	adds	r6, #1
 8002650:	e7d9      	b.n	8002606 <_printf_common+0x8e>
	...

08002654 <_printf_i>:
 8002654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002658:	7e0f      	ldrb	r7, [r1, #24]
 800265a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800265c:	2f78      	cmp	r7, #120	; 0x78
 800265e:	4691      	mov	r9, r2
 8002660:	4680      	mov	r8, r0
 8002662:	460c      	mov	r4, r1
 8002664:	469a      	mov	sl, r3
 8002666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800266a:	d807      	bhi.n	800267c <_printf_i+0x28>
 800266c:	2f62      	cmp	r7, #98	; 0x62
 800266e:	d80a      	bhi.n	8002686 <_printf_i+0x32>
 8002670:	2f00      	cmp	r7, #0
 8002672:	f000 80d4 	beq.w	800281e <_printf_i+0x1ca>
 8002676:	2f58      	cmp	r7, #88	; 0x58
 8002678:	f000 80c0 	beq.w	80027fc <_printf_i+0x1a8>
 800267c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002684:	e03a      	b.n	80026fc <_printf_i+0xa8>
 8002686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800268a:	2b15      	cmp	r3, #21
 800268c:	d8f6      	bhi.n	800267c <_printf_i+0x28>
 800268e:	a101      	add	r1, pc, #4	; (adr r1, 8002694 <_printf_i+0x40>)
 8002690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002694:	080026ed 	.word	0x080026ed
 8002698:	08002701 	.word	0x08002701
 800269c:	0800267d 	.word	0x0800267d
 80026a0:	0800267d 	.word	0x0800267d
 80026a4:	0800267d 	.word	0x0800267d
 80026a8:	0800267d 	.word	0x0800267d
 80026ac:	08002701 	.word	0x08002701
 80026b0:	0800267d 	.word	0x0800267d
 80026b4:	0800267d 	.word	0x0800267d
 80026b8:	0800267d 	.word	0x0800267d
 80026bc:	0800267d 	.word	0x0800267d
 80026c0:	08002805 	.word	0x08002805
 80026c4:	0800272d 	.word	0x0800272d
 80026c8:	080027bf 	.word	0x080027bf
 80026cc:	0800267d 	.word	0x0800267d
 80026d0:	0800267d 	.word	0x0800267d
 80026d4:	08002827 	.word	0x08002827
 80026d8:	0800267d 	.word	0x0800267d
 80026dc:	0800272d 	.word	0x0800272d
 80026e0:	0800267d 	.word	0x0800267d
 80026e4:	0800267d 	.word	0x0800267d
 80026e8:	080027c7 	.word	0x080027c7
 80026ec:	682b      	ldr	r3, [r5, #0]
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	602a      	str	r2, [r5, #0]
 80026f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026fc:	2301      	movs	r3, #1
 80026fe:	e09f      	b.n	8002840 <_printf_i+0x1ec>
 8002700:	6820      	ldr	r0, [r4, #0]
 8002702:	682b      	ldr	r3, [r5, #0]
 8002704:	0607      	lsls	r7, r0, #24
 8002706:	f103 0104 	add.w	r1, r3, #4
 800270a:	6029      	str	r1, [r5, #0]
 800270c:	d501      	bpl.n	8002712 <_printf_i+0xbe>
 800270e:	681e      	ldr	r6, [r3, #0]
 8002710:	e003      	b.n	800271a <_printf_i+0xc6>
 8002712:	0646      	lsls	r6, r0, #25
 8002714:	d5fb      	bpl.n	800270e <_printf_i+0xba>
 8002716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800271a:	2e00      	cmp	r6, #0
 800271c:	da03      	bge.n	8002726 <_printf_i+0xd2>
 800271e:	232d      	movs	r3, #45	; 0x2d
 8002720:	4276      	negs	r6, r6
 8002722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002726:	485a      	ldr	r0, [pc, #360]	; (8002890 <_printf_i+0x23c>)
 8002728:	230a      	movs	r3, #10
 800272a:	e012      	b.n	8002752 <_printf_i+0xfe>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	6820      	ldr	r0, [r4, #0]
 8002730:	1d19      	adds	r1, r3, #4
 8002732:	6029      	str	r1, [r5, #0]
 8002734:	0605      	lsls	r5, r0, #24
 8002736:	d501      	bpl.n	800273c <_printf_i+0xe8>
 8002738:	681e      	ldr	r6, [r3, #0]
 800273a:	e002      	b.n	8002742 <_printf_i+0xee>
 800273c:	0641      	lsls	r1, r0, #25
 800273e:	d5fb      	bpl.n	8002738 <_printf_i+0xe4>
 8002740:	881e      	ldrh	r6, [r3, #0]
 8002742:	4853      	ldr	r0, [pc, #332]	; (8002890 <_printf_i+0x23c>)
 8002744:	2f6f      	cmp	r7, #111	; 0x6f
 8002746:	bf0c      	ite	eq
 8002748:	2308      	moveq	r3, #8
 800274a:	230a      	movne	r3, #10
 800274c:	2100      	movs	r1, #0
 800274e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002752:	6865      	ldr	r5, [r4, #4]
 8002754:	60a5      	str	r5, [r4, #8]
 8002756:	2d00      	cmp	r5, #0
 8002758:	bfa2      	ittt	ge
 800275a:	6821      	ldrge	r1, [r4, #0]
 800275c:	f021 0104 	bicge.w	r1, r1, #4
 8002760:	6021      	strge	r1, [r4, #0]
 8002762:	b90e      	cbnz	r6, 8002768 <_printf_i+0x114>
 8002764:	2d00      	cmp	r5, #0
 8002766:	d04b      	beq.n	8002800 <_printf_i+0x1ac>
 8002768:	4615      	mov	r5, r2
 800276a:	fbb6 f1f3 	udiv	r1, r6, r3
 800276e:	fb03 6711 	mls	r7, r3, r1, r6
 8002772:	5dc7      	ldrb	r7, [r0, r7]
 8002774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002778:	4637      	mov	r7, r6
 800277a:	42bb      	cmp	r3, r7
 800277c:	460e      	mov	r6, r1
 800277e:	d9f4      	bls.n	800276a <_printf_i+0x116>
 8002780:	2b08      	cmp	r3, #8
 8002782:	d10b      	bne.n	800279c <_printf_i+0x148>
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	07de      	lsls	r6, r3, #31
 8002788:	d508      	bpl.n	800279c <_printf_i+0x148>
 800278a:	6923      	ldr	r3, [r4, #16]
 800278c:	6861      	ldr	r1, [r4, #4]
 800278e:	4299      	cmp	r1, r3
 8002790:	bfde      	ittt	le
 8002792:	2330      	movle	r3, #48	; 0x30
 8002794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800279c:	1b52      	subs	r2, r2, r5
 800279e:	6122      	str	r2, [r4, #16]
 80027a0:	f8cd a000 	str.w	sl, [sp]
 80027a4:	464b      	mov	r3, r9
 80027a6:	aa03      	add	r2, sp, #12
 80027a8:	4621      	mov	r1, r4
 80027aa:	4640      	mov	r0, r8
 80027ac:	f7ff fee4 	bl	8002578 <_printf_common>
 80027b0:	3001      	adds	r0, #1
 80027b2:	d14a      	bne.n	800284a <_printf_i+0x1f6>
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	b004      	add	sp, #16
 80027ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	f043 0320 	orr.w	r3, r3, #32
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	4833      	ldr	r0, [pc, #204]	; (8002894 <_printf_i+0x240>)
 80027c8:	2778      	movs	r7, #120	; 0x78
 80027ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	6829      	ldr	r1, [r5, #0]
 80027d2:	061f      	lsls	r7, r3, #24
 80027d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80027d8:	d402      	bmi.n	80027e0 <_printf_i+0x18c>
 80027da:	065f      	lsls	r7, r3, #25
 80027dc:	bf48      	it	mi
 80027de:	b2b6      	uxthmi	r6, r6
 80027e0:	07df      	lsls	r7, r3, #31
 80027e2:	bf48      	it	mi
 80027e4:	f043 0320 	orrmi.w	r3, r3, #32
 80027e8:	6029      	str	r1, [r5, #0]
 80027ea:	bf48      	it	mi
 80027ec:	6023      	strmi	r3, [r4, #0]
 80027ee:	b91e      	cbnz	r6, 80027f8 <_printf_i+0x1a4>
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	f023 0320 	bic.w	r3, r3, #32
 80027f6:	6023      	str	r3, [r4, #0]
 80027f8:	2310      	movs	r3, #16
 80027fa:	e7a7      	b.n	800274c <_printf_i+0xf8>
 80027fc:	4824      	ldr	r0, [pc, #144]	; (8002890 <_printf_i+0x23c>)
 80027fe:	e7e4      	b.n	80027ca <_printf_i+0x176>
 8002800:	4615      	mov	r5, r2
 8002802:	e7bd      	b.n	8002780 <_printf_i+0x12c>
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	6826      	ldr	r6, [r4, #0]
 8002808:	6961      	ldr	r1, [r4, #20]
 800280a:	1d18      	adds	r0, r3, #4
 800280c:	6028      	str	r0, [r5, #0]
 800280e:	0635      	lsls	r5, r6, #24
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	d501      	bpl.n	8002818 <_printf_i+0x1c4>
 8002814:	6019      	str	r1, [r3, #0]
 8002816:	e002      	b.n	800281e <_printf_i+0x1ca>
 8002818:	0670      	lsls	r0, r6, #25
 800281a:	d5fb      	bpl.n	8002814 <_printf_i+0x1c0>
 800281c:	8019      	strh	r1, [r3, #0]
 800281e:	2300      	movs	r3, #0
 8002820:	6123      	str	r3, [r4, #16]
 8002822:	4615      	mov	r5, r2
 8002824:	e7bc      	b.n	80027a0 <_printf_i+0x14c>
 8002826:	682b      	ldr	r3, [r5, #0]
 8002828:	1d1a      	adds	r2, r3, #4
 800282a:	602a      	str	r2, [r5, #0]
 800282c:	681d      	ldr	r5, [r3, #0]
 800282e:	6862      	ldr	r2, [r4, #4]
 8002830:	2100      	movs	r1, #0
 8002832:	4628      	mov	r0, r5
 8002834:	f7fd fcdc 	bl	80001f0 <memchr>
 8002838:	b108      	cbz	r0, 800283e <_printf_i+0x1ea>
 800283a:	1b40      	subs	r0, r0, r5
 800283c:	6060      	str	r0, [r4, #4]
 800283e:	6863      	ldr	r3, [r4, #4]
 8002840:	6123      	str	r3, [r4, #16]
 8002842:	2300      	movs	r3, #0
 8002844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002848:	e7aa      	b.n	80027a0 <_printf_i+0x14c>
 800284a:	6923      	ldr	r3, [r4, #16]
 800284c:	462a      	mov	r2, r5
 800284e:	4649      	mov	r1, r9
 8002850:	4640      	mov	r0, r8
 8002852:	47d0      	blx	sl
 8002854:	3001      	adds	r0, #1
 8002856:	d0ad      	beq.n	80027b4 <_printf_i+0x160>
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	079b      	lsls	r3, r3, #30
 800285c:	d413      	bmi.n	8002886 <_printf_i+0x232>
 800285e:	68e0      	ldr	r0, [r4, #12]
 8002860:	9b03      	ldr	r3, [sp, #12]
 8002862:	4298      	cmp	r0, r3
 8002864:	bfb8      	it	lt
 8002866:	4618      	movlt	r0, r3
 8002868:	e7a6      	b.n	80027b8 <_printf_i+0x164>
 800286a:	2301      	movs	r3, #1
 800286c:	4632      	mov	r2, r6
 800286e:	4649      	mov	r1, r9
 8002870:	4640      	mov	r0, r8
 8002872:	47d0      	blx	sl
 8002874:	3001      	adds	r0, #1
 8002876:	d09d      	beq.n	80027b4 <_printf_i+0x160>
 8002878:	3501      	adds	r5, #1
 800287a:	68e3      	ldr	r3, [r4, #12]
 800287c:	9903      	ldr	r1, [sp, #12]
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	42ab      	cmp	r3, r5
 8002882:	dcf2      	bgt.n	800286a <_printf_i+0x216>
 8002884:	e7eb      	b.n	800285e <_printf_i+0x20a>
 8002886:	2500      	movs	r5, #0
 8002888:	f104 0619 	add.w	r6, r4, #25
 800288c:	e7f5      	b.n	800287a <_printf_i+0x226>
 800288e:	bf00      	nop
 8002890:	08002d02 	.word	0x08002d02
 8002894:	08002d13 	.word	0x08002d13

08002898 <__sflush_r>:
 8002898:	898a      	ldrh	r2, [r1, #12]
 800289a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289e:	4605      	mov	r5, r0
 80028a0:	0710      	lsls	r0, r2, #28
 80028a2:	460c      	mov	r4, r1
 80028a4:	d458      	bmi.n	8002958 <__sflush_r+0xc0>
 80028a6:	684b      	ldr	r3, [r1, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dc05      	bgt.n	80028b8 <__sflush_r+0x20>
 80028ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	dc02      	bgt.n	80028b8 <__sflush_r+0x20>
 80028b2:	2000      	movs	r0, #0
 80028b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028ba:	2e00      	cmp	r6, #0
 80028bc:	d0f9      	beq.n	80028b2 <__sflush_r+0x1a>
 80028be:	2300      	movs	r3, #0
 80028c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028c4:	682f      	ldr	r7, [r5, #0]
 80028c6:	6a21      	ldr	r1, [r4, #32]
 80028c8:	602b      	str	r3, [r5, #0]
 80028ca:	d032      	beq.n	8002932 <__sflush_r+0x9a>
 80028cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	075a      	lsls	r2, r3, #29
 80028d2:	d505      	bpl.n	80028e0 <__sflush_r+0x48>
 80028d4:	6863      	ldr	r3, [r4, #4]
 80028d6:	1ac0      	subs	r0, r0, r3
 80028d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028da:	b10b      	cbz	r3, 80028e0 <__sflush_r+0x48>
 80028dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028de:	1ac0      	subs	r0, r0, r3
 80028e0:	2300      	movs	r3, #0
 80028e2:	4602      	mov	r2, r0
 80028e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028e6:	6a21      	ldr	r1, [r4, #32]
 80028e8:	4628      	mov	r0, r5
 80028ea:	47b0      	blx	r6
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	d106      	bne.n	8002900 <__sflush_r+0x68>
 80028f2:	6829      	ldr	r1, [r5, #0]
 80028f4:	291d      	cmp	r1, #29
 80028f6:	d82b      	bhi.n	8002950 <__sflush_r+0xb8>
 80028f8:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <__sflush_r+0x108>)
 80028fa:	410a      	asrs	r2, r1
 80028fc:	07d6      	lsls	r6, r2, #31
 80028fe:	d427      	bmi.n	8002950 <__sflush_r+0xb8>
 8002900:	2200      	movs	r2, #0
 8002902:	6062      	str	r2, [r4, #4]
 8002904:	04d9      	lsls	r1, r3, #19
 8002906:	6922      	ldr	r2, [r4, #16]
 8002908:	6022      	str	r2, [r4, #0]
 800290a:	d504      	bpl.n	8002916 <__sflush_r+0x7e>
 800290c:	1c42      	adds	r2, r0, #1
 800290e:	d101      	bne.n	8002914 <__sflush_r+0x7c>
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	b903      	cbnz	r3, 8002916 <__sflush_r+0x7e>
 8002914:	6560      	str	r0, [r4, #84]	; 0x54
 8002916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002918:	602f      	str	r7, [r5, #0]
 800291a:	2900      	cmp	r1, #0
 800291c:	d0c9      	beq.n	80028b2 <__sflush_r+0x1a>
 800291e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002922:	4299      	cmp	r1, r3
 8002924:	d002      	beq.n	800292c <__sflush_r+0x94>
 8002926:	4628      	mov	r0, r5
 8002928:	f7ff fbd6 	bl	80020d8 <_free_r>
 800292c:	2000      	movs	r0, #0
 800292e:	6360      	str	r0, [r4, #52]	; 0x34
 8002930:	e7c0      	b.n	80028b4 <__sflush_r+0x1c>
 8002932:	2301      	movs	r3, #1
 8002934:	4628      	mov	r0, r5
 8002936:	47b0      	blx	r6
 8002938:	1c41      	adds	r1, r0, #1
 800293a:	d1c8      	bne.n	80028ce <__sflush_r+0x36>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0c5      	beq.n	80028ce <__sflush_r+0x36>
 8002942:	2b1d      	cmp	r3, #29
 8002944:	d001      	beq.n	800294a <__sflush_r+0xb2>
 8002946:	2b16      	cmp	r3, #22
 8002948:	d101      	bne.n	800294e <__sflush_r+0xb6>
 800294a:	602f      	str	r7, [r5, #0]
 800294c:	e7b1      	b.n	80028b2 <__sflush_r+0x1a>
 800294e:	89a3      	ldrh	r3, [r4, #12]
 8002950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002954:	81a3      	strh	r3, [r4, #12]
 8002956:	e7ad      	b.n	80028b4 <__sflush_r+0x1c>
 8002958:	690f      	ldr	r7, [r1, #16]
 800295a:	2f00      	cmp	r7, #0
 800295c:	d0a9      	beq.n	80028b2 <__sflush_r+0x1a>
 800295e:	0793      	lsls	r3, r2, #30
 8002960:	680e      	ldr	r6, [r1, #0]
 8002962:	bf08      	it	eq
 8002964:	694b      	ldreq	r3, [r1, #20]
 8002966:	600f      	str	r7, [r1, #0]
 8002968:	bf18      	it	ne
 800296a:	2300      	movne	r3, #0
 800296c:	eba6 0807 	sub.w	r8, r6, r7
 8002970:	608b      	str	r3, [r1, #8]
 8002972:	f1b8 0f00 	cmp.w	r8, #0
 8002976:	dd9c      	ble.n	80028b2 <__sflush_r+0x1a>
 8002978:	6a21      	ldr	r1, [r4, #32]
 800297a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800297c:	4643      	mov	r3, r8
 800297e:	463a      	mov	r2, r7
 8002980:	4628      	mov	r0, r5
 8002982:	47b0      	blx	r6
 8002984:	2800      	cmp	r0, #0
 8002986:	dc06      	bgt.n	8002996 <__sflush_r+0xfe>
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298e:	81a3      	strh	r3, [r4, #12]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	e78e      	b.n	80028b4 <__sflush_r+0x1c>
 8002996:	4407      	add	r7, r0
 8002998:	eba8 0800 	sub.w	r8, r8, r0
 800299c:	e7e9      	b.n	8002972 <__sflush_r+0xda>
 800299e:	bf00      	nop
 80029a0:	dfbffffe 	.word	0xdfbffffe

080029a4 <_fflush_r>:
 80029a4:	b538      	push	{r3, r4, r5, lr}
 80029a6:	690b      	ldr	r3, [r1, #16]
 80029a8:	4605      	mov	r5, r0
 80029aa:	460c      	mov	r4, r1
 80029ac:	b913      	cbnz	r3, 80029b4 <_fflush_r+0x10>
 80029ae:	2500      	movs	r5, #0
 80029b0:	4628      	mov	r0, r5
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
 80029b4:	b118      	cbz	r0, 80029be <_fflush_r+0x1a>
 80029b6:	6a03      	ldr	r3, [r0, #32]
 80029b8:	b90b      	cbnz	r3, 80029be <_fflush_r+0x1a>
 80029ba:	f7ff f989 	bl	8001cd0 <__sinit>
 80029be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f3      	beq.n	80029ae <_fflush_r+0xa>
 80029c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029c8:	07d0      	lsls	r0, r2, #31
 80029ca:	d404      	bmi.n	80029d6 <_fflush_r+0x32>
 80029cc:	0599      	lsls	r1, r3, #22
 80029ce:	d402      	bmi.n	80029d6 <_fflush_r+0x32>
 80029d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029d2:	f7ff fb7f 	bl	80020d4 <__retarget_lock_acquire_recursive>
 80029d6:	4628      	mov	r0, r5
 80029d8:	4621      	mov	r1, r4
 80029da:	f7ff ff5d 	bl	8002898 <__sflush_r>
 80029de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029e0:	07da      	lsls	r2, r3, #31
 80029e2:	4605      	mov	r5, r0
 80029e4:	d4e4      	bmi.n	80029b0 <_fflush_r+0xc>
 80029e6:	89a3      	ldrh	r3, [r4, #12]
 80029e8:	059b      	lsls	r3, r3, #22
 80029ea:	d4e1      	bmi.n	80029b0 <_fflush_r+0xc>
 80029ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ee:	f7ff fb72 	bl	80020d6 <__retarget_lock_release_recursive>
 80029f2:	e7dd      	b.n	80029b0 <_fflush_r+0xc>

080029f4 <__swhatbuf_r>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	460c      	mov	r4, r1
 80029f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029fc:	2900      	cmp	r1, #0
 80029fe:	b096      	sub	sp, #88	; 0x58
 8002a00:	4615      	mov	r5, r2
 8002a02:	461e      	mov	r6, r3
 8002a04:	da0d      	bge.n	8002a22 <__swhatbuf_r+0x2e>
 8002a06:	89a3      	ldrh	r3, [r4, #12]
 8002a08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	bf0c      	ite	eq
 8002a12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002a16:	2340      	movne	r3, #64	; 0x40
 8002a18:	2000      	movs	r0, #0
 8002a1a:	6031      	str	r1, [r6, #0]
 8002a1c:	602b      	str	r3, [r5, #0]
 8002a1e:	b016      	add	sp, #88	; 0x58
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	466a      	mov	r2, sp
 8002a24:	f000 f862 	bl	8002aec <_fstat_r>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	dbec      	blt.n	8002a06 <__swhatbuf_r+0x12>
 8002a2c:	9901      	ldr	r1, [sp, #4]
 8002a2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002a32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002a36:	4259      	negs	r1, r3
 8002a38:	4159      	adcs	r1, r3
 8002a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a3e:	e7eb      	b.n	8002a18 <__swhatbuf_r+0x24>

08002a40 <__smakebuf_r>:
 8002a40:	898b      	ldrh	r3, [r1, #12]
 8002a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a44:	079d      	lsls	r5, r3, #30
 8002a46:	4606      	mov	r6, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	d507      	bpl.n	8002a5c <__smakebuf_r+0x1c>
 8002a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a50:	6023      	str	r3, [r4, #0]
 8002a52:	6123      	str	r3, [r4, #16]
 8002a54:	2301      	movs	r3, #1
 8002a56:	6163      	str	r3, [r4, #20]
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd70      	pop	{r4, r5, r6, pc}
 8002a5c:	ab01      	add	r3, sp, #4
 8002a5e:	466a      	mov	r2, sp
 8002a60:	f7ff ffc8 	bl	80029f4 <__swhatbuf_r>
 8002a64:	9900      	ldr	r1, [sp, #0]
 8002a66:	4605      	mov	r5, r0
 8002a68:	4630      	mov	r0, r6
 8002a6a:	f7ff fba1 	bl	80021b0 <_malloc_r>
 8002a6e:	b948      	cbnz	r0, 8002a84 <__smakebuf_r+0x44>
 8002a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a74:	059a      	lsls	r2, r3, #22
 8002a76:	d4ef      	bmi.n	8002a58 <__smakebuf_r+0x18>
 8002a78:	f023 0303 	bic.w	r3, r3, #3
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	81a3      	strh	r3, [r4, #12]
 8002a82:	e7e3      	b.n	8002a4c <__smakebuf_r+0xc>
 8002a84:	89a3      	ldrh	r3, [r4, #12]
 8002a86:	6020      	str	r0, [r4, #0]
 8002a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8c:	81a3      	strh	r3, [r4, #12]
 8002a8e:	9b00      	ldr	r3, [sp, #0]
 8002a90:	6163      	str	r3, [r4, #20]
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	6120      	str	r0, [r4, #16]
 8002a96:	b15b      	cbz	r3, 8002ab0 <__smakebuf_r+0x70>
 8002a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	f000 f837 	bl	8002b10 <_isatty_r>
 8002aa2:	b128      	cbz	r0, 8002ab0 <__smakebuf_r+0x70>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	81a3      	strh	r3, [r4, #12]
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	431d      	orrs	r5, r3
 8002ab4:	81a5      	strh	r5, [r4, #12]
 8002ab6:	e7cf      	b.n	8002a58 <__smakebuf_r+0x18>

08002ab8 <memmove>:
 8002ab8:	4288      	cmp	r0, r1
 8002aba:	b510      	push	{r4, lr}
 8002abc:	eb01 0402 	add.w	r4, r1, r2
 8002ac0:	d902      	bls.n	8002ac8 <memmove+0x10>
 8002ac2:	4284      	cmp	r4, r0
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	d807      	bhi.n	8002ad8 <memmove+0x20>
 8002ac8:	1e43      	subs	r3, r0, #1
 8002aca:	42a1      	cmp	r1, r4
 8002acc:	d008      	beq.n	8002ae0 <memmove+0x28>
 8002ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ad6:	e7f8      	b.n	8002aca <memmove+0x12>
 8002ad8:	4402      	add	r2, r0
 8002ada:	4601      	mov	r1, r0
 8002adc:	428a      	cmp	r2, r1
 8002ade:	d100      	bne.n	8002ae2 <memmove+0x2a>
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002aea:	e7f7      	b.n	8002adc <memmove+0x24>

08002aec <_fstat_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	4d07      	ldr	r5, [pc, #28]	; (8002b0c <_fstat_r+0x20>)
 8002af0:	2300      	movs	r3, #0
 8002af2:	4604      	mov	r4, r0
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	602b      	str	r3, [r5, #0]
 8002afa:	f7fe ffc0 	bl	8001a7e <_fstat>
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	d102      	bne.n	8002b08 <_fstat_r+0x1c>
 8002b02:	682b      	ldr	r3, [r5, #0]
 8002b04:	b103      	cbz	r3, 8002b08 <_fstat_r+0x1c>
 8002b06:	6023      	str	r3, [r4, #0]
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000034c 	.word	0x2000034c

08002b10 <_isatty_r>:
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	4d06      	ldr	r5, [pc, #24]	; (8002b2c <_isatty_r+0x1c>)
 8002b14:	2300      	movs	r3, #0
 8002b16:	4604      	mov	r4, r0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	602b      	str	r3, [r5, #0]
 8002b1c:	f7fe ffbf 	bl	8001a9e <_isatty>
 8002b20:	1c43      	adds	r3, r0, #1
 8002b22:	d102      	bne.n	8002b2a <_isatty_r+0x1a>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	b103      	cbz	r3, 8002b2a <_isatty_r+0x1a>
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
 8002b2c:	2000034c 	.word	0x2000034c

08002b30 <_sbrk_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4d06      	ldr	r5, [pc, #24]	; (8002b4c <_sbrk_r+0x1c>)
 8002b34:	2300      	movs	r3, #0
 8002b36:	4604      	mov	r4, r0
 8002b38:	4608      	mov	r0, r1
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	f7fe ffc8 	bl	8001ad0 <_sbrk>
 8002b40:	1c43      	adds	r3, r0, #1
 8002b42:	d102      	bne.n	8002b4a <_sbrk_r+0x1a>
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	b103      	cbz	r3, 8002b4a <_sbrk_r+0x1a>
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	bd38      	pop	{r3, r4, r5, pc}
 8002b4c:	2000034c 	.word	0x2000034c

08002b50 <memcpy>:
 8002b50:	440a      	add	r2, r1
 8002b52:	4291      	cmp	r1, r2
 8002b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b58:	d100      	bne.n	8002b5c <memcpy+0xc>
 8002b5a:	4770      	bx	lr
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b66:	4291      	cmp	r1, r2
 8002b68:	d1f9      	bne.n	8002b5e <memcpy+0xe>
 8002b6a:	bd10      	pop	{r4, pc}

08002b6c <_realloc_r>:
 8002b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b70:	4680      	mov	r8, r0
 8002b72:	4614      	mov	r4, r2
 8002b74:	460e      	mov	r6, r1
 8002b76:	b921      	cbnz	r1, 8002b82 <_realloc_r+0x16>
 8002b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	f7ff bb17 	b.w	80021b0 <_malloc_r>
 8002b82:	b92a      	cbnz	r2, 8002b90 <_realloc_r+0x24>
 8002b84:	f7ff faa8 	bl	80020d8 <_free_r>
 8002b88:	4625      	mov	r5, r4
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b90:	f000 f81b 	bl	8002bca <_malloc_usable_size_r>
 8002b94:	4284      	cmp	r4, r0
 8002b96:	4607      	mov	r7, r0
 8002b98:	d802      	bhi.n	8002ba0 <_realloc_r+0x34>
 8002b9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b9e:	d812      	bhi.n	8002bc6 <_realloc_r+0x5a>
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4640      	mov	r0, r8
 8002ba4:	f7ff fb04 	bl	80021b0 <_malloc_r>
 8002ba8:	4605      	mov	r5, r0
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d0ed      	beq.n	8002b8a <_realloc_r+0x1e>
 8002bae:	42bc      	cmp	r4, r7
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	4631      	mov	r1, r6
 8002bb4:	bf28      	it	cs
 8002bb6:	463a      	movcs	r2, r7
 8002bb8:	f7ff ffca 	bl	8002b50 <memcpy>
 8002bbc:	4631      	mov	r1, r6
 8002bbe:	4640      	mov	r0, r8
 8002bc0:	f7ff fa8a 	bl	80020d8 <_free_r>
 8002bc4:	e7e1      	b.n	8002b8a <_realloc_r+0x1e>
 8002bc6:	4635      	mov	r5, r6
 8002bc8:	e7df      	b.n	8002b8a <_realloc_r+0x1e>

08002bca <_malloc_usable_size_r>:
 8002bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bce:	1f18      	subs	r0, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bfbc      	itt	lt
 8002bd4:	580b      	ldrlt	r3, [r1, r0]
 8002bd6:	18c0      	addlt	r0, r0, r3
 8002bd8:	4770      	bx	lr
	...

08002bdc <_init>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	bf00      	nop
 8002be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be2:	bc08      	pop	{r3}
 8002be4:	469e      	mov	lr, r3
 8002be6:	4770      	bx	lr

08002be8 <_fini>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr
